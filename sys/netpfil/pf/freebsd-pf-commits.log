commit bf206a1db26e44180466ea2258a2b82467ffb99e
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Thu May 4 17:20:02 2023 +0200

    pf: remove NULL check before uma_zfree()
    
    uma_zfree() can be called on a NULL pointer. Simplify the pf code a
    little by removing the redundant checks.
    
commit 16303d2ba6b099afa8ec8f2e97deca2785caa082
Author: Kajetan Staszkiewicz <vegeta@tuxpowered.net>
Date:   Wed May 3 10:31:05 2023 +0200

    pf: improve source node error handling
    
    Functions manipulating source nodes can fail due to various reasons like
    memory allocation errors, hitting configured limits or lack of
    redirection targets. Ensure those errors are properly caught and
    propagated in the code. Increase the error counters not only when
    parsing the main ruleset but the NAT ruleset too.
    
    Cherry-picked from development of D39880
    
    Differential Revision:  https://reviews.freebsd.org/D39940

commit 7b676698856ec4604b2b93f4fa917767bfbfa66e
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Wed May 3 08:02:43 2023 +0200

    pf: simplify structs with anonymous unions
    
    Rather than playing preprocessor hacks use actual anonymous unions.
    No functional change.
    
commit 7626863e198384cada38c5f8dd2aaed20029553a
Author: Tom Hukins <tom@FreeBSD.org>
Date:   Wed Mar 29 15:00:00 2023 +0100

    pf: Fix a spelling mistake in a comment
    
    Pull Request:   https://github.com/freebsd/freebsd-src/pull/704

commit db0a2bfd0c6df48ae1c5346198b97c83f746d219
Author: Kajetan Staszkiewicz <vegeta@tuxpowered.net>
Date:   Mon May 1 16:07:42 2023 +0200

    pf: reduce number of hashing operations when handling source nodes
    
    Reduce number of hashing operations when handling source nodes by always
    having a pointer to the hash row mutex in the source node. Provide
    macros for handling and asserting the mutex. Calculate the hash only
    once in pf_find_src_node() and then use this hash in subsequent
    operations.
    
    Cherry-picked from development of D39880
    
    Differential Revision:  https://reviews.freebsd.org/D39888

commit a81f5112a002196936eacabfc7ab173ce8a5630a
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Wed Apr 26 15:12:30 2023 +0200

    pf: clear PF_TAG_ROUTE_TO for dummynet fast path
    
    Similar to the PF_TAG_DUMMYNET we must also clear the route tag if
    dummynet didn't keep the packet. In that case we'd continue immediately
    and there'd be no need for the route tag. Keeping it could lead to
    unexpected routing of traffic.
    
    See also:       27407a6adc793bdfaef8a86ece32fb1b461429f0
    See also:       https://redmine.pfsense.org/issues/14055

commit ef661d4a5bf912e4d4850faaf50664532d82541c
Author: Christian McDonald <cmcdonald@netgate.com>
Date:   Mon Apr 24 14:55:34 2023 -0400

    pf: introduce ridentifier and labels to ether rules
    
    Make Ethernet rules more similar to the usual layer 3 rules by also
    allowing ridentifier and labels to be set on them.
    
commit 2e6cdfe29355cd81a4e2299d61e6ed57f6798a99
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Tue Apr 18 16:06:36 2023 +0200

    pf: change pf_rules_lock and pf_ioctl_lock to per-vnet locks
    
    Both pf_rules_lock and pf_ioctl_lock only ever affect one vnet, so
    there's no point in having these locks affect other vnets.
    (In fact, the only lock in pf that can affect multiple vnets is
    pf_end_lock.)
    
    That's especially important for the rules lock, because taking the write
    lock suspends all network traffic until it's released. This will reduce
    the impact a vnet running pf can have on other vnets, and improve
    concurrency on machines running multiple pf-enabled vnets.
    
    Differential Revision:  https://reviews.freebsd.org/D39658

commit 39282ef356db25879660427de8607716a8439077
Author: Kajetan Staszkiewicz <vegeta@tuxpowered.net>
Date:   Thu Apr 13 18:12:59 2023 +0200

    pf: backport OpenBSD syntax of "scrub" option for "match" and "pass" rules
    
    Introduce the OpenBSD syntax of "scrub" option for "match" and "pass"
    rules and the "set reassemble" flag. The patch is backward-compatible,
    pf.conf can be still written in FreeBSD-style.
    
    Obtained from:  OpenBSD
    Differential Revision:  https://reviews.freebsd.org/D38025

commit 27b23cdec9d1255e014ea0decac42a5be8d00735
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Fri Mar 24 07:04:56 2023 +0100

    pf: remove pd_refs from pfsync
    
    It only served to complicate cleanup, and added no value.
    
    While here drop packets in pfsync_defer_tmo() if we don't have a syncif,
    rather than just leaving them on the queue.
    
    Differential Revision:  https://reviews.freebsd.org/D39248

commit 01194da28a2123a2aa09808319f152fa115f60f1
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Wed Mar 22 14:46:25 2023 +0100

    pfsync: hold b_mtx for callout_stop(pd_tmo)
    
    The pd_tmo callout has an associated mutex, which we must hold while
    calling callout_stop().
    
    Reported by:    markj
    Differential Revision:  https://reviews.freebsd.org/D39223

commit ad729f8d503e26ddfe4dcc0fa701720c753bd3ba
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Fri Mar 24 06:39:01 2023 +0100

    pf: ignore ip6_output() return value in pf_refragment6()
    
    We can't do anything if ip6_output() fails, other than discard the
    packet which ip6_output() already does for us.
    Mark the return value as ignored.
    
    Reported by:    emaste, Coverity

commit 53247cdf12449e90f6736ae563e4cce8315c923f
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Mon Mar 20 14:29:55 2023 +0100

    pfsync: fix pfsync_undefer_state() locking
    
    pfsync_undefer_state() takes the bucket lock, but could get called from
    places (e.g. from pfsync_update_state() or pfsync_delete_state()) where
    we already held the lock.
    
    As it can also be called from places where we don't yet hold the lock
    create new locked variant for use when the lock is already held. Keep
    using pfsync_undefer_state() where the lock must still be taken.
    
    PR:             268246

commit 844ad2828a35c434b893af4274b1f6c50332dd70
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Mon Mar 20 14:26:33 2023 +0100

    pfsync: add missing unlock in pfsync_defer_tmo()
    
    The callout for pfsync_defer_tmo() is created with
    CALLOUT_RETURNUNLOCKED, because while the callout framework takes care
    of taking the lock we want to run a few operations outside of the lock,
    so we unlock ourselves.
    
    However, if `sc->sc_sync_if == NULL` we return without releasing the
    lock, and leak the lock, causing later deadlocks.
    Ensure we always release the bucket lock when we exit pfsync_defer_tmo()
    
    PR:             268246

commit 80e76c61ccc47651ca1be34b912d53536db34e6f
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Mon Mar 13 10:27:59 2023 +0100

    pf: set scope in pf_refragment6()
    
    Link-local traffic needs to have a scope embedded before it's passed on
    to ip6_output(). Do so in pf_refragment6(), because when we end up here
    in the output path we may have passed through ip6_output() already
    (before being reassembled), where the scope would have been removed.
    
    Re-embed the scope so that link-local traffic is sent correctly.
    
    Differential Revision:  https://reviews.freebsd.org/D39062

commit b52b61c0b6b1cb309461060f53cd5b7f5c3bb4ed
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Sun Mar 12 18:34:42 2023 +0100

    pf: distinguish forwarding and output cases for pf_refragment6()
    
    Re-introduce PFIL_FWD, because pf's pf_refragment6() needs to know if
    we're ip6_forward()-ing or ip6_output()-ing.
    
    ip6_forward() relies on m->m_pkthdr.rcvif, at least for link-local
    traffic (for in6_get_unicast_scopeid()). rcvif is not set for locally
    generated traffic (e.g. from icmp6_reflect()), so we need to call the
    correct output function.
    
    Differential Revisi:    https://reviews.freebsd.org/D39061

commit f52ca3dfd5520332e8cb8d08eda1b92aca2a159c
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Thu Feb 16 09:16:35 2023 +0100

    pfsync: ensure 'error' is always initialised
    
    Reported by:    Herbert J. Skuhra <herbert@gojira.at>

commit 9a1cab6d79b7286e5f650f57ed95625e6ddb8e4b
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Tue Feb 14 07:11:38 2023 +0100

    pfsync: support deferring IPv6 packets
    
    When we send out a deferred packet we must make sure to call
    ip6_output() for IPv6 packets. If not we might end up attempting to
    ip_fragment() an IPv6 packet, which could lead to us reading outside of
    the mbuf.
    
    PR:             268246
    Differential Revision:  https://reviews.freebsd.org/D38586

commit caf32b260ad46b17a4c1a8ce6383e37ac489f023
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Tue Feb 14 10:02:49 2023 -0800

    pfil: add pfil_mem_{in,out}() and retire pfil_run_hooks()
    
    The 0b70e3e78b0 changed the original design of a single entry point
    into pfil(9) chains providing separate functions for the filtering
    points that always provide mbufs and know the direction of a flow.
    The motivation was to reduce branching.  The logical continuation
    would be to do the same for the filtering points that always provide
    a memory pointer and retire the single entry point.
    
    o Hooks now provide two functions: one for mbufs and optional for
      memory pointers.
    o pfil_hook_args() has a new member and pfil_add_hook() has a
      requirement to zero out uninitialized data. Bump PFIL_VERSION.
    o As it was before, a hook function for a memory pointer may realloc
      into an mbuf.  Such mbuf would be returned via a pointer that must
      be provided in argument.
    o The only hook that supports memory pointers is ipfw:default-link.
      It is rewritten to provide two functions.
    o All remaining uses of pfil_run_hooks() are converted to
      pfil_mem_in().
    o Transparent union of pfil_packet_t and tricks to fix pointer
      alignment are retired. Internal pfil_realloc() reduces down to
      m_devget() and thus is retired, too.
    
    Differential revision:  https://reviews.freebsd.org/D37977

commit 0ed5f66c5ad23a6fe02d60765acf5e5e00957542
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Thu Feb 2 10:34:57 2023 +0100

    pfsync: add missing bucket lock
    
    pfsync_q_ins() expects us to hold the bucket lock, but when we enter it
    from pfsync_state_import() we don't.
    
commit 3d0d5b21c9b2cfd7e48209340a090f63ca4bce03
Author: Justin Hibbits <jhibbits@FreeBSD.org>
Date:   Mon Jan 23 10:05:29 2023 -0500

    IfAPI: Explicitly include <net/if_private.h> in netstack
    
    Summary:
    In preparation of making if_t completely opaque outside of the netstack,
    explicitly include the header.  <net/if_var.h> will stop including the
    header in the future.
    
    Differential Revision: https://reviews.freebsd.org/D38200

commit fd02192c3acaefeb62db11e0c10ab36240b79ba2
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Fri Jan 13 04:34:20 2023 +0100

    pf: fix panic on deferred packets
    
    The pfsync_defer_tmo() callout needs to set the correct vnet before it
    can transmit packets. It used the rcvif in the mbuf to get this vnet,
    but that doesn't work for locally originated traffic. In that case the
    rcvif pointer is NULL, and the dereference leads to a panic.
    
    Instead use the sc_sync_if, which is always set (if pfsync is enabled,
    at least).
    
    PR:             268246

commit 933be8d74b0471c8578a6ec965299383bc65138b
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Sat Dec 31 19:26:24 2022 +0100

    pf: default syncookies to adaptive mode
    
    The cost of enabling syncookies in adaptive mode is very low (basically
    a single atomic add when we create a new half-open state), and the
    payoff when under SYN flood is huge.
    
    So, enable adaptive mode by default.
    
    Suggested by:   Eirik Øverby

commit 9c041b450d5e604c3e35b5799b60a2c53795feef
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Sat Dec 31 15:59:10 2022 +0100

    pf: fix syncookies in conjunction with tcp fast port reuse
    
    Basic scenario: we have a closed connection (In TCPS_FIN_WAIT_2), and
    get a new connection (i.e. SYN) re-using the tuple.
    
    Without syncookies we look at the SYN, and completely unlink the old,
    closed state on the SYN.
    With syncookies we send a generated SYN|ACK back, and drop the SYN,
    never looking at the state table.
    
    So when the ACK (i.e. the third step in the three way handshake for
    connection setup) turns up, we’ve not actually removed the old state, so
    we find it, and don’t do the syncookie dance, or allow the new
    connection to get set up.
    
    Explicitly check for this in pf_test_state_tcp(). If we find a state in
    TCPS_FIN_WAIT_2 and the syncookie is valid we delete the existing state
    so we can set up the new state.
    Note that when we verify the syncookie in pf_test_state_tcp() we don't
    decrement the number of half-open connections to avoid an incorrect
    double decrement.
    
    Differential Revision:  https://reviews.freebsd.org/D37919

commit 57cc96f49e1fd49602f12f6b58bddb5112d4e0bc
Author: Mark Johnston <markj@FreeBSD.org>
Date:   Wed Dec 14 09:29:59 2022 -0500

    pf: Fix definitions of pf_pfil_*_hooked
    
    This use of "volatile" in the vnet definitions doesn't have any effect.
    VNET_DEFINE_STATE(volatile int, ...) should work, but let's avoid using
    "volatile" altogether and convert to atomic_load/atomic_store.  Also
    convert to bool while here.
    
    Differential Revision:  https://reviews.freebsd.org/D37684

commit bfeef0d32a0036bf6bec93a439e0466efe6f4482
Author: Nick Reilly <nreilly@blackberry.com>
Date:   Wed Nov 30 15:19:44 2022 +0100

    pf: fix pfi_ifnet leak on interface removal
    
    The detach of the interface and group were leaving pfi_ifnet memory
    behind. Check if the kif still has references, and clean it up if it
    doesn't
    
    On interface detach, the group deletion was notified first and then a
    change notification was sent. This would recreate the group in the kif
    layer. Reorder the change to before the delete.
    
    PR:             257218
    Differential Revision:  https://reviews.freebsd.org/D37569

commit e68b3792440cac248347afe08ba5881a00ba6523
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Wed Dec 7 09:00:48 2022 -0800

    tcp: embed inpcb into tcpcb
    
    For the TCP protocol inpcb storage specify allocation size that would
    provide space to most of the data a TCP connection needs, embedding
    into struct tcpcb several structures, that previously were allocated
    separately.
    
    The most import one is the inpcb itself.  With embedding we can provide
    strong guarantee that with a valid TCP inpcb the tcpcb is always valid
    and vice versa.  Also we reduce number of allocs/frees per connection.
    The embedded inpcb is placed in the beginning of the struct tcpcb,
    since in_pcballoc() requires that.  However, later we may want to move
    it around for cache line efficiency, and this can be done with a little
    effort.  The new intotcpcb() macro is ready for such move.
    
    The congestion algorithm data, the TCP timers and osd(9) data are
    also embedded into tcpcb, and temprorary struct tcpcb_mem goes away.
    There was no extra allocation here, but we went through extra pointer
    every time we accessed this data.
    
    One interesting side effect is that now TCP data is allocated from
    SMR-protected zone.  Potentially this allows the TCP stacks or other
    TCP related modules to utilize that for their own synchronization.
    
    Large part of the change was done with sed script:
    
    s/tp->ccv->/tp->t_ccv./g
    s/tp->ccv/\&tp->t_ccv/g
    s/tp->cc_algo/tp->t_cc/g
    s/tp->t_timers->tt_/tp->tt_/g
    s/CCV\(ccv, osd\)/\&CCV(ccv, t_osd)/g
    
    Dependency side effect is that code that needs to know struct tcpcb
    should also know struct inpcb, that added several <netinet/in_pcb.h>.
    
    Differential revision:  https://reviews.freebsd.org/D37127

commit 57e047e51c6daf72912332bc95263084f4f0430c
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Tue Nov 22 14:23:27 2022 +0100

    pf: allow scrub rules without fragment reassemble
    
    scrub rules have defaulted to handling fragments for a long time, but
    since we removed "fragment crop" and "fragment drop-ovl" in 64b3b4d611
    this has become less obvious and more expensive ("reassemble" being the
    more expensive option, even if it's the one the vast majority of users
    should be using).
    
    Extend the 'scrub' syntax to allow fragment reassembly to be disabled,
    while retaining the other scrub behaviour (e.g. TTL changes, random-id,
    ..) using 'scrub fragment no reassemble'.
    
    Differential Revision:  https://reviews.freebsd.org/D37459

commit 48767d8734ea21182eec04273127818e3878c2e5
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Tue Nov 15 12:11:32 2022 +0100

    pfsync: fix memory leak
    
    The recent refactoring to prepare for pfsync over IPv6 introduced a
    memory leak.
    If we don't have a sync peer configured we return early (without sending
    out a packet), but failed to free the newly allocated packet.
    
commit 813c5b75e68073a724fdc032b24a12baeab8f6d9
Author: Luiz Amaral <email@luiz.eng.br>
Date:   Wed Nov 9 12:40:43 2022 +0100

    pfsync: prepare code to accommodate AF_INET6 family
    
    Work is ongoing to add support for pfsync over IPv6. This required some
    changes to allow for differentiating between the two families in a more
    generic way.
    
    This patch converts the relevant ioctls to using nvlists, making future
    extensions (such as supporting IPv6 addresses) easier.
    
    Differential Revision:  https://reviews.freebsd.org/D36277

commit 8a8af94240084a091a1c048da027f80ee37937e7
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Thu Sep 22 19:00:11 2022 +0200

    pf: bridge-to
    
    Allow pf (l2) to be used to redirect ethernet packets to a different
    interface.
    
    The intended use case is to send 802.1x challenges out to a side
    interface, to enable AT&T links to function with pfSense as a gateway,
    rather than the AT&T provided hardware.
    
    Differential Revision:  https://reviews.freebsd.org/D37193

commit 444a77ca85c78d02c19622a83a2798d0c5c2117b
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Sat Sep 24 14:47:17 2022 +0200

    pf: expose syncookie active/inactive status
    
    When syncookies are in adaptive mode they may be active or inactive.
    Expose this status to users.
    
    Suggested by:   Guido van Rooij

commit 558ec54da33c6cbd321cceb8f035425c4c73a356
Author: Gordon Bergling <gbe@FreeBSD.org>
Date:   Tue Oct 25 04:32:59 2022 +0200

    netpfil: Fix two typos in source code comments
    
    - s/missmatch/mismatch/
    
commit b37707bb39302af837e8f2531f448b8216ab2bb3
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Sat Oct 15 10:01:46 2022 +0200

    pf: fix LINT-NOINET6 build

commit a974702e274cbed52ae9ad9ecef8501e267b822d
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Fri Oct 7 16:22:57 2022 +0200

    pf: apply the network stack's ICMP rate limiting to ICMP errors sent by pf
    
    PR:             266477
    Event:          Aberdeen Hackathon 2022
    Differential Revision:  https://reviews.freebsd.org/D36903

commit 133935d26f20c0b9c433da9a2b32bcbe562bc2c5
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Fri Oct 7 19:17:06 2022 +0200

    pf: atomically increment state ids
    
    Rather than using a per-cpu state counter, and adding in the CPU id we
    can atomically increment the number.
    This has the advantage of removing the assumption that the CPU ID fits
    in 8 bits.
    
    Event:          Aberdeen Hackathon 2022
    Differential Revision:  https://reviews.freebsd.org/D36915

commit 1d090028d3037adffac6fde004b2ad035921bb49
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Thu Sep 29 14:45:03 2022 +0200

    pf: use time_to for timestamps
    
    Use time_t rather than uint32_t to represent the timestamps. That means
    we have 64 bits rather than 32 on all platforms except i386, avoiding
    the Y2K38 issues on most platforms.
    
    Differential Revision:  https://reviews.freebsd.org/D36837

commit 0044bd90f2397dfad5f4bbd12c64be86e0b7eb4a
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Tue Sep 27 15:27:47 2022 +0200

    pf: fix memory leak retrieving Ethernet rules
    
    Remember to free the nvlist we've added to our main nvlist.
    
commit 91ebcbe02a48ebd40edb49283b90f38d246da15a
Author: Alexander V. Chernikov <melifaro@FreeBSD.org>
Date:   Thu Sep 22 12:30:09 2022 +0000

    if_clone: migrate some consumers to the new KPI.
    
    Convert most of the cloner customers who require custom params
     to the new if_clone KPI.
    
    Differential Revision:  https://reviews.freebsd.org/D36636

commit e5d08f472977fa6caa93805aa0dc8593c4e48cdf
Author: Mateusz Guzik <mjg@FreeBSD.org>
Date:   Fri Sep 9 17:16:58 2022 +0000

    pf: remove pf_bcmp_state_key
    
    Clang 14 performs the optimisation on its own, thus the custom code is
    no longer needed.
    
commit 6b94546a7ea2dc593f5765bd5465a8b7bb80c325
Author: Mateusz Guzik <mjg@FreeBSD.org>
Date:   Fri Sep 9 18:37:00 2022 +0200

    pf: partially depessimize pf_match_translation
    
commit 69ce6ae21acd71b8e46d1f22176063e9d243511a
Author: Mateusz Guzik <mjg@FreeBSD.org>
Date:   Tue Sep 6 16:56:29 2022 +0200

    pf: make pfsync_state_import appease an assert in pf_free_state
    
    The newly created state failed to be inserted anywhere. This follows
    other places.
    
commit 9503043f6e64a92d3c35cd8aa932727685378ad0
Author: Mateusz Guzik <mjg@FreeBSD.org>
Date:   Fri Sep 2 18:36:52 2022 +0200

    pf: stop using PFIL_FWD
    
    It is only there to check if the packet was reassembled,
    relevant if we are forwarding. But if the packet originated
    locally it could not have been reassembled, thus the flag is
    redundant.
    
commit 6ab80e7275091c900da8d2e84a7b0bb4c34a1e41
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Fri Aug 19 12:05:12 2022 +0200

    pf: do not block new Ethernet rules for in-progress transactions
    
    Make Ethernet rule addition behave just like L3 rules, in that we now
    allow ongoing transaction to be interrupted, rather than rejecting a new
    one.
    
    The result of that is that we can no longer end up in a state where a
    transaction failed, but was not rolled back, blocking us from setting
    new rules.
    
    It's safe to assume there's no pending epoch callback for cleanup here,
    because we've explicitly called it before hitting pf_begin_eth().
    
commit 485be9798a755cc051130b9a3e28d660ee93a497
Author: Luiz Amaral <email@luiz.eng.br>
Date:   Mon Aug 22 20:54:36 2022 +0200

    pfsync: replace struct pfsync_pkt with int flags
    
    Get rid of struct pfsync_pkt. It was used to store data on the stack to
    pass to all the submessage handlers, but only the flags part of it was
    ever used. Just pass the flags directly instead.
    
    Obtained from:          OpenBSD
    Differential Revision:  https://reviews.freebsd.org/D36294

commit 6b598e263bebaf6664b64f80f029a6ebcfc2848d
Author: Ed Maste <emaste@FreeBSD.org>
Date:   Fri Aug 19 17:02:26 2022 -0400

    pf: Reduce diffs against OpenBSD in pf_if.c
    
    Use memset instead of bzero, memcpy instead of bcopy, and add some
    optional {}s.
    
    Differential Revision: https://reviews.freebsd.org/D36267

commit c780d3ad7bcbf3cc181b50a4e09b8ab18b8bd3c6
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Fri Aug 19 12:01:58 2022 +0200

    pf: clear ethernet rules prior to shutdown
    
    Ethernet rule cleanup is postponed to an epoch callback. Ensure it's
    been called before we remove the entire vnet, or we risk the rules still
    getting hit after we've freed the uma zone, i.e. a use-after-free.
    
commit 78b1fc05b20504ed13aeeb4a5b47443246cabaeb
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Wed Aug 17 11:50:31 2022 -0700

    protosw: separate pr_input and pr_ctlinput out of protosw
    
    The protosw KPI historically has implemented two quite orthogonal
    things: protocols that implement a certain kind of socket, and
    protocols that are IPv4/IPv6 protocol.  These two things do not
    make one-to-one correspondence. The pr_input and pr_ctlinput methods
    were utilized only in IP protocols.  This strange duality required
    IP protocols that doesn't have a socket to declare protosw, e.g.
    carp(4).  On the other hand developers of socket protocols thought
    that they need to define pr_input/pr_ctlinput always, which lead to
    strange dead code, e.g. div_input() or sdp_ctlinput().
    
    With this change pr_input and pr_ctlinput as part of protosw disappear
    and IPv4/IPv6 get their private single level protocol switch table
    ip_protox[] and ip6_protox[] respectively, pointing at array of
    ipproto_input_t functions.  The pr_ctlinput that was used for
    control input coming from the network (ICMP, ICMPv6) is now represented
    by ip_ctlprotox[] and ip6_ctlprotox[].
    
    ipproto_register() becomes the only official way to register in the
    table.  Those protocols that were always static and unlikely anybody
    is interested in making them loadable, are now registered by ip_init(),
    ip6_init().  An IP protocol that considers itself unloadable shall
    register itself within its own private SYSINIT().
    
    Differential revision:  https://reviews.freebsd.org/D36157

commit 8c77967ecc58b5db35bb285013c55492987a9061
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Thu Aug 11 09:19:37 2022 -0700

    protosw: retire pr_output method
    
    The only place to execute this method was raw_usend(). Only those
    protocols that used raw socket were able to actually enter that method.
    All pr_output assignments being deleted by this commit were a dead code
    for many years.
    
    Differential revision:  https://reviews.freebsd.org/D36126

commit 150486f6a940947fa7a7c6db357c3f92d07a955f
Author: Zhenlei Huang <zlei.huang@gmail.com>
Date:   Fri Jul 29 15:02:39 2022 +0200

    Introduce and use the NET_EPOCH_DRAIN_CALLBACKS() macro
    
    Differential Revision:  https://reviews.freebsd.org/D35968

commit 766f3c8032a95f344823bea70bb7f794f9939d33
Author: Dimitry Andric <dim@FreeBSD.org>
Date:   Mon Jul 25 20:53:32 2022 +0200

    Adjust function definitions in if_pfsync.c to avoid clang 15 warnings
    
    With clang 15, the following -Werror warnings are produced:
    
        sys/netpfil/pf/if_pfsync.c:2439:21: error: a function declaration without a prototype is deprecated in all versions of C [-Werror,-Wstrict-prototypes]
        pfsync_pointers_init()
                            ^
                             void
        sys/netpfil/pf/if_pfsync.c:2453:23: error: a function declaration without a prototype is deprecated in all versions of C [-Werror,-Wstrict-prototypes]
        pfsync_pointers_uninit()
                              ^
                               void
        sys/netpfil/pf/if_pfsync.c:2503:12: error: a function declaration without a prototype is deprecated in all versions of C [-Werror,-Wstrict-prototypes]
        pfsync_init()
                   ^
                    void
        sys/netpfil/pf/if_pfsync.c:2524:14: error: a function declaration without a prototype is deprecated in all versions of C [-Werror,-Wstrict-prototypes]
        pfsync_uninit()
                     ^
                      void
    
    This is because pfsync_pointers_init(), pfsync_pointers_uninit(),
    pfsync_init(), and pfsync_uninit() are declared with (void) argument
    lists, but defined with empty argument lists. Make the definitions match
    the declarations.
    
commit fb48e998501f8d1defecffb772121a4141cdc2b6
Author: Dimitry Andric <dim@FreeBSD.org>
Date:   Mon Jul 25 20:15:51 2022 +0200

    Fix unused variable warning in if_pfsync.c
    
    With clang 15, the following -Werror warning is produced:
    
        sys/netpfil/pf/if_pfsync.c:2153:9: error: variable 'sent' set but not used [-Werror,-Wunused-but-set-variable]
                int i, sent = 0;
                       ^
    
    The 'sent' variable was used in the for loop later in the
    pfsync_bulk_update() function, but refactoring in 4fc65bcbe3fb7 got rid
    of it. Remove the variable since it no longer serves any purpose.
    
commit 503b5870c018ec342be1396896560b720945d7e5
Author: Dimitry Andric <dim@FreeBSD.org>
Date:   Mon Jul 25 19:59:59 2022 +0200

    Adjust function definitions in pf.c to avoid clang 15 warnings
    
    With clang 15, the following -Werror warnings are produced:
    
        sys/netpfil/pf/pf.c:985:19: error: a function declaration without a prototype is deprecated in all versions of C [-Werror,-Wstrict-prototypes]
        pf_mtag_initialize()
                          ^
                           void
        sys/netpfil/pf/pf.c:995:14: error: a function declaration without a prototype is deprecated in all versions of C [-Werror,-Wstrict-prototypes]
        pf_initialize()
                     ^
                      void
        sys/netpfil/pf/pf.c:1089:16: error: a function declaration without a prototype is deprecated in all versions of C [-Werror,-Wstrict-prototypes]
        pf_mtag_cleanup()
                       ^
                        void
        sys/netpfil/pf/pf.c:1096:11: error: a function declaration without a prototype is deprecated in all versions of C [-Werror,-Wstrict-prototypes]
        pf_cleanup()
                  ^
                   void
        sys/netpfil/pf/pf.c:1989:27: error: a function declaration without a prototype is deprecated in all versions of C [-Werror,-Wstrict-prototypes]
        pf_purge_expired_src_nodes()
                                  ^
                                   void
        sys/netpfil/pf/pf.c:2174:24: error: a function declaration without a prototype is deprecated in all versions of C [-Werror,-Wstrict-prototypes]
        pf_purge_unlinked_rules()
                               ^
                                void
    
    This is because pf_mtag_initialize(), pf_initialize(),
    pf_mtag_cleanup(), pf_cleanup(), pf_purge_expired_src_nodes(), and
    pf_purge_unlinked_rules() are declared with (void) argument lists, but
    defined with empty argument lists. Make the definitions match the
    declarations.
    
commit ba3b6b938db71a18a93cf88979af0e57136787bd
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Fri Jul 1 13:13:20 2022 +0200

    pf: handle dummynet for non-IP packets
    
    Do not panic if we try to dummynet an Ethernet packet that's not IPv4 or
    IPv6. Simply give it to dummynet.
    
commit 333670372ffe2f1c562e1088a7779eb709006ba2
Author: Mark Johnston <markj@FreeBSD.org>
Date:   Thu Jun 30 10:19:23 2022 -0400

    pf: Make sure that pfi_update_status() always zeros counters
    
    pfi_update_status() can return early if the status interface doesn't
    exist.  But in this case pf_getstatus() was copying uninitialized stack
    memory into the output nvlist.
    
    Reported by:    Jenkins (KMSAN job)
    Differential Revision:  https://reviews.freebsd.org/D35659

commit bc83b3592241a6bcb18e1537fcd27a8eb342a701
Author: Mark Johnston <markj@FreeBSD.org>
Date:   Thu Jun 30 10:18:50 2022 -0400

    pf: Ensure that pfiio_name is always nul terminated
    
    Reported by:    syzkaller
    Differential Revision:  https://reviews.freebsd.org/D35660

commit 8e1c23341c0c1b161f7fe9aa76ca2e399ada9f45
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Thu Jun 23 11:11:55 2022 +0200

    pf: reduce the risk of src/dst mis-use
    
    NULL out src/dst and check them rather than relying of 'af' to indicate
    these variables are valid.
    
    Differential Revision:  https://reviews.freebsd.org/D35573

commit fd72bfa626bcb9950eb2b057f224a7236e85e0af
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Fri Jun 24 09:41:00 2022 +0200

    pf: ensure mbufs are long enough before we copy out IP(v6) headers
    
    This isn't likely to be an issue on real hardware (as Ethernet has a
    minimal packet length of 64 bytes), but can cause panics with short
    packets on if_epair.
    
commit 6f16d78c0da68f1e72bc6fe4c44446dbcc47a001
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Tue Jun 28 09:43:23 2022 +0200

    pf: add missing maximum length check for DIOCADDETHRULE
    
commit 488626e55384e253326b92f7aab1cc62add2f7e7
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Wed Jun 22 16:52:24 2022 +0200

    pf: copy out rather than m_pullup() in pf_test_eth_rule()
    
    Don't change the mbuf chain layout. We've encountered alignment issues
    in the tcp syncookie code on armv7, which are triggered by the
    m_pullup() here.
    
    Differential Revision:  https://reviews.freebsd.org/D35551

commit 1f61367f8d61fd6963a47296a86f553c403b5f91
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Tue May 31 14:00:52 2022 +0200

    pf: support matching on tags for Ethernet rules
    
    Differential Revision:  https://reviews.freebsd.org/D35362

commit 81ef217ad428c29be669aac2166d194db31817a7
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Sat Jun 4 12:38:40 2022 +0200

    pf: Improve route-to handling of pfsync'd states
    
    When a state if pfsync’d to a different host it doesn’t get all of the
    expected pointers, including the pointer to the struct pfi_kif / struct
    ifnet rt_kif pointer. (I.e. the interface to route out on).
    
    That in turn means that pf_route() ends up dropping the packet.
    
    Use the rule's struct pfi_kif pointer so we can still route out of the
    expected interface.
    
commit a37e0e6de6527a7eaddea8e28f5e4b3427fba1a4
Author: Franco Fichtner <franco@opnsense.org>
Date:   Thu Jun 2 18:27:43 2022 +0200

    pf: fix more syncookie memory leaks
    
    Allocate memory for packed nvlists in M_NVLIST, as nvlist_pack() does
    this as well, and we use the same variable interchangable with the
    memory we allocate. When we free it we can end up freeing from the wrong
    zone, leaking memory.
    
    Differential Revision:  https://reviews.freebsd.org/D35385

commit 6c92016aa685486f1445f632ac3f1af1385186af
Author: Mateusz Guzik <mjg@FreeBSD.org>
Date:   Tue May 31 20:00:37 2022 +0000

    pf: fix a race against kif destruction in pf_test{,6}
    
    ifp kif was dereferenced prior to taking the lock and
    could have been nullified later.
    
    Differential Revision:

commit a3d9740825499c8a495261e09b7f9e49f6b4ac81
Author: Mateusz Guzik <mjg@FreeBSD.org>
Date:   Sat May 28 00:15:34 2022 +0200

    pf: make sure the rule tree is allocated in DIOCCHANGERULE
    
    Original patch by:      peter

commit bbec8e698b5bfbd568b840fc411b4fd125684045
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Wed May 18 17:49:28 2022 +0200

    pf: call dummynet directly from the ethernet code
    
    Until recently dummynet in ethernet rules did not send packets directly
    to dummynet but instead marked them and left the interactions with
    dummynet to the layer 3 pf code.
    This worked fine for incoming packets (where we process ethernet rules
    before layer 3 rules), but not for outbound packets (where the order of
    operations is the reverse).
    
    Dummynet does support handling layer 2 traffic, so send the packets
    directly to dummynet.
    
    The main limitation now is that pf does not inspect layer 4 (i.e.
    TCP/UDP) so we don't have protocol information or port numbers. Dummynet
    potentially uses this to separate traffic flows, which will not work for
    ethernet dummynet rules. However, pipes (i.e. adding latency or
    restricting bandwidth) will work exactly as expected.
    
    Differential Revision:  https://reviews.freebsd.org/D35257

commit 386b1a033c4d7345efd378b47cb637d4fb709020
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Tue May 17 14:41:25 2022 +0200

    pf: allocate krule->timestamp in pf_krule_alloc()
    
    There are three calls which can allocate a new rule. DIOCADDRULE,
    DIOCADDRULENV and DIOCCHANGERULE. The first two call pf_ioctl_addrule(),
    but DIOCCHANGERULE does not. As a result rules created through
    DIOCCHANGERULE do not have the timestamp per-cpu memory allocated, and
    we panic when the rule is exported with pf_krule_to_nvrule().
    
commit 009e8f0a109999a1978ac77b390f4ac5a6ae59a3
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Wed May 11 18:51:21 2022 +0200

    pf: fix pf_rule_to_actions()
    
    If we already had a pipe set in the actions struct we need to take care
    to clear the flag if we're overwriting it with a queue.
    
    This can happen if we've got Ethernet rules setting a dummynet pipe.
    It does this indirectly, by adding the dummynet information to a pf_mtag
    associated with the mbuf.
    
commit a908f8f0dc62ebf61b6f92c60c9c053be6ccb194
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Tue May 10 09:23:36 2022 +0200

    pf: tag dummynet'd route-to packets with their real destination
    
    If we delay route-to/dup-to/reply-to through dummynet we are eventually
    returned to pf_test(). At that point we no longer have the context for
    the route-to destination. We'd just skip the pf_test() and continue
    processing. This means that route-to did not work as expected.
    
    Extend pf_mtag to carry the route-to destination so we can apply it when
    we re-enter pf_test().
    
    Differential Revision:  https://reviews.freebsd.org/D35159

commit 37c452292132c062a4deb2b136facb9b6a675cf9
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Mon May 9 11:11:42 2022 +0200

    pf: also apply dummynet to route-to/dup-to packets
    
    If packets are processed by a route-to/dup-to/reply-to rule (i.e. they
    pass through pf_route(6)) dummynet was not applied to them.
    This is because pf_route(6) passes packets directly to ifp->if_output(),
    so the dummynet functions were never called.
    
    Factor out the dummynet code and call dummynet prior to
    ifp->if_output(). This has a secondary benefit of reducing some code
    duplication between the IPv4 and IPv6 paths.
    
    Differential Revision:  https://reviews.freebsd.org/D35158

commit 826c58d6656c62929af2d705a428921cfdfcb3ab
Author: Mateusz Guzik <mjg@FreeBSD.org>
Date:   Wed May 11 00:00:17 2022 +0000

    pf: add missing unlock on error in DIOCCHANGERULE
    
    Fixes:  ff80dd034a8ca732

commit ff80dd034a8ca73274b7861e1b3fc801c837a385
Author: Mateusz Guzik <mjg@FreeBSD.org>
Date:   Wed May 4 19:53:12 2022 +0000

    pf: fix DIOCCHANGERULE after pf config and rb tree of rules
    
commit 4d48dd68906230f8c41caee6a5c9d7b9f272bdb1
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Fri May 6 16:41:34 2022 +0200

    pf: don't reject dummynet-ed packets
    
    If we pass a packet to dummynet we should indicate we've passed it (but
    keep m0 == NULL). Otherwise we'll indicate to the calling layers that
    the packet has been rejected.
    
commit 9501fc936f3bc90d6159b4706f2728f6678848cd
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Fri May 6 16:37:47 2022 +0200

    pf: dummynet fix
    
    If we don't have a pipe set we shouldn't feed packets into dummynet.
    This could occur if we have a 'dnpipe (0, 100)' configuration, for
    example. We do want to feed the packet to dummynet in the return
    direction, but not in the forward direction. In that case
    pf_pdesc_to_dnflow() should return false, rather than pass a pipe number
    of 0 to dummynet.
    
commit c530c80ef22eee3778e649add4920e83cc4b1af7
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Fri May 6 14:37:07 2022 +0200

    pf: fix reverse direction dummynet
    
    Due to a typo dnrpipe (i.e. the pipe for reverse direction traffic) was
    nevern assigned, preventing it from working correctly.
    
commit 27407a6adc793bdfaef8a86ece32fb1b461429f0
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Thu May 5 09:21:32 2022 +0200

    pf: clear PF_TAG_DUMMYNET for dummynet fast path
    
    ip_dn_io_ptr() (i.e. dummynet_io()) can return the mbuf immediately (as
    opposed to owning it and later passing it through dummynet_send(), which
    returns it to pf_test()). In that case we must clear the PF_TAG_DUMMYNET
    flag to ensure we don't skip any subsequent firewall passes.
    
    This can happen if we process a packet in PFIL_IN, set PF_TAG_DUMMYNET
    on it, pass it to ip_dn_io_ptr() but have it returned immediately. The
    packet continues its normal path, eventually hitting
    pf_test(dir=PFIL_OUT), where we'd skip when we're not supposed to.
    
commit 0abcc1d2d33aef2333dab28e1ec1858cf45b314a
Author: Reid Linnemann <rlinnemann@netgate.com>
Date:   Fri Apr 22 13:54:51 2022 +0200

    pf: Add per-rule timestamps for rule and eth_rule
    
    Similar to ipfw rule timestamps, these timestamps internally are
    uint32_t snaps of the system time in seconds. The timestamp is CPU local
    and updated each time a rule or a state associated with a rule or state
    is matched.
    
    Differential Revision:  https://reviews.freebsd.org/D34970

commit efc64d02a62f3254ecc0b22fcbcb8f73a079669f
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Thu Apr 21 14:53:05 2022 +0200

    pf: counter argument to pfr_pool_get() may never be NULL
    
    Coverity points out that if counter was NULL when passed to
    pfr_pool_get() we could potentially end up dereferencing it.
    Happily all users of the function pass a non-NULL pointer. Enforce this
    by assertion and remove the pointless NULL check.
    
    Reported by:    Coverity (CID 273309)

commit 43020350635150eeb439c035f608ec9e78ddff8f
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Thu Apr 21 14:40:32 2022 +0200

    pfsync: NULL check before dereference
    
    Move the use of 'sc' to after the NULL check.
    It's very unlikely that we'd actually hit this, but Coverity is correct
    that it's not a good idea to dereference the pointer and only then NULL
    check it.
    
    Reported by:    Coverity (CID 1398362)

commit ed6287c14168de409c5f333bda59896c8109eb70
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Thu Apr 21 14:33:48 2022 +0200

    pf: remove pointless NULL check
    
    pfi_kkif_attach() always returns non-NULL, and we dereference the
    pointer before we check it, so that's pointless.
    
    Reported by:    Coverity (CID 1007345)

commit 812839e5aaaf495a85ac7dcb743b565c4792d74d
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Tue Apr 12 13:20:18 2022 +0200

    pf: allow the use of tables in ethernet rules
    
    Allow tables to be used for the l3 source/destination matching.
    This requires taking the PF_RULES read lock.
    
    Differential Revision:  https://reviews.freebsd.org/D34917

commit ba035a31128bd321cb9425bef9f5a9c3ff07859a
Author: John Baldwin <jhb@FreeBSD.org>
Date:   Wed Apr 13 16:08:20 2022 -0700

    pf: Use __diagused for variables only used in KASSERT().

commit 4496aecb56e667ab11bbbb92e164d3277205bae6
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Wed Apr 6 17:03:13 2022 +0200

    pf: drain Ethernet rules cleanup before starting a new transaction
    
    Inactive Ethernet rules get cleaned by a net_epoch callback. This
    callback may still be pending when we try to start a new (pf rules)
    transaction, causing it to fail.
    This is especially likely to occur in scripted scenarios, such as the
    regression tests.
    
    Drain the epoch callbacks before starting a new transaction, ensuring
    we've had the opportunity to clean up the inactive rules.
    
    Differential Revision:  https://reviews.freebsd.org/D34846

commit d557e89abb43c8fadf490a1a5919e9dd184eeaf9
Author: John Baldwin <jhb@FreeBSD.org>
Date:   Fri Apr 8 17:25:13 2022 -0700

    pf: Workaround set but unused warning.
    
    The RB_NEXT macro does not use its middle argument since commit
    5fce408cc44c737267aaaf0dcecd3454ba9089cd in 2004 (which ironically
    fixed an "unused parameter" warning by introducing this warning in all
    consumers).  RB_PREV has also copied this unfortunate behavior of an
    unused argument.
    
    This results in 'parent' not being used.  To workaround, inline the
    value of 'parent' as the second argument to RB_NEXT.
    
    Differential Revision:  https://reviews.freebsd.org/D34833

commit be461cdfb36e229040aafae07a2ba68f73091431
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Thu Apr 7 08:41:37 2022 +0200

    pf syncookies: fix memory leak
    
    We forgot to free the nvlist (and packed nvlist) on success.
    While here start using the ERROUT macro to clean up error handling, and
    to add SDTs for better debugging.
    
    Reported by:    Coverity
    CID:            1473150

commit 0bd468ea3fe4f695e0a355becc1b4f5f5296402c
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Thu Apr 7 08:35:12 2022 +0200

    pf: fix memory leak
    
    The nvlist is allocated in pf_keth_rule_to_nveth_rule(). There's no need
    to allocate one in the calling function. Especially not as we overwrite
    the pointer to the new nvlist with the one allocated by
    pf_keth_rule_to_nveth_rule(), leaking memory.
    
    Reported by:    Coverity
    CID:            1476128

commit bef7104571f35eeffc27b25d8857a7940dd23ab8
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Wed Apr 6 16:45:18 2022 +0200

    pf: use ERROUT_IOCTL()
    
    Use ERROUT_IOCTL() rather than hand-rolling the macro. This adds DTrace
    SDTs in the error path, making debugging ioctl errors easier.
    
commit 654c1b8ef3c0fcbad3a77ea2a6f35c0dffc86e88
Author: Luiz Amaral <email@luiz.eng.br>
Date:   Sat Apr 2 12:09:06 2022 +0200

    pfsync: Add CTLFLAG_VNET to carp_demotion_factor sysctl
    
    When trying to avoid a CARP demotion during a pfsync service restart, I
    noticed that a non-default value for the net.pfsync.carp_demotion_factor
    sysctl was not being applied during the demotion. The CARP was always
    demoted by 240.
    
    After investigating, I realized that the sysctl was using VNET_NAME()
    without the CTLFLAG_VNET.
    
    PR:             262983
    Differential Revision:  https://reviews.freebsd.org/D34737

commit c4a08ef2af6fe0b0d1b03f7ec4f20bed96de20e8
Author: Mateusz Guzik <mjg@FreeBSD.org>
Date:   Fri Apr 1 15:04:03 2022 +0000

    pf: handle duplicate rules gracefully
    
    Reported by:    dch
    PR:             262971

commit 7d1ab866911a2b29e041d64bc83a93638533f957
Author: Mark Johnston <markj@FreeBSD.org>
Date:   Wed Mar 30 15:41:44 2022 -0400

    pf: Initialize the table entry zone limit at initialization time
    
    The limit may later be updated by the "set limit" directive in pf.conf.
    UMA does not permit a limit to be set on a zone after any items have
    been allocated from a zone.
    
    Other UMA zones used by pf do not appear to be susceptible to this
    problem: they either set a limit at zone creation time or never set one
    at all.
    
    PR:             260406
    Differential Revision:  https://reviews.freebsd.org/D34713

commit d27c9f5bc38eda519145092c13bca2823a9998d8
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Tue Mar 29 14:28:37 2022 +0200

    pf: fixup match rules
    
    Ensure that we can set and print match rules in ethernet rules.
    
commit 81cac0d2f6035e02430fcdfa0ac8a081a9343f8d
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Tue Mar 29 14:17:12 2022 +0200

    pf: add missing input/error validation for DIOCGETETHRULE
    
commit 9bb06778f822ad6b47d2a825d47e284ca8dd29a1
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Tue Mar 29 14:15:10 2022 +0200

    pf: support listing ethernet anchors
    
commit e123e2294cb50deb288916b79a8c05a006f8bca3
Author: Mateusz Guzik <mjg@FreeBSD.org>
Date:   Tue Mar 29 13:17:54 2022 +0000

    pf: guard against DIOCADDRULE without DIOCXBEGIN
    
    Possibility to do it was always a bug, but it runs into crashes
    since recent introduction of a per-ruleset RB tree.
    
    Reported by:    syzbot+665b700afc6f69f1766a@syzkaller.appspotmail.com

commit bd7762c86986537a5b393537b85de31b1556735b
Author: Mateusz Guzik <mjg@FreeBSD.org>
Date:   Mon Feb 28 21:17:32 2022 +0100

    pf: add a rule rb tree
    
    with md5 sum used as key.
    
    This gets rid of the quadratic rule traversal when "keep_counters" is
    set.
    
commit 1a3e98a5b87670760af9a480884b46615dc138c2
Author: Mateusz Guzik <mjg@FreeBSD.org>
Date:   Fri Feb 25 18:50:56 2022 +0100

    pf: pre-compute rule hash
    
    Makes it cheaper to compare rules when "keep_counters" is set.
    This also sets up keeping them in a RB tree.
    
commit 93f8c38c0371139fbe444b645ef36ae0d92d400a
Author: Mateusz Guzik <mjg@FreeBSD.org>
Date:   Fri Feb 25 18:56:45 2022 +0100

    pf: add pf_config_lock
    
    For now only protects rule creation/destruction, but will allow
    gradually reducing the scope of rules lock when changing the
    rules.
    
commit 2f968abce5439d5a71b6b685416b219f0450fd5b
Author: Mateusz Guzik <mjg@FreeBSD.org>
Date:   Mon Mar 21 16:34:42 2022 +0000

    pf: include anchor path when hashing a rule
    
    Otherwise all anchors hash to the same value.
    
    Note this can result in checksum mismatches between pfsynced hosts,
    but it has to be sorted out as the previously computed checksum
    would fail to indicate changed anchors.
    
commit 3468cd95ca1249946bace931f2035e76b070711e
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Fri Mar 25 11:13:47 2022 +0100

    pf: ether l3 rules can only use addresses
    
    Disallow the use of tables in ethernet rules. Using tables requires
    taking the PF_RULES lock. Moreover, the current table code isn't ready
    to deal with ethernet rules.
    
    Disallow their use for now.
    
commit a693d17b9985a03bd9b5108e890d669005ab41eb
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Wed Mar 16 12:52:07 2022 -0700

    pf: fix !INET or !INET6 builds
    
    Fixes:  pfr_match_addr8a42005d1e4

commit 8a42005d1e491932666eb9f0be3e70ea1a28a3f7
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Tue Mar 8 09:48:11 2022 +0100

    pf: support basic L3 filtering in the Ethernet rules
    
    Allow filtering based on the source or destination IP/IPv6 address in
    the Ethernet layer rules.
    
    Differential Revision:  https://reviews.freebsd.org/D34482

commit b163dcab27862f90e0108a73185945456cafd2f3
Author: Mateusz Guzik <mjg@FreeBSD.org>
Date:   Mon Feb 28 11:39:02 2022 +0100

    pf: hoist the unlinked rules lock out of the mass rule removal loop
    
commit 15ada7514954150e6c07fd6a31ceb686ece76943
Author: Mateusz Guzik <mjg@FreeBSD.org>
Date:   Fri Feb 25 17:18:13 2022 +0100

    pf: remove spurious zeroing from pf_ioctl_addrule
    
    Newly allocated counters are guaranteed to be 0.
    
    This removes 5 IPIs for each loaded rule.
    
commit b590f17a11aacaeb0a70d075df04d40c6b7eb947
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Thu Jan 20 18:31:45 2022 +0100

    pf: support masking mac addresses
    
    When filtering Ethernet packets allow rules to specify a mac address
    with a mask. This indicates which bits of the specified address are
    significant. This allows users to do things like filter based on device
    manufacturer.
    
commit c5131afee39b4fa9e3889deb2ceea35a43ef35e2
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Fri Oct 1 19:05:50 2021 +0200

    pf: add anchor support for ether rules
    
    Support anchors in ether rules.
    
    Differential Revision:  https://reviews.freebsd.org/D32482

commit fb330f3931a2df0cebd2c8726f9d5362cceb0f2a
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Mon Sep 27 14:50:30 2021 +0200

    pf: support dummynet on L2 rules
    
    Allow packets to be tagged with dummynet information. Note that we do
    not apply dummynet shaping on the L2 traffic, but instead mark it for
    dummynet processing in the L3 code. This is the same approach as we take
    for ALTQ.
    
    Differential Revision:  https://reviews.freebsd.org/D32222

commit 30087aa2e00ac8ba7cc487ddc9fccfdd2cd330ea
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Wed Feb 17 17:24:05 2021 +0100

    pf: Support clearing ether counters
    
    Allow the evaluations/packets/bytes counters on Ethernet rules to be
    cleared.
    
    Differential Revision:  https://reviews.freebsd.org/D31748

commit 6b7c2680039b4e1b1d571bf4f443d99878a7fbc0
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Tue Feb 16 13:42:31 2021 +0100

    pf: Only hook the Ethernet pfil hook when we have rules
    
    Avoid the overhead of the Ethernet pfil hooks if we don't have any
    Ethernet rules.
    
    Differential Revision:  https://reviews.freebsd.org/D31742

commit 5c75dfdf6056f68d8d750b52b385018b5be31e13
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Tue Feb 16 10:08:26 2021 +0100

    pf: SDTs for ether rule matching
    
    Add static DTrace probe points to allow debugging of ether rule
    matching.
    
    Differential Revision:  https://reviews.freebsd.org/D31741

commit 20c4899a8eea4417b1717c06a47bfc0494d64085
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Wed Feb 10 13:28:14 2021 +0100

    pf: Do not hold PF_RULES_RLOCK while processing Ethernet rules
    
    Avoid the overhead of acquiring a (read) RULES lock when processing the
    Ethernet rules.
    We can get away with that because when rules are modified they're staged
    in V_pf_keth_inactive. We take care to ensure the swap to V_pf_keth is
    atomic, so that pf_test_eth_rule() always sees either the old rules, or
    the new ruleset.
    
    We need to take care not to delete the old ruleset until we're sure no
    pf_test_eth_rule() is still running with those. We accomplish that by
    using NET_EPOCH_CALL() to actually free the old rules.
    
    Differential Revision:  https://reviews.freebsd.org/D31739

commit e732e742b37f66746b7556b990c54869845b72fc
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Wed Feb 3 11:16:10 2021 +0100

    pf: Initial Ethernet level filtering code
    
    This is the kernel side of stateless Ethernel level filtering for pf.
    
    The primary use case for this is to enable captive portal functionality
    to allow/deny access by MAC address, rather than per IP address.
    
    Differential Revision:  https://reviews.freebsd.org/D31737

commit 0143a6bb7f634c5984b34db1834313bdb47e6ccd
Author: Franco Fichtner <franco@opnsense.org>
Date:   Mon Feb 14 20:26:39 2022 +0100

    pf: fix set_prio after nv conversion
    
    Differential Revision:  https://reviews.freebsd.org/D34266

commit b21826bf15f7ec1e206fa3cfdf40691f84fb1d8e
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Tue Feb 1 18:25:57 2022 +0100

    pf: deal with tables gaining or losing counters
    
    When we create a table without counters, add an entry  and later
    re-define the table to have counters we wound up trying to read
    non-existent counters.
    
    We now cope with this by attempting to add them if needed, removing them
    when they're no longer needed and not trying to read from counters that
    are not present.
    
    Differential Revision:  https://reviews.freebsd.org/D34131

commit 773e3a71b2f11d422694495aca988d4c7143601b
Author: Mark Johnston <markj@FreeBSD.org>
Date:   Mon Jan 31 16:14:00 2022 -0500

    pf: Initialize pf_kpool mutexes earlier
    
    There are some error paths in ioctl handlers that will call
    pf_krule_free() before the rule's rpool.mtx field is initialized,
    causing a panic with INVARIANTS enabled.
    
    Fix the problem by introducing pf_krule_alloc() and initializing the
    mutex there.  This does mean that the rule->krule and pool->kpool
    conversion functions need to stop zeroing the input structure, but I
    don't see a nicer way to handle this except perhaps by guarding the
    mtx_destroy() with a mtx_initialized() check.
    
    Constify some related functions while here and add a regression test
    based on a syzkaller reproducer.
    
    Reported by:    syzbot+77cd12872691d219c158@syzkaller.appspotmail.com
    Differential Revision:  https://reviews.freebsd.org/D34115

commit e5ca5e801d3c806a767c427360c48e935a5facd4
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Sun Jan 16 08:52:18 2022 +0100

    pf: ensure we don't destroy an uninitialised lock
    
    The new lock introduced in 5f5e32f1b3 needs to be initialised early so
    that it can be safely destroyed if we error out.
    
    Reported-by: syzbot+d76113e9a4ae0c0fcac2@syzkaller.appspotmail.com

commit 5f5e32f1b3945087a687c5962071d3f46e34e1ff
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Mon Jan 10 17:49:26 2022 +0100

    pf: protect the rpool from races
    
    The roundrobin pool stores its state in the rule, which could
    potentially lead to invalid addresses being returned.
    
    For example, thread A just executed PF_AINC(&rpool->counter) and
    immediately afterwards thread B executes PF_ACPY(naddr, &rpool->counter)
    (i.e. after the pf_match_addr() check of rpool->counter).
    
    Lock the rpool with its own mutex to prevent these races. The
    performance impact of this is expected to be low, as each rule has its
    own lock, and the lock is also only relevant when state is being created
    (so only for the initial packets of a connection, not for all traffic).
    
    See also:       https://redmine.pfsense.org/issues/12660
    Differential Revision:  https://reviews.freebsd.org/D33874

commit 751d4c7b8728d82cb4dd51b851e4dc5d6b4092c8
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Mon Jan 10 18:43:35 2022 +0100

    pf: postpone clearing of struct pf_pdesc
    
    Postpone zeroing out pd until after the PFI_IFLAG_SKIP/M_SKIP_FIREWALL
    checks. We don't need it until then, and it saves us a few CPU cycles in
    some cases.
    This isn't expected to make a measurable performance change though.
    
    Pointed out by: markj
    Differential Revision:  https://reviews.freebsd.org/D33815

commit ecc393594dbe8ca9f19d3dc9767dc2323587a173
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Mon Jan 10 18:40:55 2022 +0100

    pf: remove PF_TAG_GENERATED
    
    It's never set, so we can remove both the check for it and the
    definition.
    
    Pointed out by: markj
    Differential Revision:  https://reviews.freebsd.org/D33814

commit 73fd0eaf5930c5b8844ca122dd3068145ccef02c
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Thu Dec 2 18:39:23 2021 +0100

    pfsync: fix incorrect enabling of defer mode
    
    When we exposed the PFSYNCF_OK flag to userspace in 5f5bf88949d we
    unintentionally caused defer mode to always be enabled.
    The ioctl check only looked for nonzero, not for the PFSYNCF_DEFER flag.
    
    Fix this check and ensure ifconfig sets the flag.
    
    Differential Revision:  https://reviews.freebsd.org/D33244

commit 41c4f1987243cefe81adcc31d5401e7a80a0428c
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Thu Dec 2 17:42:56 2021 +0100

    pfsync: locking fixes
    
     * Ensure we unlock the pfsync lock in pfsync_defer()
     * We must hold the bucket lock when calling pfsync_push()
     * The pfsync_defer_tmo() callout locks the bucket lock, not the pfsync
       lock
    
    Differential Revision:  https://reviews.freebsd.org/D33243

commit 93a3fa41dcff274180133712a13392d17a3e75a1
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Thu Dec 2 17:30:36 2021 +0100

    pfsync: fix defer timeout
    
    Don't use a fixed number of ticks, but take hz into account so we have a
    consistent timeout, regardless of what hz is set up.
    Use a 20ms timeout, becaues that's what OpenBSD uses.
    
    Differential Revision:  https://reviews.freebsd.org/D33242

commit 7b02a551f78ed5c4bd55d3b33da55524cd2317a6
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Thu Dec 2 14:36:12 2021 +0100

    pfsync: check IFF_DRV_RUNNING in the correct field
    
    This flag is stored in if_drv_flags, not if_flags.
    
    Differential Revision:  https://reviews.freebsd.org/D33241

commit 27bd812c5c92af9e7acdbf100bd98166a717bb76
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Thu Dec 2 14:32:21 2021 +0100

    pfsync: NULL check sc before using it
    
    In pfsync_defer() we must wait to lock sc until we've ensured it's not
    NULL.
    
    Differential Revision:  https://reviews.freebsd.org/D33240

commit 6d4baa0d011cb3e78b4b08415568e71c0aab00fe
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Thu Dec 2 08:22:34 2021 +0100

    if_pflog: fix packet length
    
    There were two issues with the new pflog packet length.
    The first is that the length is expected to be a multiple of
    sizeof(long), but we'd assumed it had to be a multiple of
    sizeof(uint32_t).
    
    The second is that there's some broken software out there (such as
    Wireshark) that makes incorrect assumptions about the amount of padding.
    That is, Wireshark assumes there's always three bytes of padding, rather
    than however much is needed to get to a multiple of sizeof(long).
    
    Fix this by adding extra padding, and a fake field to maintain
    Wireshark's assumption.
    
    Reported by:    Ozkan KIRIK <ozkan.kirik@gmail.com>
    Tested by:      Ozkan KIRIK <ozkan.kirik@gmail.com>
    Differential Revision:  https://reviews.freebsd.org/D33236

commit b6c8c7b99a750de18509715890615ad3f948b29a
Author: Mateusz Guzik <mjg@FreeBSD.org>
Date:   Wed Nov 24 18:25:18 2021 +0100

    pf: add pf_bcmp_state_key
    
    Differential Revision: https://reviews.freebsd.org/D33131

commit 44775b163bfa902ea96658343e852062e2e67a8e
Author: Mark Johnston <markj@FreeBSD.org>
Date:   Wed Nov 24 13:20:09 2021 -0500

    netinet: Remove unneeded mb_unmapped_to_ext() calls
    
    in_cksum_skip() now handles unmapped mbufs on platforms where they're
    permitted.
    
    Differential Revision:  https://reviews.freebsd.org/D33097

commit 90c55481b2731224f9e3a013bb7957dfa3251ea8
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Mon Nov 22 21:47:18 2021 +0100

    pf: fix netpfil.common.dummynet:pf_nat test
    
    This test failed if ipfw was loaded (as well as pf). pf used the same
    tag as dummynet to indicate a packet had already gone through dummynet.
    However, ipfw removes this tag, so pf didn't realise the packet had
    already gone through dummynet.
    
    Introduce a separate flag, in the existing pf mtag rather than re-using
    the ipfw tag. There were no free flag bits, but PF_TAG_FRAGCACHE is no
    longer used so its bit can be re-purposed.
    
    Differential Revision:  https://reviews.freebsd.org/D33087

commit 18d04cd2d42c16209c8f615bb9735dded328915b
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Mon Nov 22 21:28:10 2021 +0100

    pf: align IPv6 dummynet handling with IPv4
    
    In e5c4987e3f we fixed issues with nat and dummynet, but only changed
    the IPv4 code. Make the same change for IPv6 as well.
    
    Differential Revision:  https://reviews.freebsd.org/D33086

commit c36f90417b734e56ef938cc2d19601001c709f40
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Mon Nov 22 20:30:22 2021 +0100

    pf: remove unused variables
    
    No functional change intended.
    
    Differential Revision:  https://reviews.freebsd.org/D33085

commit 8e492101ec04d939f4a657d812785c01c8e4986d
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Mon Nov 15 21:14:00 2021 +0100

    pf: add COMPAT_FREEBSD13 for DIOCKEEPCOUNTERS
    
    DIOCKEEPCOUNTERS used to overlap with DIOCGIFSPEEDV0, which has been
    fixed in 14, but remains in stable/12 and stable/13.
    Support the old, overlapping, call under COMPAT_FREEBSD13.
    
    Differential Revision:  https://reviews.freebsd.org/D33001

commit 756bb50b6a867f3309ce76d76f1842a667dd303a
Author: Mark Johnston <markj@FreeBSD.org>
Date:   Tue Nov 16 13:38:09 2021 -0500

    sctp: Remove now-unneeded mb_unmapped_to_ext() calls
    
    sctp_delayed_checksum() now handles unmapped mbufs, thanks to m_apply().
    
    No functional change intended.
    
    Differential Revision:  https://reviews.freebsd.org/D32942

commit 218a8a491c4980dcc941908f9505d37e7f052868
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Mon Nov 8 13:25:20 2021 +0100

    pf: ensure we populate dyncnt/tblcnt in struct pf_addr_wrap
    
    PR:             259689
    Differential Revision:  https://reviews.freebsd.org/D32892

commit 76c5eecc3490d89a9a3492ed2354802b69d69602
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Fri Oct 29 17:40:53 2021 +0200

    pf: Introduce ridentifier
    
    Allow users to set a number on rules which will be exposed as part of
    the pflog header.
    The intent behind this is to allow users to correlate rules across
    updates (remember that pf rules continue to exist and match existing
    states, even if they're removed from the active ruleset) and pflog.
    
    Obtained from:  pfSense
    Differential Revision:  https://reviews.freebsd.org/D32750

commit 8f3d786cb301c49dec189bad80cdc163dd3ca1d7
Author: Mateusz Guzik <mjg@FreeBSD.org>
Date:   Mon Nov 1 14:14:02 2021 +0100

    pf: remove the flags argument from pf_unlink_state
    
    All consumers call it with PF_ENTER_LOCKED.
    
commit edf6dd82e9662b72c17483de4de5575dd5acd972
Author: Mateusz Guzik <mjg@FreeBSD.org>
Date:   Mon Nov 1 14:02:43 2021 +0100

    pf: fix use-after-free from pf_find_state_all
    
    state was returned without any locks nor references held
    
commit e5c4987e3fc1997264f4c3a10d3047a9379b9b15
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Tue Oct 26 09:59:42 2021 +0200

    pf: fix dummynet + NAT
    
    Dummynet differs from ALTQ in that ALTQ schedules packets after they
    leave pf. Dummynet schedules them after they leave pf, but then
    re-injects them.
    We currently deal with this by ensuring we don't re-schedule a packet we
    get from dummynet, but this produces unexpected results when combined
    with NAT, as dummynet processing is done after the NAT transformation.
    In other words, the second time the packet is handed to pf it may have a
    different source and destination address.
    
    Simplify this by moving dummynet processing to after all other pf
    processing, and not re-processing (but always passing) packets from
    dummynet.
    
    This fixes NAT of dummynet delayed packets, and also reduces processing
    overhead (because we only do state/rule lookup for each dummynet packet
    once, rather than twice).
    
    Differential Revision:  https://reviews.freebsd.org/D32665

commit c8ee75f2315e8267ad814dc5b4645ef205f0e0e1
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Sun Oct 10 10:02:26 2021 -0700

    Use network epoch to protect local IPv4 addresses hash.
    
    The modification to the hash are already naturally locked by
    in_control_sx.  Convert the hash lists to CK lists. Remove the
    in_ifaddr_rmlock. Assert the network epoch where necessary.
    
    Most cases when the hash lookup is done the epoch is already entered.
    Cover a few cases, that need entering the epoch, which mostly is
    initial configuration of tunnel interfaces and multicast addresses.
    
    Differential revision:  https://reviews.freebsd.org/D32584

commit ab238f14544b2415561c4fed674ee360aa8b5860
Author: Luiz Otavio O Souza <loos@FreeBSD.org>
Date:   Tue Oct 19 13:37:54 2021 +0200

    pf: ensure we have the correct source/destination IP address in ICMP errors
    
    When we route-to a packet that later turns out to not fit in the
    outbound interface MTU we generate an ICMP error.
    However, if we've already changed those (i.e. we've passed through a NAT
    rule) we have to undo the transformation first.
    
    Obtained from:  pfSense
    Differential Revision:  https://reviews.freebsd.org/D32571

commit bcd4c17ccaacf995224882dc1d05e2a51867bdf2
Author: Mateusz Guzik <mjg@FreeBSD.org>
Date:   Tue Oct 19 11:57:47 2021 +0000

    pf: fix some cc --analyze warnings
    
commit 076b3a50fd71d84f47bca71758e7fff3c02582e9
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Sat Oct 16 18:53:39 2021 +0200

    pf: don't drop packets when redirection information comes from a state
    
    For some traffic there might be no matching rule in the current ruleset,
    for example when a state was imported via pfsync from a sytem with a
    different ruleset checksum. In this case pf_route uses s->rt_addr for
    routing target instead of r->rpool.cur but r->rpool is checked anyway,
    resulting in dropped packets.
    
    PR:             259183
    Submitted by:   Kajetan Staszkiewicz <vegeta tuxpowered.net>

commit 498cca14836da0408841cca8101e481e32151886
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Sat Oct 16 09:32:15 2021 +0200

    pf: selecting pf_map_addr is not an error
    
    When a redirection/nat IP address is selected by pf_map_addr it is
    logged with PF_DEBUG_MISC level. This one according to the manual means
    "Generate debug messages for various errors". Selecting an IP address is
    not an error, it's a normal function of pf for route-to, nat and some
    other operations. Therefore PF_DEBUG_NOISY level should be choosen which
    is means "Generate debug messages for common conditions".
    
    PR:             259184
    Submitted by:   Kajetan Staszkiewicz <vegeta tuxpowered.net>

commit 776df104fa54bb581e1fb88ac44af4fa7fd4052b
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Wed Oct 13 11:00:46 2021 +0200

    pf: Introduce pf_nvbool()
    
    Similar to the existing functions for strings and ints, this lets us
    simplify some of the nvlist conversion code.
    
commit 1c680e620bf7e53d043d10b23bdfc980e45e6455
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Fri Oct 8 15:13:21 2021 +0200

    pf: do not copy anchor_wildcard / anchor_relative from userspace
    
    We overwrite these fields again in pf_kanchor_setup() anyway.
    
commit 955460d41e99031906841870e02063ffdf227f09
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Sat Jul 24 14:23:59 2021 +0200

    pf: hook up adaptive mode configuration
    
    The kernel side of pf syncookie adaptive mode configuration.
    
    Differential Revision:  https://reviews.freebsd.org/D32135

commit bf8637181a2bb81206ff8c685f1632d07b8feb13
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Sat Jul 24 13:59:34 2021 +0200

    pf: implement adaptive mode
    
    Use atomic counters to ensure that we correctly track the number of half
    open states and syncookie responses in-flight.
    This determines if we activate or deactivate syncookies in adaptive
    mode.
    
    Differential Revision:  https://reviews.freebsd.org/D32134

commit 63b3c1c77036814c85d36fe7a48c704db7c6fc9c
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Sat May 15 13:49:22 2021 +0200

    pf: support dummynet
    
    Allow pf to use dummynet pipes and queues.
    
    We re-use the currently unused IPFW_IS_DUMMYNET flag to allow dummynet
    to tell us that a packet is being re-injected after being delayed. This
    is needed to avoid endlessly looping the packet between pf and dummynet.
    
    Differential Revision:  https://reviews.freebsd.org/D31904

commit cb13059663e455b3fc69c293dadec53c164490dc
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Thu Sep 23 10:39:49 2021 +0200

    pf: fix pagefault in pf_getstatus()
    
    We can't copyout() while holding a lock, in case it triggers a page
    fault.
    Release the lock before copyout, which is safe because we've already
    copied all the data into the nvlist.
    
    PR:             258601
    Differential Revision:  https://reviews.freebsd.org/D32076

commit 8e496ea1df1f00ea7832eb41754dbbb56dd244c8
Author: Franco Fichtner <franco@opnsense.org>
Date:   Sat Sep 18 13:42:43 2021 +0200

    pf: always log nat rule and do it pre-rewrite
    
    See also https://github.com/opnsense/core/issues/5005
    
    Differential Revision:  https://reviews.freebsd.org/D31504

commit df005aa9b3d8d5bf78bff749b261e9ae5bea80a3
Author: John Baldwin <jhb@FreeBSD.org>
Date:   Wed Sep 15 09:03:18 2021 -0700

    pf: Remove duplicate declaration of pf_ioctl_maxcount.
    
    Fixes a -Wredundant-decls warning with GCC 9.
    
    Differential Revision:  https://reviews.freebsd.org/D31944

commit 9bdff593ead9434e01cfb6084f21c3e93a22963d
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Fri Sep 10 17:20:39 2021 +0200

    pf: fix NOINET6 builds
    
commit b64f7ce98f5286721a38b31fa2180313f800fb1d
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Tue Sep 7 14:41:37 2021 +0200

    pf: qid and pqid can be uint16_t
    
    tag2name() returns a uint16_t, so we don't need to use uint32_t for the
    qid (or pqid). This reduces the size of struct pf_kstate slightly. That
    in turn buys us space to add extra fields for dummynet later.
    
    Happily these fields are not exposed to user space (there are user space
    versions of them, but they can just stay uint32_t), so there's no ABI
    breakage in modifying this.
    
    Differential Revision:  https://reviews.freebsd.org/D31873

commit 0a51d74c3ab8e7ee8771cc3ee78ffba831c953ef
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Wed Sep 1 09:54:55 2021 +0200

    pf: fix synproxy to local
    
    When we're synproxy-ing a connection that's going to us (as opposed to a
    forwarded one) we wound up trying to send out the pf-generated tcp
    packets through pf_intr(), which called ip(6)_output(). That doesn't
    work all that well for packets that are destined for us, so in that case
    we must call ip(6)_input() instead.
    
    Differential Revision:  https://reviews.freebsd.org/D31853

commit a0c64a443e4cae67a5eea3a61a47d746866de3ee
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Fri Sep 3 09:36:19 2021 +0200

    pf: ensure states passed to pf_free_state() are always unlinked
    
    In pf_create_state() we can end up deleting the state immediately. This
    can happen if we fail to map the relevant addresses or fail
    normalization or fail to insert it into the state table.
    If that happens we delete the state again with pf_free_state(). However,
    this asserts that the state must be unlinked.
    
    It's correct to simply set the state to PFTM_UNLINKED because we've not
    yet linked it.
    
    Submitted by:   Mateusz Guzik <mjg@FreeBSD.org>
    Differential Revision:  https://reviews.freebsd.org/D31752

commit ce3ea45047c7321bcfcf0cd31272f0e4359640f2
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Tue Jul 20 18:38:16 2021 +0200

    pf: import pf_set_protostate() from OpenBSD
    
    to change a state's state (that term is overloaded in pf, protocol state
    like ESTABLISHED for tcp here), don't do it directly, but go through a newly
    introduced pf_set_protostate()
    
    Obtainted from: OpenBSD
    Differential Revision:  https://reviews.freebsd.org/D31729

commit 4cab80a8dfecdf16333a1113513e046b9f4dd7f6
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Sun Aug 29 15:54:50 2021 +0200

    pf: Add counters for syncookies
    
    Count when we send a syncookie, receive a valid syncookie or detect a
    synflood.
    
    Differential Revision:  https://reviews.freebsd.org/D31713

commit 2b10cf85f8684f822511d7b9377e256ab623abbc
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Mon Aug 16 21:55:27 2021 +0200

    pf: Introduce nvlist variant of DIOCGETSTATUS
    
    Make it possible to extend the GETSTATUS call (e.g. when we want to add
    new counters, such as for syncookie support) by introducing an
    nvlist-based alternative.
    
    Differential Revision:  https://reviews.freebsd.org/D31694

commit 0a7d1fc6f6324e62458e72546cc06ac8c76c494b
Author: Samuel Robinette <samrobinette95@gmail.com>
Date:   Sun Aug 15 20:26:41 2021 +0200

    pf: implement set-tos for IPv6
    
    Extend the existing set-tos keyword to also be able to set traffic class
    on IPv6 traffic.
    Add tests for this as well.
    
    Differential Revision:  https://reviews.freebsd.org/D31564

commit 3e875f952af05697807139b460e5124eb5f6137b
Author: Mateusz Guzik <mjg@FreeBSD.org>
Date:   Tue Aug 17 20:16:09 2021 +0200

    pf: assert dir state on pf_test{,6}
    
    The intent is to line up various enums so that branching in the lines of:
    
    idx = (dir == PF_IN ? PF_SK_WIRE : PF_SK_STACK);
    
    is avoided.

commit 5091ca26507b83ebd5ce677dd26bd10e4bad4153
Author: Mateusz Guzik <mjg@FreeBSD.org>
Date:   Tue Aug 17 20:04:31 2021 +0200

    pf: save on branching in the common case in pf_test
    
commit 600745f1e2260e7ed3c2e6183b24388ff38c916c
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Mon Aug 2 09:46:33 2021 +0200

    pf: bound DIOCGETSTATES memory use
    
    Similar to what we did earlier for DIOCGETSTATESV2 we only allocate
    enough memory for a handful of states and copy those out, bit by bit,
    rather than allocating memory for all states in one go.
    
commit b69019c14cd89a5e699bc6e69941aec5b1041b1e
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Tue Jul 6 13:13:24 2021 +0200

    pf: remove DIOCGETSTATESNV
    
    While nvlists are very useful in maximising flexibility for future
    extensions their performance is simply unacceptably bad for the
    getstates feature, where we can easily want to export a million states
    or more.
    
    The DIOCGETSTATESNV call has been MFCd, but has not hit a release on any
    branch, so we can still remove it everywhere.
    
    Differential Revision:  https://reviews.freebsd.org/D31099

commit 64432ad2a2c4b10d3d3411a8ca018e2a35cec97e
Author: Mark Johnston <markj@FreeBSD.org>
Date:   Wed Jul 28 10:16:42 2021 -0400

    pf: Validate user string nul-termination before copying
    
    Some pf ioctl handlers use strlcpy() to copy strings when converting
    from user structures to their in-kernel representations.  strlcpy()
    ensures that the destination will be nul-terminated, but it assumes that
    the source is nul-terminated.  In particular, it returns the full length
    of the source string, so if the source is not nul-terminated, strlcpy()
    will keep scanning until it finds a nul byte, and it may encounter an
    unmapped page first.  Add a helper to validate user strings before
    copying.
    
    There are also places where we look up a ruleset using a user-provided
    anchor string.  In some ioctl handlers we were already nul-terminating
    the string, avoiding the same problem, but in other places we were not.
    Fix those by nul-terminating as well.  Aside from being consistent,
    anchors have a maximum length of MAXPATHLEN - 1 so calling strnlen()
    might not be so desirable.
    
    Reported by:    syzbot+35a1549b4663e9483dd1@syzkaller.appspotmail.com
    Differential Revision:  https://reviews.freebsd.org/D31169

commit 2b82c57e399700f5134c47d86d45ef2f2bd465e2
Author: Mark Johnston <markj@FreeBSD.org>
Date:   Wed Jul 28 10:16:25 2021 -0400

    pf: Initialize arrays before copying out to userland
    
    A number of pf ioctls populate an array of structures and copy it out.
    They have the following structures:
    - caller specifies the size of its output buffer
    - ioctl handler allocates a kernel buffer of the same size
    - ioctl handler populates the buffer, possibly leaving some items
      initialized if the caller provided more space than needed
    - ioctl handler copies the entire buffer out to userland
    
    Thus, if more space was provided than is required, we end up copying out
    uninitialized kernel memory.  Simply zero the buffer at allocation time
    to prevent this.
    
    Reported by:    KMSAN
    Differential Revision:  https://reviews.freebsd.org/D31313

commit da8d8b22e69c72f1d001d55b5eff5acbb0265cfc
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Wed Jul 28 11:24:44 2021 +0200

    pf: fix ABI breakage
    
    The introduction of synproxy support changed the size of struct
    pf_status, which in turn broke the userspace ABI.
    
    Revert the relevant change. More work is needed on the synproxy code to
    keep and expose the counters, but in the mean time this restores the
    ABI.
    
    PR:             257469

commit 9ef8cd0b7906371803421aa897056b6fc0710fcb
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Thu Jul 22 10:35:08 2021 +0200

    vlan: deduplicate bpf_setpcp() and pf_ieee8021q_setpcp()
    
    These two fuctions were identical, so move them into the common
    vlan_set_pcp() function, exposed in the if_vlan_var.h header.
    
    Differential Revision:  https://reviews.freebsd.org/D31275

commit d2dc4548eb20771769ce996cb0da35d8b7dca784
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Mon Jul 26 07:56:04 2021 +0200

    pf: remove duplicate ERROUT_FUNCTION definition
    
commit 87c010e6e364e96e2c1546b3c2bbcbef1dcd422f
Author: Mateusz Guzik <mjg@FreeBSD.org>
Date:   Sat Jul 24 09:47:40 2021 +0200

    pf: batch critical section for several counters
    
commit 02cf67ccf6538b14677672640e405f7f94044dc3
Author: Mateusz Guzik <mjg@FreeBSD.org>
Date:   Thu Jul 22 16:45:14 2021 +0200

    pf: switch rule counters to pf_counter_u64
    
commit d40d4b3ed788b05697541b9ae94b1960ff2cf6f6
Author: Mateusz Guzik <mjg@FreeBSD.org>
Date:   Fri Jul 23 12:29:46 2021 +0200

    pf: switch kif counters to pf_counter_u64
    
commit fc4c42ce0b5ce87901b327e25f55b4e3ab4c6cf5
Author: Mateusz Guzik <mjg@FreeBSD.org>
Date:   Sat Jul 24 07:33:52 2021 +0200

    pf: switch pf_status.fcounters to pf_counter_u64
    
commit defdcdd5648dc1ea789bc54bb45108fcab546a6b
Author: Mateusz Guzik <mjg@FreeBSD.org>
Date:   Thu Jul 22 22:47:24 2021 +0200

    pf: add hybrid 32- an 64- bit counters
    
    Numerous counters got migrated from straight uint64_t to the counter(9)
    API. Unfortunately the implementation comes with a significiant
    performance hit on some platforms and cannot be easily fixed.
    
    Work around the problem by implementing a pf-specific variant.
    
commit 6f1fb6561236fa933835a9a67bd442053fb509e9
Author: Mateusz Guzik <mjg@FreeBSD.org>
Date:   Sat Jul 24 07:17:27 2021 +0200

    pf: drop redundant 'else' in pf_normalize_*
    
commit 49a7d47235434a300cc57b205e493988fdebf79c
Author: Mateusz Guzik <mjg@FreeBSD.org>
Date:   Fri Jul 23 17:01:29 2021 +0200

    pf: consistently malloc rules with M_ZERO
    
commit 32271c4d383effeac7878201ef5cbdfaeedc3755
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Tue Jul 20 21:03:08 2021 +0200

    pf: clean up syncookie callout on vnet shutdown
    
    Ensure that we cancel any outstanding callouts for syncookies when we
    terminate the vnet.
    
commit 84db87b8dafd9e9970fd36ac48c11ffdc89d31d0
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Tue Jul 20 21:02:33 2021 +0200

    pf: remove stray debug line
    
commit 907257d6967dd23506e69042c55bb1edc983c0ba
Author: Mateusz Guzik <mjg@FreeBSD.org>
Date:   Mon Jul 19 14:40:25 2021 +0200

    pf: embed a pointer to the lock in struct pf_kstate
    
    This shaves calculation which in particular helps on arm.
    
    Note using the & hack instead would still be more work.
    
commit 231e83d3422ff58fe94de8375a9532a1726056ed
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Wed May 26 10:18:19 2021 +0200

    pf: syncookie ioctl interface
    
    Kernel side implementation to allow switching between on and off modes,
    and allow this configuration to be retrieved.
    
    Differential Revision:  https://reviews.freebsd.org/D31139

commit 8e1864ed07121b479b95d7e3a5931a9e0ffd4713
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Thu May 20 11:54:41 2021 +0200

    pf: syncookie support
    
    Import OpenBSD's syncookie support for pf. This feature help pf resist
    TCP SYN floods by only creating states once the remote host completes
    the TCP handshake rather than when the initial SYN packet is received.
    
    This is accomplished by using the initial sequence numbers to encode a
    cookie (hence the name) in the SYN+ACK response and verifying this on
    receipt of the client ACK.
    
    Obtained from:  OpenBSD
    Differential Revision:  https://reviews.freebsd.org/D31138

commit ee9c3d38039eb29966e1f0b8f617bc564c078289
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Thu Jun 10 15:49:09 2021 +0200

    pf: factor out pf_synproxy()
    
    Differential Revision:  https://reviews.freebsd.org/D31137

commit 144ec0713daa532342a298fd888a1656ae24a62d
Author: Mateusz Guzik <mjg@FreeBSD.org>
Date:   Mon Jul 19 14:50:08 2021 +0200

    pf: add a branch prediction to expire state check in pf_find_state
    
commit 2c0d115bbc8f8ee3f011a5c4a69bcbf58c4b721f
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Wed Jul 14 12:17:03 2021 +0200

    pf: locally originating connections with 'route-to' fail
    
    Similar to the REPLY_TO shortcut (6d786845cf) we also can't shortcut
    ROUTE_TO. If we do we will fail to apply transformations or update the
    state, which can lead to premature termination of the connections.
    
    PR:             257106
    Differential Revision:  https://reviews.freebsd.org/D31177

commit 295f2d939d960e2bdf5c1499da3eb41618be05e6
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Wed May 19 20:33:28 2021 +0200

    pf: Remove unused arguments from pf_send_tcp()
    
    struct mbuf *replyto is not actually used (and only rarely provided).
    The same applies to struct ifnet *ifp.
    
    No functional change.
    
    Differential Revision:  https://reviews.freebsd.org/D31136

commit ef950daa35d43dd396958ca28ce9de0514daf873
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Tue Mar 2 16:01:04 2021 +0100

    pf: match keyword support
    
    Support the 'match' keyword.
    Note that support is limited to adding queuing information, so without
    ALTQ support in the kernel setting match rules is pointless.
    
    For the avoidance of doubt: this is NOT full support for the match
    keyword as found in OpenBSD's pf. That could potentially be built on top
    of this, but this commit is NOT that.
    
    Differential Revision:  https://reviews.freebsd.org/D31115

commit 81f95106b8c14d7ce935864b4705d54a8e437ed6
Author: Mark Johnston <markj@FreeBSD.org>
Date:   Thu Jul 15 12:17:58 2021 -0400

    pf: Constify tag name and queue name helper functions
    
    No functional change intended.
    
    Differential Revision:  https://reviews.freebsd.org/D31168

commit 3fc12ae042040192aa43984106a75663aaa9e0f5
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Thu Jul 8 15:01:19 2021 +0200

    pf: bound DIOCGETSTATESV2 memory use
    
    Rather than allocating however much memory userspace asks for we only
    allocate enough for a handful of states, and copy to userspace for each
    completed row.
    We start out with enough space for 16 states (per row), but grow that as
    required. In most configurations we expect at most a handful of states
    per row (more than that would have other negative effects on packet
    processing performance).
    
    Differential Revision:  https://reviews.freebsd.org/D31111

commit c6bf20a2a46dc36bf881ac594454f71379828a9a
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Tue Jul 6 12:12:12 2021 +0200

    pf: add DIOCGETSTATESV2
    
    Add a new version of the DIOCGETSTATES call, which extends the struct to
    include the original interface information.
    
    Differential Revision:  https://reviews.freebsd.org/D31097

commit 34641052826c718566b994b75cd2bddb53a21583
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Thu Jul 8 10:54:16 2021 +0200

    pf: pf_killstates() never fails, so remove the return value
    
    Suggested by:   mjg

commit 19d6e29b872232c47190344f3dfded2f73edd8ae
Author: Mateusz Guzik <mjg@FreeBSD.org>
Date:   Thu Jul 8 15:11:57 2021 +0200

    pf: add pf_find_state_all_exists
    
commit fa96701c8abbc29aad7f8f8d6b823bd7f89c6c15
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Mon Jul 5 14:21:03 2021 +0200

    pf: Handle errors returned by pf_killstates()
    
    Happily this wasn't a real bug, because pf_killstates() never fails, but
    we should check the return value anyway, in case it does ever start
    returning errors.
    
    Reported by:    clang --analyze

commit 8cceacc0f1ee6a77c5f0566b8e6b0f054160fb20
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Mon Jul 5 14:02:06 2021 +0200

    pf: Remove unneeded NULL check
    
    pidx is never NULL, and is used unconditionally later on in the
    function.
    Add an assertion, as documentation for the requirement to provide an idx
    pointer.
    
    Reported by:    clang --analyze

commit 211cddf9e3a1bc0d4b1b94bea7d16a47b5a17f49
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Tue Jul 6 11:42:20 2021 +0200

    pf: rename pf_state to pf_kstate
    
    Indicate that this is a kernel-only structure, and make it easier to
    distinguish from others used to communicate with userspace.
    
    Differential Revision:  https://reviews.freebsd.org/D31096

commit f649cff58721f493f218a4d1fb88a12255945472
Author: Mateusz Guzik <mjg@FreeBSD.org>
Date:   Mon Jul 5 11:26:29 2021 +0200

    pf: padalign global locks found in pf.c
    
commit dc1ab04e4c9ede3606985e0cce1200e3060ac166
Author: Mateusz Guzik <mjg@FreeBSD.org>
Date:   Fri Jul 2 14:55:57 2021 +0200

    pf: allow table stats clearing and reading with ruleset rlock
    
    Instead serialize against these operations with a dedicated lock.
    
    Prior to the change, When pushing 17 mln pps of traffic, calling
    DIOCRGETTSTATS in a loop would restrict throughput to about 7 mln.  With
    the change there is no slowdown.
    
commit f92c21a28cd856834249a008771b2f002e477a39
Author: Mateusz Guzik <mjg@FreeBSD.org>
Date:   Fri Jul 2 13:19:56 2021 +0200

    pf: depessimize table handling
    
    Creating tables and zeroing their counters induces excessive IPIs (14
    per table), which in turns kills single- and multi-threaded performance.
    
    Work around the problem by extending per-CPU counters with a general
    counter populated on "zeroing" requests -- it stores the currently found
    sum. Then requests to report the current value are the sum of per-CPU
    counters subtracted by the saved value.
    
    Sample timings when loading a config with 100k tables on a 104-way box:
    
    stock:
    
    pfctl -f tables100000.conf  0.39s user 69.37s system 99% cpu 1:09.76 total
    pfctl -f tables100000.conf  0.40s user 68.14s system 99% cpu 1:08.54 total
    
    patched:
    
    pfctl -f tables100000.conf  0.35s user 6.41s system 99% cpu 6.771 total
    pfctl -f tables100000.conf  0.48s user 6.47s system 99% cpu 6.949 total
    
commit a19ff8ce9b58548a5f965db2c46eb03c38b15edb
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Tue Jun 29 11:34:49 2021 +0200

    pf: getstates: avoid taking the hashrow lock if the row is empty
    
    Differential Revision:  https://reviews.freebsd.org/D30946

commit 34285eefddc99c994c3e5374ba7836cc7cfc8e2e
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Tue Jun 29 10:26:40 2021 +0200

    pf: Reduce the data returned in DIOCGETSTATESNV
    
    This call is particularly slow due to the large amount of data it
    returns. Remove all fields pfctl does not use. There is no functional
    impact to pfctl, but it somewhat speeds up the call.
    
    It might affect other (i.e. non-FreeBSD) code that uses the new
    interface, but this call is very new, so there's unlikely to be any. No
    releases contained the previous version, so we choose to live with the
    ABI modification.
    
    Differential Revision:  https://reviews.freebsd.org/D30944

commit 48d5b86364fa8e86318805d0078ccf9066e94ae8
Author: Mateusz Guzik <mjg@FreeBSD.org>
Date:   Fri Jul 2 09:28:48 2021 +0200

    pf: make DIOCGETSTATESNV iterations killable
    
commit d26ef5c7ac830812f07a02787f25fed5d6f8609e
Author: Mateusz Guzik <mjg@FreeBSD.org>
Date:   Mon Jun 28 21:32:20 2021 +0200

    pf: make sure the dtrace probe has safe access to state
    
commit 55cc305dfcad0ad7c4f528fa47f7473927e8223a
Author: Mateusz Guzik <mjg@FreeBSD.org>
Date:   Mon Jun 28 20:50:56 2021 +0200

    pf: revert: Use counter(9) for pf_state byte/packet tracking
    
    stats are not shared and consequently per-CPU counters only waste
    memory.
    
    No slowdown was measured when passing over 20M pps.
    
commit 803dfe3da0e30520227a791ba5c2b93da16e1cf5
Author: Mateusz Guzik <mjg@FreeBSD.org>
Date:   Mon Jun 28 20:18:26 2021 +0200

    pf: deduplicate V_pf_state_z handling with pfsync
    
commit 7f025db57c7879bfa43ac74ecd95903439fdd1d0
Author: Mateusz Guzik <mjg@FreeBSD.org>
Date:   Mon Jun 28 20:29:58 2021 +0200

    pf: fix error-case leaks in pf_create_state
    
    The hand-rolled clean up failed to free counters.
    
commit ccb17a21041e9206b80fa9f64b6ec20233df6403
Author: Mateusz Guzik <mjg@FreeBSD.org>
Date:   Mon Jun 28 14:22:31 2021 +0200

    pf: factor out state allocation into pf_alloc_state
    
commit d09388d013300fc4aa1ee1a6bc24260cd400aff3
Author: Mateusz Guzik <mjg@FreeBSD.org>
Date:   Mon Jun 28 14:18:43 2021 +0200

    pf: add pf_release_staten and use it in pf_unlink_state
    
    Saves one atomic op.
    
commit d38630f6192a40934912fbffc52c9650776c2b53
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Fri Jun 4 10:52:07 2021 +0200

    pf: store L4 headers in pf_pdesc
    
    Rather than pointers to the headers store full copies. This brings us
    slightly closer to what OpenBSD does, and also makes more sense than
    storing pointers to stack variable copies of the headers.
    
    Differential Revision:  https://reviews.freebsd.org/D30719

commit 8b5f4e692b1d1585ecfc6690552650114e3e704e
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Mon Jun 14 14:04:02 2021 +0200

    pf: don't hold a lock during copyout()
    
    copyout() can trigger page faults, so it may potentially sleep.
    
    Reported by:    avg

commit ea21980a3facfed4c2c6fd10d0f16276564fb540
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Wed Jun 9 14:00:07 2021 +0200

    pf: use M_WAITOK where possible
    
    In the ioctl path use M_WAITOK allocations whereever possible. These are
    less sensitive to memory pressure, and ioctl requests have no hard
    deadlines.
    
    Differential Revision:  https://reviews.freebsd.org/D30702

commit 60a38abb8982e11ee71559057dd7128bd097043e
Author: Mark Johnston <markj@FreeBSD.org>
Date:   Tue Jun 1 10:56:23 2021 -0400

    pf: Avoid leaking pad bytes in struct pfr_astats when copying out
    
    There is padding between pfr_astats.pfras_a and pfras_packets that was
    not getting initialized.
    
    Reported by:    KMSAN
    Differential Revision:  https://reviews.freebsd.org/D30585

commit 0f86492b09ca82042166a41f6f21b2dbe4f4a464
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Tue Jun 1 16:05:47 2021 +0200

    pf: Fix more ioctl memory leaks
    
    We must also remember to free nvlists added to a parent nvlist with
    nvlist_append_nvlist_array().
    
    More importantly, when nvlist_pack() allocates memory for us it does so
    in the M_NVLIST zone, so we must free it with free(.., M_NVLIST). Using
    free(.., M_TEMP) as we did silently failed to free the memory.
    
    Reported by:    kib@
    Differential Revision:  https://reviews.freebsd.org/D30595

commit ec7b47fc81b22470fb177d9e03b5a76818eee65f
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Mon May 31 18:34:37 2021 +0200

    pf: Move provider declaration to pf.h
    
    This simplifies life a bit, by not requiring us to repease the
    declaration for every file where we want static probe points.
    
    It also makes the gcc6 build happy.

commit 7c4342890bf17b72f0d79ada1326d9cbf34e736c
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Sat May 15 13:45:55 2021 +0200

    pf: Convenience function for optional (numeric) arguments
    
    Add _opt() variants for the uint* functions. These functions set the
    provided default value if the nvlist doesn't contain the relevant value.
    This is helpful for optional values (e.g. when the API is extended to
    add new fields).
    
    While here simplify the header by also using macros to create the
    prototypes for the macro-generated function implementations.
    
    Differential Revision:  https://reviews.freebsd.org/D30510

commit 3032c353882aa70a461ef251b8aa6c59a0829ec5
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Tue May 18 09:24:50 2021 +0200

    pf: Move nvlist conversion functions to pf_nv
    
    Separate the conversion functions (between kernel structs and nvlists)
    to pf_nv. This reduces the size of pf_ioctl.c, which is already quite
    large and complex, a good bit. It also keeps all the fairly
    straightforward conversion code together.
    
    Differential Revision:  https://reviews.freebsd.org/D30359

commit 4483fb47735c29408c72045469c9c4b3e549668b
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Mon May 24 08:32:16 2021 +0200

    pf: fix ioctl() memory leak
    
    When we create an nvlist and insert it into another nvlist we must
    remember to destroy it. The nvlist_add_nvlist() function makes a copy,
    just like nvlist_add_string() makes a copy of the string. If we don't
    we're leaking memory on every (nvlist-based) ioctl() call.
    
    While here remove two redundant 'break' statements.
    
    PR:             255971

commit b62489cc92edbec318fb6c57cdc02b5e3cfa3a67
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Thu May 13 09:51:28 2021 +0200

    pf: Support killing floating states by interface
    
    Floating states get assigned to interface 'all' (V_pfi_all), so when we
    try to flush all states for an interface states originally created
    through this interface are not flushed. Only if-bound states can be
    flushed in this way.
    
    Given that we track the original interface we can check if the state's
    interface is 'all', and if so compare to the orig_if instead.
    
    Differential Revision:  https://reviews.freebsd.org/D30246

commit d0fdf2b28f9b981d2cb98e9da8a715e046ef1e92
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Wed May 12 13:24:57 2021 +0200

    pf: Track the original kif for floating states
    
    Track (and display) the interface that created a state, even if it's a
    floating state (and thus uses virtual interface 'all').
    
    Differential Revision:  https://reviews.freebsd.org/D30245

commit 0592a4c83d67547644763fb023abd5eb28e57f92
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Wed May 5 21:00:16 2021 +0200

    pf: Add DIOCGETSTATESNV
    
    Add DIOCGETSTATESNV, an nvlist-based alternative to DIOCGETSTATES.
    
    Differential Revision:  https://reviews.freebsd.org/D30243

commit 1732afaa0dae9d844e341f2c1d6ed4b79c403bfb
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Wed May 5 14:33:55 2021 +0200

    pf: Add DIOCGETSTATENV
    
    Add DIOCGETSTATENV, an nvlist-based alternative to DIOCGETSTATE.
    
    Differential Revision:  https://reviews.freebsd.org/D30242

commit d69cc040147284c414dfd1c9f498dcc7c8291a8b
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Sun May 16 08:50:17 2021 +0200

    pf: Set the pfik_group for userspace
    
    Userspace relies on this pointer to work out if the kif is a group or
    not. It can't use it for anything else, because it's a pointer to a
    kernel address. Substitute 0xfeedc0de for 'true', so that we don't leak
    kernel memory addresses to userspace.
    
    PR:             255852
    Differential Revision:  https://reviews.freebsd.org/D30284

commit 93abcf17e6cf3c1cd8511c8ff7a8bf20b2d76367
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Mon May 3 15:35:50 2021 +0200

    pf: Support killing 'matching' states
    
    Optionally also kill states that match (i.e. are the NATed state or
    opposite direction state entry for) the state we're killing.
    
    See also https://redmine.pfsense.org/issues/8555
    
    Submitted by:   Steven Brown
    Obtained from:  https://github.com/pfsense/FreeBSD-src/pull/11/
    Differential Revision:  https://reviews.freebsd.org/D30092

commit abbcba9cf5b1c26e837f00e0fbc205652cb05e51
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Fri Apr 30 15:15:05 2021 +0200

    pf: Allow states to by killed per 'gateway'
    
    This allows us to kill states created from a rule with route-to/reply-to
    set.  This is particularly useful in multi-wan setups, where one of the
    WAN links goes down.
    
    Submitted by:   Steven Brown
    Obtained from:  https://github.com/pfsense/FreeBSD-src/pull/11/
    Differential Revision:  https://reviews.freebsd.org/D30058

commit e989530a09b6e9f77b89c950ecf32f1b4fa709da
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Thu Apr 29 17:20:36 2021 +0200

    pf: Introduce DIOCKILLSTATESNV
    
    Introduce an nvlist based alternative to DIOCKILLSTATES.
    
    Differential Revision:  https://reviews.freebsd.org/D30054

commit 7606a45dcc87cb6b222af929dad37b615cb925cf
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Thu Apr 29 11:07:02 2021 +0200

    pf: Introduce DIOCCLRSTATESNV
    
    Introduce an nvlist variant of DIOCCLRSTATES.
    
    Differential Revision:  https://reviews.freebsd.org/D30052

commit 055c55abefbe19fe46a56894595af9c9dad7678c
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Wed Apr 28 12:56:06 2021 +0200

    pf: Fix IP checksum on reassembly
    
    If we reassemble a packet we modify the IP header (to set the length and
    remove the fragment offset information), but we failed to update the
    checksum. On certain setups (mostly where we did not re-fragment again
    afterwards) this could lead to us sending out packets with incorrect
    checksums.
    
    PR:             255432
    Differential Revision:  https://reviews.freebsd.org/D30026

commit eaabed8ac449dbd9a7f4f567e9378bda4636221e
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Thu Apr 29 10:34:00 2021 +0200

    pf: Trivial typo fix
    
    PV -> PF
    
commit 6b146f3b9b665c9baf6ba2cb038bbee359cb738a
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Tue Apr 20 11:18:26 2021 +0200

    pf: Error tracing SDTs
    
    Add additional DTrace static trace points to facilitate debugging
    failing pf ioctl calls.
    
commit 402dfb0a8d2c6417cb9bff4460ef250a42b0aa05
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Sat Apr 24 15:55:24 2021 +0200

    pf: Fix parsing of long table names
    
    When parsing the nvlist for a struct pf_addr_wrap we unconditionally
    tried to parse "ifname". This broke for PF_ADDR_TABLE when the table
    name was longer than IFNAMSIZ. PF_TABLE_NAME_SIZE is longer than
    IFNAMSIZ, so this is a valid configuration.
    
    Only parse (or return) ifname or tblname for the corresponding
    pf_addr_wrap type.
    
    This manifested as a failure to set rules such as these, where the pfctl
    optimiser generated an automatic table:
    
            pass in proto tcp to 192.168.0.1 port ssh
            pass in proto tcp to 192.168.0.2 port ssh
            pass in proto tcp to 192.168.0.3 port ssh
            pass in proto tcp to 192.168.0.4 port ssh
            pass in proto tcp to 192.168.0.5 port ssh
            pass in proto tcp to 192.168.0.6 port ssh
            pass in proto tcp to 192.168.0.7 port ssh
    
    Reported by:    Florian Smeets
    Differential Revision:  https://reviews.freebsd.org/D29962

commit 5f5bf88949df421ec3ccd7e14a999e8d8b9251bf
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Fri Apr 23 14:24:59 2021 +0200

    pfsync: Expose PFSYNCF_OK flag to userspace
    
    Add 'syncok' field to ifconfig's pfsync interface output. This allows
    userspace to figure out when pfsync has completed the initial bulk
    import.
    
    Differential Revision:  https://reviews.freebsd.org/D29948

commit 6fcc8e042ac480f9276177339f7de1ad0f95c1b0
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Tue Apr 20 11:04:48 2021 +0200

    pf: Allow multiple labels to be set on a rule
    
    Allow up to 5 labels to be set on each rule.
    This offers more flexibility in using labels. For example, it replaces
    the customer 'schedule' keyword used by pfSense to terminate states
    according to a schedule.
    
    Differential Revision:  https://reviews.freebsd.org/D29936

commit 586aab9e0aa6c811758c19fb03831fc1e7305252
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Fri Apr 16 16:34:21 2021 +0200

    pf: Refactor state killing
    
    Extract the state killing code from pfioctl() and rephrase the filtering
    conditions for readability.
    
    No functional change intended.
    
    Differential Revision:  https://reviews.freebsd.org/D29795

commit 42ec75f83aa321fcea8d2eddc4e9099724f0669e
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Thu Apr 15 16:12:11 2021 +0200

    pf: Optionally attempt to preserve rule counter values across ruleset updates
    
    Usually rule counters are reset to zero on every update of the ruleset.
    With keepcounters set pf will attempt to find matching rules between old
    and new rulesets and preserve the rule counters.
    
    Differential Revision:  https://reviews.freebsd.org/D29780

commit 8bb0f1b87b80fd0a9c9dc388851cb609298d36ef
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Thu Apr 15 13:41:07 2021 +0200

    pf: Remove PFRULE_REFS from userspace
    
    PFRULE_REFS should never be used by userspace, so hide it behind #ifdef
    _KERNEL.
    
    Differential Revision:  https://reviews.freebsd.org/D29779

commit 4f1f67e88853ac9e3c2d8897cf6dab6cfda8d16e
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Thu Apr 15 13:38:56 2021 +0200

    pf: PFRULE_REFS should not be user-visible
    
    Split the PFRULE_REFS flag from the rule_flag field. PFRULE_REFS is a
    kernel-internal flag and should not be exposed to or read from
    userspace.
    
    Differential Revision:  https://reviews.freebsd.org/D29778

commit 2aa21096c7349390f22aa5d06b373a575baed1b4
Author: Kurosawa Takahiro <takahiro.kurosawa@gmail.com>
Date:   Tue Apr 13 10:50:00 2021 +0200

    pf: Implement the NAT source port selection of MAP-E Customer Edge
    
    MAP-E (RFC 7597) requires special care for selecting source ports
    in NAT operation on the Customer Edge because a part of bits of the port
    numbers are used by the Border Relay to distinguish another side of the
    IPv4-over-IPv6 tunnel.
    
    PR:             254577
    Differential Revision:  https://reviews.freebsd.org/D29468

commit 5e98cae661f3a7e85df7f277660765b823454073
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Mon Apr 12 11:45:48 2021 +0200

    pf: Ensure that we don't use kif passed to pfi_kkif_attach()
    
    Once a kif is passed to pfi_kkif_attach() we must ensure we never re-use
    it for anything else.
    Set the kif to NULL afterwards to guarantee this.
    
    Reported-by: syzbot+be5d4f4a7a4c295e659a@syzkaller.appspotmail.com

commit a9b338b260be39cc74dddb599d6c95b8794ca98b
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Wed Apr 7 19:49:51 2021 +0200

    pf: Move prototypes for userspace functions to userspace header
    
    These functions no longer exist in the kernel, so there's no reason to
    keep the prototypes in a kernel header. Move them to pfctl where they're
    actually implemented.
    
    Differential Revision:  https://reviews.freebsd.org/D29643

commit d710367d1159423ed4da6628b7ab042d3e44f900
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Thu Mar 25 10:39:14 2021 +0100

    pf: Implement nvlist variant of DIOCGETRULE
    
    Differential Revision:  https://reviews.freebsd.org/D29559

commit 5c62eded5a11ebdb1d57134d923596e2b04e9466
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Thu Mar 11 16:21:23 2021 +0100

    pf: Introduce nvlist variant of DIOCADDRULE
    
    This will make future extensions of the API much easier.
    The intent is to remove support for DIOCADDRULE in FreeBSD 14.
    
    Differential Revision:  https://reviews.freebsd.org/D29557

commit 4967f672ef3095300fe74a9d1ae873d0897cc0a5
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Thu Apr 8 11:08:33 2021 +0200

    pf: Remove unused variable rt_listid from struct pf_krule
    
    Differential Revision:  https://reviews.freebsd.org/D29639

commit 6d786845cf63c8bf57174e3e43b0b5c5eca75be3
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Wed Apr 7 15:46:44 2021 +0200

    pf: Do not short-circuit processing for REPLY_TO
    
    When we find a state for packets that was created by a reply-to rule we
    still need to process the packet. The state may require us to modify the
    packet (e.g. in rdr or nat cases), which we won't do with the shortcut.
    
commit f4c02909167b6f791df470afddfe31cabf009c4d
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Fri Apr 2 15:53:34 2021 +0200

    pf: Add static DTrace probe points
    
    These two have proven to be useful during debugging. We may as well keep
    them permanently.
    Others will be added as their utility becomes clear.
    
    Differential Revision:  https://reviews.freebsd.org/D29555

commit 829a69db855b48ff7e8242b95e193a0783c489d9
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Fri Apr 2 12:23:42 2021 +0200

    pf: change pf_route so pf only runs when packets enter and leave the stack.
    
    before this change pf_route operated on the semantic that pf runs
    when packets go over an interface, so when pf_route changed which
    interface the packet was on it would run pf_test again. this change
    changes (restores) the semantic that pf is only supposed to run
    when packets go in or out of the network stack, even if route-to
    is responsibly for short circuiting past the network stack.
    
    just to be clear, for normal packets (ie, those not touched by
    route-to/reply-to/dup-to), there isn't a difference between running
    pf when packets enter or leave the stack, or having pf run when a
    packet goes over an interface.
    
    the main reason for this change is that running the same packet
    through pf multiple times creates confusion for the state table.
    by default, pf states are floating, meaning that packets are matched
    to states regardless of which interface they're going over. if a
    packet leaving on em0 is rerouted out em1, both traversals will end
    up using the same state, which at best will make the accounting
    look weird, or at worst fail some checks in the state and get
    dropped.
    
    another reason for this commit is is to make handling of the changes
    that route-to makes consistent with other changes that are made to
    packet. eg, when nat is applied to a packet, we don't run pf_test
    again with the new addresses.
    
    the main caveat with this diff is you can't have one rule that
    pushes a packet out a different interface, and then have a rule on
    that second interface that NATs the packet. i'm not convinced this
    ever worked reliably or was used much anyway, so we don't think
    it's a big concern.
    
    discussed with many, with special thanks to bluhm@, sashan@ and
    sthen@ for weathering most of that pain.
    ok claudio@ sashan@ jmatthew@
    
    Obtained from:  OpenBSD
    Differential Revision:  https://reviews.freebsd.org/D29554

commit 92d1463e02b1d0c8abf26f430a8a52dec468863c
Author: Ed Maste <emaste@FreeBSD.org>
Date:   Thu Mar 25 14:43:55 2021 -0400

    pf: remove obsolete reference to ndis(4) in a comment

commit b93a796b06ec013a75a08ac43d8acf6aa94aa970
Author: Mark Johnston <markj@FreeBSD.org>
Date:   Tue Mar 23 09:38:59 2021 -0400

    pf: Handle unmapped mbufs when computing checksums
    
    PR:             254419
    Differential Revision:  https://reviews.freebsd.org/D29378

commit 9f2e5184173f6af70306678b018270df9a9600f2
Author: Thomas Kurschel <topical@gmx.net>
Date:   Mon Mar 15 14:28:52 2021 +0100

    pfsync: Unconditionally push packets when requesting state updates
    
    When we request a bulk sync we need to ensure we actually send out that
    request, not just buffer it until we have enough data to send a full
    packet.
    
    PR:             254236
    Differential Revision:  https://reviews.freebsd.org/D29271

commit 15b82e00a1640d1b9a1d720c95f65e580be30187
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Thu Mar 11 11:37:05 2021 +0100

    pf: pool/kpool conversion code
    
    stuct pf_pool and struct pf_kpool are different. We should not simply
    bcopy() them.
    
    Happily it turns out that their differences were all pointers, and the
    userspace provided pointers were overwritten by the kernel, so this did
    actually work correctly, but we should fix it anyway.
    
    Differential Revision:  https://reviews.freebsd.org/D29216

commit cecfaf9bede9665d6a10f1e575cd5d575450cff7
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Wed Mar 10 22:56:11 2021 +0100

    pf: Fully remove interrupt events on vnet cleanup
    
    swi_remove() removes the software interrupt handler but does not remove
    the associated interrupt event.
    This is visible when creating and remove a vnet jail in `procstat -t
    12`.
    
    We can remove it manually with intr_event_destroy().
    
    PR:             254171
    Differential Revision:  https://reviews.freebsd.org/D29211

commit 28dc2c954f5096ae594ed5cd7a83d66ce4bf1ded
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Wed Mar 10 15:15:16 2021 +0100

    pf: Simplify cleanup
    
    We can now counter_u64_free(NULL), so remove the checks.
    
    Differential Revision:  https://reviews.freebsd.org/D29190

commit 913e7dc3e0eb7df78ec0e7ecc7dd160a316a3ac6
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Wed Mar 10 15:50:42 2021 +0100

    pf: Remove redundant kif != NULL checks
    
    pf_kkif_free() already checks for NULL, so we don't have to check before
    we call it.
    
    Differential Revision:  https://reviews.freebsd.org/D29195

commit 5e9dae8e149ae8848f52148b665f3a0d031ca40f
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Wed Mar 10 11:10:04 2021 +0100

    pf: Factor out pf_krule_free()
    
    Differential Revision:  https://reviews.freebsd.org/D29194

commit bb4a7d94b99fbf7f59c876ffff8ded5f6a5b5c3e
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Thu Mar 4 11:26:40 2021 +0100

    net: Introduce IPV6_DSCP(), IPV6_ECN() and IPV6_TRAFFIC_CLASS() macros
    
    Introduce convenience macros to retrieve the DSCP, ECN or traffic class
    bits from an IPv6 header.
    
    Use them where appropriate.
    
    Differential Revision:  https://reviews.freebsd.org/D29056

commit f19323847ca894af8a58839f6a2a41691a8e2245
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Wed Mar 3 21:33:42 2021 +0100

    pf: Retrieve DSCP value from the IPv6 header
    
    Teach pf to read the DSCP value from the IPv6 header so that we can
    match on them.
    
    Differential Revision:  https://reviews.freebsd.org/D29048

commit 5f1b1f184b7f12330cf4a027e3db7c6700c67640
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Thu Feb 25 08:07:36 2021 +0100

    pf: Fix incorrect fragment handling
    
    A sequence of overlapping IPv4 fragments could crash the kernel in
    pf due to an assertion.
    
    Reported by:    Alexander Bluhm
    Obtained from:  OpenBSD

commit 2ed689a674c380e48245933d5326da4dda65f94d
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Thu Feb 18 08:36:46 2021 +0100

    pf: Fix osfp configuration
    
    pf_rule_to_krule() incorrectly converted the rule osfp configuration to
    the krule structure.
    
    Reported by:    delphij@

commit c4e0f7aa1ae7729df8c3e525e511b84f8052375c
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Wed Feb 17 11:44:37 2021 +0100

    pf: Assert that pfil_link() calls succeed
    
    These should only fail if we use them incorrectly, so assert that they
    succeed.
    
commit 8a439f324e9010a122fa4c00426bde70dc373c2f
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Tue Feb 16 12:40:51 2021 +0100

    pf: Remove unused return value from (de)hook_pf()
    
    These functions always return 0, which is good, because the code calling
    them doesn't handle this error gracefully.
    
    As the functions always succeed remove their return value, and the code
    handling their errors (because it was never executed anyway).
    
commit 5e42cb139fc17f165c9c93ac97069dc7770490e2
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Sat Feb 13 16:31:52 2021 +0100

    pf: Slightly relax pf_rule_addr validation
    
    Ensure we don't reject no-route / urpf-failed addresses.
    
    PR:             253479
    Reported by:    michal AT microwave.sk
    Revied by:      donner@
    Differential Revision:  https://reviews.freebsd.org/D28650

commit 0c458752ceee14818034df7bfcdfb04129dceeda
Author: Yannis Planus <yannis.planus@alstomgroup.com>
Date:   Thu Jan 28 14:59:07 2021 +0100

    pf: duplicate frames only once when using dup-to pf rule
    
    When using DUP-TO rule, frames are duplicated 3 times on both output
    interfaces and duplication interface. Add a flag to not duplicate a
    duplicated frame.
    
    Inspired by a patch from Miłosz Kaniewski milosz.kaniewski at gmail.com
    https://lists.freebsd.org/pipermail/freebsd-pf/2015-November/007886.html
    
    Differential Revision:  https://reviews.freebsd.org/D27018

commit 7a808c5ee3296fdb72d8e8bc6c7ad6f316a520ab
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Tue Jan 26 08:56:51 2021 +0100

    pf: Improve pf_rule input validation
    
    Move the validation checks to pf_rule_to_krule() to reduce duplication.
    This also makes the checks consistent across different ioctls.
    
    Reported-by:    syzbot+e9632d7ad17398f0bd8f@syzkaller.appspotmail.com
    Differential Revision:  https://reviews.freebsd.org/D28362

commit ea36212bf5711206bbaf5362a23ebb52c7f7e2a4
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Wed Jan 13 19:30:01 2021 +0100

    pf: Don't hold PF_RULES_WLOCK during copyin() on DIOCRCLRTSTATS
    
    We cannot hold a non-sleepable lock during copyin(). This means we can't
    safely count the table, so instead we fall back to the pf_ioctl_maxcount
    used in other ioctls to protect against overly large requests.
    
    Reported by:    syzbot+81e380344d4a6c37d78a@syzkaller.appspotmail.com

commit 86b653ed7eedb0d6cc3315bea132f847f748066d
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Mon Jan 11 19:28:01 2021 +0100

    pf: quiet debugging printfs
    
    Only log these when debugging output is enabled.

commit 0fcb03fbaca1307175edc96355c867471db309f8
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Thu Jan 7 22:24:38 2021 +0100

    pf: Copy kif flags to userspace
    
    This was overlooked in the pfi_kkif/pfi_kif splitup and as a result
    userspace could no longer tell which interfaces had the skip flag
    applied.
    
commit fda7daf06301beef1bdad39891232a12c6925b22
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Thu Dec 24 16:02:04 2020 +0100

    pfctl: Stop sharing pf_ruleset.c with the kernel
    
    Now that we've split up the datastructures used by the kernel and
    userspace there's essentually no more overlap between the pf_ruleset.c
    code used by userspace and kernelspace.
    
    Copy the userspace bits to the pfctl directory and stop using the kernel
    file.
    
    Differential Revision:  https://reviews.freebsd.org/D27764

commit 5a3b9507d784aaa6a7ce35432b2111a7eec12cba
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Sun Dec 13 17:20:02 2020 +0100

    pf: Convert pfi_kkif to use counter_u64
    
    Improve caching behaviour by using counter_u64 rather than variables
    shared between cores.
    
    The result of converting all counters to counter(9) (i.e. this full
    patch series) is a significant improvement in throughput. As tested by
    olivier@, on Intel Xeon E5-2697Av4 (16Cores, 32 threads) hardware with
    Mellanox ConnectX-4 MCX416A-CCAT (100GBase-SR4) nics we see:
    
    x FreeBSD 20201223: inet packets-per-second
    + FreeBSD 20201223 with pf patches: inet packets-per-second
    +--------------------------------------------------------------------------+
    |                                                                        + |
    | xx                                                                     + |
    |xxx                                                                    +++|
    ||A|                                                                       |
    |                                                                       |A||
    +--------------------------------------------------------------------------+
        N           Min           Max        Median           Avg        Stddev
    x   5       9216962       9526356       9343902     9371057.6     116720.36
    +   5      19427190      19698400      19502922      19546509     109084.92
    Difference at 95.0% confidence
            1.01755e+07 +/- 164756
            108.584% +/- 2.9359%
            (Student's t, pooled s = 112967)
    
    Differential Revision:  https://reviews.freebsd.org/D27763

commit 26c841e2a402ed43896313d1b3f00facaa9d839f
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Sun Dec 13 11:36:54 2020 +0100

    pf: Allocate and free pfi_kkif in separate functions
    
    Factor out allocating and freeing pfi_kkif structures. This will be
    useful when we change the counters to be counter_u64, so we don't have
    to deal with that complexity in the multiple locations where we allocate
    pfi_kkif structures.
    
    No functional change.
    
    Differential Revision:  https://reviews.freebsd.org/D27762

commit 320c11165b6b1113b34f9e156cbf85b5ed0aa5eb
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Sat Dec 12 15:14:56 2020 +0100

    pf: Split pfi_kif into a user and kernel space structure
    
    No functional change.
    
    Differential Revision:  https://reviews.freebsd.org/D27761

commit c3adacdad4d72b045058cd932351b94579cdd543
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Sat Dec 5 21:41:42 2020 +0100

    pf: Change pf_krule counters to use counter_u64
    
    This improves the cache behaviour of pf and results in improved
    throughput.
    
    Differential Revision:  https://reviews.freebsd.org/D27760

commit e86bddea9fe62d5093a1942cf21950b3c5ca62e5
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Sat Dec 5 14:32:54 2020 +0100

    pf: Split pf_rule into kernel and user space versions
    
    No functional change intended.
    
    Differential Revision:  https://reviews.freebsd.org/D27758

commit dc865dae89c34291467e0ba569a8c78fc7a5d360
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Thu Dec 3 17:17:39 2020 +0100

    pf: Migrate pf_rule and related structs to pf.h
    
    As part of the split between user and kernel mode structures we're
    moving all user space usable definitions into pf.h.
    
    No functional change intended.
    
    Differential Revision:  https://reviews.freebsd.org/D27757

commit fbbf270eef271806a0a106e45356d91f5b5e1f55
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Fri Nov 13 20:31:51 2020 +0100

    pf: Use counter_u64 in pf_src_node
    
    Reviewd by:     philip
    Differential Revision:  https://reviews.freebsd.org/D27756

commit 17ad7334ca6225e0dc5caca12d1eb5886115f7af
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Wed Dec 23 14:51:52 2020 +0100

    pf: Split pf_src_node into a kernel and userspace struct
    
    Introduce a kernel version of struct pf_src_node (pf_ksrc_node).
    
    This will allow us to improve the in-kernel data structure without
    breaking userspace compatibility.
    
    Differential Revision:  https://reviews.freebsd.org/D27707

commit 1c00efe98ed7d103b9684ff692ffd5e3b64d0237
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Wed Dec 23 09:37:59 2020 +0100

    pf: Use counter(9) for pf_state byte/packet tracking
    
    This improves cache behaviour by not writing to the same variable from
    multiple cores simultaneously.
    
    pf_state is only used in the kernel, so can be safely modified.
    
    Differential Revision:  https://reviews.freebsd.org/D27661

commit c3f69af03ae7acc167cc1151f0c1ecc5e014ce4e
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Sun Dec 20 21:06:32 2020 +0100

    pf: Fix unaligned checksum updates
    
    The algorithm we use to update checksums only works correctly if the
    updated data is aligned on 16-bit boundaries (relative to the start of
    the packet).
    
    Import the OpenBSD fix for this issue.
    
    PR:             240416
    Obtained from:  OpenBSD
    Differential Revision:  https://reviews.freebsd.org/D27696

commit 3420068a73e554b30a86f9327b1a63f40e3b4568
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Sat Dec 12 20:14:39 2020 +0000

    pf: Allow net.pf.request_maxcount to be set from loader.conf
    
    Mark request_maxcount as RWTUN so we can set it both at runtime and from
    loader.conf. This avoids usings getting caught out by the change from tunable
    to run time configuration.
    
    Suggested by:   Franco Fichtner

commit 9ee99cec1f36dec8f05c780f1f05f862d7c76572
Author: Brooks Davis <brooks@FreeBSD.org>
Date:   Fri Dec 11 21:40:38 2020 +0000

    hme(4): Remove as previous announced
    
    The hme (Happy Meal Ethernet) driver was the onboard NIC in most
    supported sparc64 platforms. A few PCI NICs do exist, but we have seen
    no evidence of use on non-sparc systems.
    
commit e6aed06fdfa8b1106ff4b4b1fdb60c7b46358688
Author: Mark Johnston <markj@FreeBSD.org>
Date:   Wed Dec 2 16:01:43 2020 +0000

    pf: Fix table entry counter toggling
    
    When updating a table, pf will keep existing table entry structures
    corresponding to addresses that are in both of the old and new tables.
    However, the update may also enable or disable per-entry counters which
    are allocated separately.  Thus when toggling PFR_TFLAG_COUNTERS, the
    entries may be missing counters or may have unused counters allocated.
    
    Fix the problem by modifying pfr_ina_commit() to transfer counters
    from or to entries in the shadow table.
    
    PR:             251414
    Reported by:    sigsys@gmail.com
    Differential Revision:  https://reviews.freebsd.org/D27440

commit 5d49283f885721f972e26c12c5d81264bebdc4fa
Author: Mark Johnston <markj@FreeBSD.org>
Date:   Tue Nov 24 16:18:47 2020 +0000

    pf: Make tag hashing more robust
    
    tagname2tag() hashes the tag name before truncating it to 63 characters.
    tag_unref() removes the tag from the name hash by computing the hash
    over the truncated name.  Ensure that both operations compute the same
    hash for a given tag.
    
    The larger issue is a lack of string validation in pf(4) ioctl handlers.
    This is intended to be fixed with some future work, but an extra safety
    belt in tagname2hashindex() is worthwhile regardless.
    
    Reported by:    syzbot+a0988828aafb00de7d68@syzkaller.appspotmail.com
    Differential Revision:  https://reviews.freebsd.org/D27346

commit 71c9acef8c50c15b4287f439cd2720dba24e272b
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Fri Nov 20 10:08:33 2020 +0000

    pf: Fix incorrect assertion
    
    We never set PFRULE_RULESRCTRACK when calling pf_insert_src_node(). We do set
    PFRULE_SRCTRACK, so update the assertion to match.
    
    Differential Revision:  https://reviews.freebsd.org/D27254

commit 52b83a06184cb7b1739d8c0238c97283c762c04b
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Tue Oct 13 11:04:00 2020 +0000

    pf: do not remove kifs that are referenced by rules
    
    Even if a kif doesn't have an ifp or if_group pointer we still can't delete it
    if it's referenced by a rule. In other words: we must check rulerefs as well.
    
    While we're here also teach pfi_kif_unref() not to remove kifs with flags.
    
    Reported-by: syzbot+b31d1d7e12c5d4d42f28@syzkaller.appspotmail.com

commit c9449e4fb81d7f6c89d760b3b16fee4873174b17
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Mon Oct 12 12:39:37 2020 +0000

    pf: create a kif for flags
    
    If userspace tries to set flags (e.g. 'set skip on <ifspec>') and <ifspec>
    doesn't exist we should create a kif so that we apply the flags when the
    <ifspec> does turn up.
    
    Otherwise we'd end up in surprising situations where the rules say the
    interface should be skipped, but it's not until the rules get re-applied.
    
    Differential Revision:  https://reviews.freebsd.org/D26742

commit 662c13053f4bf2d6245ba7e2b66c10d1cd5c1fb9
Author: Mateusz Guzik <mjg@FreeBSD.org>
Date:   Tue Sep 1 21:19:14 2020 +0000

    net: clean up empty lines in .c and .h files

commit 95033af923d35915c511f119dca0dc124e3b1c38
Author: Mark Johnston <markj@FreeBSD.org>
Date:   Thu Jun 18 19:32:34 2020 +0000

    Add the SCTP_SUPPORT kernel option.
    
    This is in preparation for enabling a loadable SCTP stack.  Analogous to
    IPSEC/IPSEC_SUPPORT, the SCTP_SUPPORT kernel option must be configured
    in order to support a loadable SCTP implementation.
    
commit c1be839971100cbfb6f758dc7d1613c280e6a373
Author: Mark Johnston <markj@FreeBSD.org>
Date:   Sat May 16 00:28:12 2020 +0000

    pf: Add a new zone for per-table entry counters.
    
    Right now we optionally allocate 8 counters per table entry, so in
    addition to memory consumed by counters, we require 8 pointers worth of
    space in each entry even when counters are not allocated (the default).
    
    Instead, define a UMA zone that returns contiguous per-CPU counter
    arrays for use in table entries.  On amd64 this reduces sizeof(struct
    pfr_kentry) from 216 to 160.  The smaller size also results in better
    slab efficiency, so memory usage for large tables is reduced by about
    28%.
    
    Differential Revision:  https://reviews.freebsd.org/D24843

commit 21121f9bbe6313eb4cdd43e9baca06b975172c7d
Author: Mark Johnston <markj@FreeBSD.org>
Date:   Mon May 11 18:47:38 2020 +0000

    pf: Don't allocate per-table entry counters unless required.
    
    pf by default does not do per-table address accounting unless the
    "counters" keyword is specified in the corresponding pf.conf table
    definition.  Yet, we always allocate 12 per-CPU counters per table.  For
    large tables this carries a lot of overhead, so only allocate counters
    when they will actually be used.
    
    A further enhancement might be to use a dedicated UMA zone to allocate
    counter arrays for table entries, since close to half of the structure
    size comes from counter pointers.  A related issue is the cost of
    zeroing counters, since counter_u64_zero() calls smp_rendezvous() on
    some architectures.
    
    Reported by:    loos, Jim Pingle <jimp@netgate.com>
    Differential Revision:  https://reviews.freebsd.org/D24803

commit 1ef06ed8def97f4283e24e51b4a50e5f0a93ef6e
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Sun May 3 16:09:35 2020 +0000

    pf: Improve DIOCADDRULE validation
    
    We expect the addrwrap.p.dyn value to be set to NULL (and assert such),
    but do not verify it on input.
    
    Reported-by:    syzbot+936a89182e7d8f927de1@syzkaller.appspotmail.com
    Differential Revision:  https://reviews.freebsd.org/D24538

commit df03977dd83c5040004be18ab507b799ad4ad67b
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Sun Apr 26 16:30:00 2020 +0000

    pf: Virtualise pf_frag_mtx
    
    The pf_frag_mtx mutex protects the fragments queue. The fragments queue
    is virtualised already (i.e. per-vnet) so it makes no sense to block
    jail A from accessing its fragments queue while jail B is accessing its
    own fragments queue.
    
    Virtualise the lock for improved concurrency.
    
    Differential Revision:  https://reviews.freebsd.org/D24504

commit a7c8533634abce143a9d51b9252bb3b0db33f932
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Sun Apr 26 16:16:39 2020 +0000

    pf: Improve input validation
    
    If we pass an anchor name which doesn't exist pfr_table_count() returns
    -1, which leads to an overflow in mallocarray() and thus a panic.
    
    Explicitly check that pfr_table_count() does not return an error.
    
    Reported-by:    syzbot+bd09d55d897d63d5f4f4@syzkaller.appspotmail.com
    Differential Revision:  https://reviews.freebsd.org/D24539

commit 98582ce381836a5873c7e18a595c4e4621f9cbd6
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Sun Apr 19 16:10:20 2020 +0000

    pf: Improve ioctl() input validation
    
    Both DIOCCHANGEADDR and DIOCADDADDR take a struct pf_pooladdr from
    userspace. They failed to validate the dyn pointer contained in its
    struct pf_addr_wrap member structure.
    
    This triggered assertion failures under fuzz testing in
    pfi_dynaddr_setup(). Happily the dyn variable was overruled there, but
    we should verify that it's set to NULL anyway.
    
    Reported-by:    syzbot+93e93150bc29f9b4b85f@syzkaller.appspotmail.com
    Differential Revision:  https://reviews.freebsd.org/D24431

commit 95324dc3f4d20b9ecced5e9be776962719a1888a
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Fri Apr 17 14:35:11 2020 +0000

    pf: Do not allow negative ps_len in DIOCGETSTATES
    
    Userspace may pass a negative ps_len value to us, which causes an
    assertion failure in malloc().
    Treat negative values as zero, i.e. return the required size.
    
    Reported-by:    syzbot+53370d9d0358ee2a059a@syzkaller.appspotmail.com
    Differential Revision:  https://reviews.freebsd.org/D24447

commit 643ce948780fdbb21bda30d44a7e234952279797
Author: Alexander V. Chernikov <melifaro@FreeBSD.org>
Date:   Wed Apr 15 13:00:48 2020 +0000

    Convert pf rtable checks to the new routing KPI.
    
    Switch uRPF to use specific fib(9)-provided uRPF.
    Switch MSS calculation to the latest fib(9) kpi.
    
    Differential Revision:  https://reviews.freebsd.org/D24386

commit 10b49b230259c0d357e19b21dfff92abc6142943
Author: Pawel Biernacki <kaktus@FreeBSD.org>
Date:   Fri Feb 21 16:23:00 2020 +0000

    Mark more nodes as CTLFLAG_MPSAFE or CTLFLAG_NEEDGIANT (6 of many)
    
    r357614 added CTLFLAG_NEEDGIANT to make it easier to find nodes that are
    still not MPSAFE (or already are but aren’t properly marked).
    Use it in preparation for a general review of all nodes.
    
    Mark all nodes in pf, pfsync and carp as MPSAFE.
    
    Differential Revision:  https://reviews.freebsd.org/D23634

commit e3e03bc159e39793621bebd16795b633bb960dd3
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Thu Jan 23 22:13:41 2020 +0000

    pf: Apply kif flags to new group members
    
    If we have a 'set skip on <ifgroup>' rule this flag it set on the group
    kif, but must also be set on all members. pfctl does this when the rules
    are set, but if groups are added afterwards we must also apply the flags
    to the new member. If not, new group members will not be skipped until
    the rules are reloaded.
    
    Reported by:    dvl@
    Differential Revision:  https://reviews.freebsd.org/D23254

commit ef1bd1e517bd39b400f03f3901b570e8a2bc7cc5
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Wed Jan 22 21:01:19 2020 +0000

    pfsync: Ensure we enter network epoch before calling ip_output
    
    As of r356974 calls to ip_output() require us to be in the network epoch.
    That wasn't the case for the calls done from pfsyncintr() and
    pfsync_defer_tmo().

commit cca2ea64e98205e917189ef331a18ddca2a0048c
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Sat Dec 14 02:06:07 2019 +0000

    pf: Make request_maxcount runtime adjustable
    
    There's no reason for this to be a tunable. It's perfectly safe to
    change this at runtime.
    
    Differential Revision:  https://reviews.freebsd.org/D22737

commit 492f3a312a2617899809285cdb6a32baf6836b13
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Sun Nov 24 13:53:36 2019 +0000

    pf: Add endline to all DPFPRINTF()
    
    DPFPRINTF() doesn't automatically add an endline, so be consistent and
    always add it.

commit a0d571cbef41c091cbde482bb9b07e7a9e39f60b
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Fri Oct 18 03:36:26 2019 +0000

    pf: Must be in NET_EPOCH to call icmp_error
    
    icmp_reflect(), called through icmp_error() requires us to be in NET_EPOCH.
    Failure to hold it leads to the following panic (with INVARIANTS):
    
      panic: Assertion in_epoch(net_epoch_preempt) failed at /usr/src/sys/netinet/ip_icmp.c:742
      cpuid = 2
      time = 1571233273
      KDB: stack backtrace:
      db_trace_self_wrapper() at db_trace_self_wrapper+0x2b/frame 0xfffffe00e0977920
      vpanic() at vpanic+0x17e/frame 0xfffffe00e0977980
      panic() at panic+0x43/frame 0xfffffe00e09779e0
      icmp_reflect() at icmp_reflect+0x625/frame 0xfffffe00e0977aa0
      icmp_error() at icmp_error+0x720/frame 0xfffffe00e0977b10
      pf_intr() at pf_intr+0xd5/frame 0xfffffe00e0977b50
      ithread_loop() at ithread_loop+0x1c6/frame 0xfffffe00e0977bb0
      fork_exit() at fork_exit+0x80/frame 0xfffffe00e0977bf0
      fork_trampoline() at fork_trampoline+0xe/frame 0xfffffe00e0977bf0
    
    Note that we now enter NET_EPOCH twice if we enter ip_output() from pf_intr(),
    but ip_output() will soon be converted to a function that requires epoch, so
    entering NET_EPOCH directly from pf_intr() makes more sense.
    
    Discussed with: glebius@

commit bff630d1dc4dbd6a5218bd7a336c97033ea49f1a
Author: Mark Johnston <markj@FreeBSD.org>
Date:   Sun Oct 13 00:08:17 2019 +0000

    Fix the build after r353458.
    
commit 6cc9ab8610ae1d5f6522b1679fbf639eb56fe650
Author: Mark Johnston <markj@FreeBSD.org>
Date:   Sat Oct 12 23:01:16 2019 +0000

    Add a missing include of opt_sctp.h.
    
commit b8a6e03fac922677455d8e0977831506cf8212e8
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Mon Oct 7 22:40:05 2019 +0000

    Widen NET_EPOCH coverage.
    
    When epoch(9) was introduced to network stack, it was basically
    dropped in place of existing locking, which was mutexes and
    rwlocks. For the sake of performance mutex covered areas were
    as small as possible, so became epoch covered areas.
    
    However, epoch doesn't introduce any contention, it just delays
    memory reclaim. So, there is no point to minimise epoch covered
    areas in sense of performance. Meanwhile entering/exiting epoch
    also has non-zero CPU usage, so doing this less often is a win.
    
    Not the least is also code maintainability. In the new paradigm
    we can assume that at any stage of processing a packet, we are
    inside network epoch. This makes coding both input and output
    path way easier.
    
    On output path we already enter epoch quite early - in the
    ip_output(), in the ip6_output().
    
    This patch does the same for the input path. All ISR processing,
    network related callouts, other ways of packet injection to the
    network stack shall be performed in net_epoch. Any leaf function
    that walks network configuration now asserts epoch.
    
    Tricky part is configuration code paths - ioctls, sysctls. They
    also call into leaf functions, so some need to be changed.
    
    This patch would introduce more epoch recursions (see EPOCH_TRACE)
    than we had before. They will be cleaned up separately, as several
    of them aren't trivial. Note, that unlike a lock recursion the
    epoch recursion is safe and just wastes a bit of resources.
    
    Differential Revision:  https://reviews.freebsd.org/D19111

commit c54ee572e54a6ee705fdd3047aa544e057b87f0f
Author: Ed Maste <emaste@FreeBSD.org>
Date:   Wed Jul 31 16:58:09 2019 +0000

    pf: zero (another) output buffer in pfioctl
    
    Avoid potential structure padding leak.  r350294 identified a leak via
    static analysis; although there's no report of a leak with the
    DIOCGETSRCNODES ioctl it's a good practice to zero the memory.
    
    Suggested by:   kp

commit f287767d4fdb246b3aa2b09049fe5b438cc0dd3c
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Mon Jul 29 13:21:31 2019 +0000

    pf: Remove partial RFC2675 support
    
    Remove our (very partial) support for RFC2675 Jumbograms. They're not
    used, not actually supported and not a good idea.
    
    Differential Revision:  https://reviews.freebsd.org/D21086

commit 532bc58628a6d4d63b928d64182c72acc2c2cc31
Author: Ed Maste <emaste@FreeBSD.org>
Date:   Wed Jul 24 16:51:14 2019 +0000

    pf: zero output buffer in pfioctl
    
    Avoid potential structure padding leak.
    
    Reported by:    Vlad Tsyrklevich <vlad@tsyrklevich.net>
    Security:       Potential kernel memory disclosure

commit 59854ecf556f455aeaecfd540474afc8c277defe
Author: Hans Petter Selasky <hselasky@FreeBSD.org>
Date:   Tue Jun 25 11:54:41 2019 +0000

    Convert all IPv4 and IPv6 multicast memberships into using a STAILQ
    instead of a linear array.
    
    The multicast memberships for the inpcb structure are protected by a
    non-sleepable lock, INP_WLOCK(), which needs to be dropped when
    calling the underlying possibly sleeping if_ioctl() method. When using
    a linear array to keep track of multicast memberships, the computed
    memory location of the multicast filter may suddenly change, due to
    concurrent insertion or removal of elements in the linear array. This
    in turn leads to various invalid memory access issues and kernel
    panics.
    
    To avoid this problem, put all multicast memberships on a STAILQ based
    list. Then the memory location of the IPv4 and IPv6 multicast filters
    become fixed during their lifetime and use after free and memory leak
    issues are easier to track, for example by: vmstat -m | grep multi
    
    All list manipulation has been factored into inline functions
    including some macros, to easily allow for a future hash-list
    implementation, if needed.
    
    This patch has been tested by pho@ .
    
    Differential Revision: https://reviews.freebsd.org/D20080

commit f89d2072795407d7c3afff865b988e021c1451a2
Author: Xin LI <delphij@FreeBSD.org>
Date:   Mon Jun 17 19:49:08 2019 +0000

    Separate kernel crc32() implementation to its own header (gsb_crc32.h) and
    rename the source to gsb_crc32.c.
    
    This is a prerequisite of unifying kernel zlib instances.
    
    PR:             229763
    Submitted by:   Yoshihiro Ota <ota at j.email.ne.jp>
    Differential Revision:  https://reviews.freebsd.org/D20193

commit d086d4136353acc9caf683d7bbbc6f04972dee2c
Author: Li-Wen Hsu <lwhsu@FreeBSD.org>
Date:   Sat May 25 23:58:09 2019 +0000

    Remove an uneeded indentation introduced in r223637 to silence gcc warnging
    
commit 1c75b9d2cddfc95b0f03c4db0ef93e3be4705c68
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Thu Apr 18 11:37:44 2019 +0000

    pf: No need to M_NOWAIT in DIOCRSETTFLAGS
    
    Now that we don't hold a lock during DIOCRSETTFLAGS memory allocation we can
    use M_WAITOK.
    
    Pointed out by: glebius@

commit f5e0d9fcb4f56952ddacc360784868ca8259c438
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Wed Apr 17 16:42:54 2019 +0000

    pf: Fix panic on invalid DIOCRSETTFLAGS
    
    If during DIOCRSETTFLAGS pfrio_buffer is NULL copyin() will fault, which we're
    not allowed to do with a lock held.
    We must count the number of entries in the table and release the lock during
    copyin(). Only then can we re-acquire the lock. Note that this is safe, because
    pfr_set_tflags() will check if the table and entries exist.
    
    This was discovered by a local syzcaller instance.
    
commit 6c1c6ae53768685c53955cd0d120a827479e7dc7
Author: Rodney W. Grimes <rgrimes@FreeBSD.org>
Date:   Thu Apr 4 19:01:13 2019 +0000

    Use IN_foo() macros from sys/netinet/in.h inplace of handcrafted code
    
    There are a few places that use hand crafted versions of the macros
    from sys/netinet/in.h making it difficult to actually alter the
    values in use by these macros.  Correct that by replacing handcrafted
    code with proper macro usage.
    
    Differential Revision:  https://reviews.freebsd.org/D19317

commit a8a16c71287e615fff06f05c92addbe8ffc2b9e0
Author: Conrad Meyer <cem@FreeBSD.org>
Date:   Thu Apr 4 01:02:50 2019 +0000

    Replace read_random(9) with more appropriate arc4rand(9) KPIs
    
    Differential Revision:  https://reviews.freebsd.org/D19760

commit a342f5772f630316f226ed782e644e36b8252c19
Author: Ed Maste <emaste@FreeBSD.org>
Date:   Tue Mar 26 21:20:42 2019 +0000

    pf: use UID_ROOT and GID_WHEEL named constants in make_dev
    
    No functional change but improves consistency and greppability of
    make_dev calls.
    
    Discussed with: kp

commit 64af73aadea59c22daf168ff742e8e9f03d2da78
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Thu Mar 21 08:09:52 2019 +0000

    pf: Ensure that IP addresses match in ICMP error packets
    
    States in pf(4) let ICMP and ICMP6 packets pass if they have a
    packet in their payload that matches an exiting connection.  It was
    not checked whether the outer ICMP packet has the same destination
    IP as the source IP of the inner protocol packet.  Enforce that
    these addresses match, to prevent ICMP packets that do not make
    sense.
    
    Reported by:    Nicolas Collignon, Corentin Bayet, Eloi Vanderbeken, Luca Moro at Synacktiv
    Obtained from:  OpenBSD
    Security:       CVE-2019-5598

commit 812483c46ec5f31a1d2dc3b41d67e5353cd76483
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Sat Mar 16 10:14:03 2019 +0000

    pf: Rename pfsync bucket lock
    
    Previously the main pfsync lock and the bucket locks shared the same name.
    This lead to spurious warnings from WITNESS like this:
    
        acquiring duplicate lock of same type: "pfsync"
         1st pfsync @ /usr/src/sys/netpfil/pf/if_pfsync.c:1402
         2nd pfsync @ /usr/src/sys/netpfil/pf/if_pfsync.c:1429
    
    It's perfectly okay to grab both the main pfsync lock and a bucket lock at the
    same time.
    
    We don't need different names for each bucket lock, because we should always
    only acquire a single one of those at a time.
    
commit 59048686917881a536c48c1cdb45f7029331f759
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Fri Mar 15 11:08:44 2019 +0000

    pf :Use counter(9) in pf tables.
    
    The counters of pf tables are updated outside the rule lock. That means state
    updates might overwrite each other. Furthermore allocation and
    freeing of counters happens outside the lock as well.
    
    Use counter(9) for the counters, and always allocate the counter table
    element, so that the race condition cannot happen any more.
    
    PR:             230619
    Submitted by:   Kajetan Staszkiewicz <vegeta@tuxpowered.net>
    Differential Revision:  https://reviews.freebsd.org/D19558

commit 1830dae3d3a9fbd5d27117b40bbe4a2242b98ae6
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Thu Mar 14 22:23:09 2019 +0000

    Make second argument of ip_divert(), that specifies packet direction a bool.
    This allows pf(4) to avoid including ipfw(4) private files.

commit f8e7fe32a4901489a8e06b0d302e2212a7d1f3a2
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Fri Mar 8 09:33:16 2019 +0000

    pf: Fix DIOCGETSRCNODES
    
    r343295 broke DIOCGETSRCNODES by failing to reset 'nr' after counting the
    number of source tracking nodes.
    This meant that we never copied the information to userspace, leading to '? ->
    ?' output from pfctl.
    
    PR:             236368

commit 6f4909de5feffdaca01782ad12938f6d95d633ae
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Fri Mar 1 07:37:45 2019 +0000

    pf: IPv6 fragments with malformed extension headers could be erroneously passed by pf or cause a panic
    
    We mistakenly used the extoff value from the last packet to patch the
    next_header field. If a malicious host sends a chain of fragmented packets
    where the first packet and the final packet have different lengths or number of
    extension headers we'd patch the next_header at the wrong offset.
    This can potentially lead to panics or rule bypasses.
    
    Security:       CVE-2019-5597
    Obtained from:  OpenBSD
    Reported by:    Corentin Bayet, Nicolas Collignon, Luca Moro at Synacktiv

commit 22c58991e36a0c6ed63875b8b9f5f79d35846f5a
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Sun Feb 24 17:23:55 2019 +0000

    pf: Small performance tweak
    
    Because fetching a counter is a rather expansive function we should use
    counter_u64_fetch() in pf_state_expires() only when necessary. A "rdr
    pass" rule should not cause more effort than separate "rdr" and "pass"
    rules. For rules with adaptive timeout values the call of
    counter_u64_fetch() should be accepted, but otherwise not.
    
    From the man page:
        The adaptive timeout values can be defined both globally and for
        each rule.  When used on a per-rule basis, the values relate to the
        number of states created by the rule, otherwise to the total number
        of states.
    
    This handling of adaptive timeouts is done in pf_state_expires().  The
    calculation needs three values: start, end and states.
    
    1. Normal rules "pass .." without adaptive setting meaning "start = 0"
       runs in the else-section and therefore takes "start" and "end" from
       the global default settings and sets "states" to pf_status.states
       (= total number of states).
    
    2. Special rules like
       "pass .. keep state (adaptive.start 500 adaptive.end 1000)"
       have start != 0, run in the if-section and take "start" and "end"
       from the rule and set "states" to the number of states created by
       their rule using counter_u64_fetch().
    
    Thats all ok, but there is a third case without special handling in the
    above code snippet:
    
    3. All "rdr/nat pass .." statements use together the pf_default_rule.
       Therefore we have "start != 0" in this case and we run the
       if-section but we better should run the else-section in this case and
       do not fetch the counter of the pf_default_rule but take the total
       number of states.
    
    Submitted by:   Andreas Longwitz <longwitz@incore.de>

commit d178fee632ca8cc891cf33737bb8ca94a2a9555e
Author: Patrick Kelsey <pkelsey@FreeBSD.org>
Date:   Mon Feb 11 05:39:38 2019 +0000

    Place pf_altq_get_nth_active() under the ALTQ ifdef
    
commit 8f2ac656906a7d498bd6784a09ceeed9f953e2ff
Author: Patrick Kelsey <pkelsey@FreeBSD.org>
Date:   Mon Feb 11 05:17:31 2019 +0000

    Reduce the time it takes the kernel to install a new PF config containing a large number of queues
    
    In general, the time savings come from separating the active and
    inactive queues lists into separate interface and non-interface queue
    lists, and changing the rule and queue tag management from list-based
    to hash-bashed.
    
    In HFSC, a linear scan of the class table during each queue destroy
    was also eliminated.
    
    There are now two new tunables to control the hash size used for each
    tag set (default for each is 128):
    
    net.pf.queue_tag_hashsize
    net.pf.rule_tag_hashsize
    
    Differential Revision:  https://reviews.freebsd.org/D19131

commit d38ca3297cc62ba3c98ce8a4ce96931a31aa0b40
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Sat Feb 2 05:49:05 2019 +0000

    Return PFIL_CONSUMED if packet was consumed.  While here gather all
    the identical endings of pf_check_*() into single function.
    
    PR:             235411

commit b252313f0b3a4659c02e61d3a0bba471c89bcfa9
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Thu Jan 31 23:01:03 2019 +0000

    New pfil(9) KPI together with newborn pfil API and control utility.
    
    The KPI have been reviewed and cleansed of features that were planned
    back 20 years ago and never implemented.  The pfil(9) internals have
    been made opaque to protocols with only returned types and function
    declarations exposed. The KPI is made more strict, but at the same time
    more extensible, as kernel uses same command structures that userland
    ioctl uses.
    
    In nutshell [KA]PI is about declaring filtering points, declaring
    filters and linking and unlinking them together.
    
    New [KA]PI makes it possible to reconfigure pfil(9) configuration:
    change order of hooks, rehook filter from one filtering point to a
    different one, disconnect a hook on output leaving it on input only,
    prepend/append a filter to existing list of filters.
    
    Now it possible for a single packet filter to provide multiple rulesets
    that may be linked to different points. Think of per-interface ACLs in
    Cisco or Juniper. None of existing packet filters yet support that,
    however limited usage is already possible, e.g. default ruleset can
    be moved to single interface, as soon as interface would pride their
    filtering points.
    
    Another future feature is possiblity to create pfil heads, that provide
    not an mbuf pointer but just a memory pointer with length. That would
    allow filtering at very early stages of a packet lifecycle, e.g. when
    packet has just been received by a NIC and no mbuf was yet allocated.
    
    Differential Revision:  https://reviews.freebsd.org/D18951

commit 59099cd3853da12a4868388d32d1e5578cafa1c5
Author: Patrick Kelsey <pkelsey@FreeBSD.org>
Date:   Mon Jan 28 20:26:09 2019 +0000

    Don't re-evaluate ALTQ kernel configuration due to events on non-ALTQ interfaces
    
    Re-evaluating the ALTQ kernel configuration can be expensive,
    particularly when there are a large number (hundreds or thousands) of
    queues, and is wholly unnecessary in response to events on interfaces
    that do not support ALTQ as such interfaces cannot be part of an ALTQ
    configuration.
    
    Differential Revision:  https://reviews.freebsd.org/D18918

commit d9d146e67bd40f8926b677435fc1d4fc7ffa5f5f
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Fri Jan 25 01:06:06 2019 +0000

    pf: Fix use-after-free of counters
    
    When cleaning up a vnet we free the counters in V_pf_default_rule and
    V_pf_status from shutdown_pf(), but we can still use them later, for example
    through pf_purge_expired_src_nodes().
    
    Free them as the very last operation, as they rely on nothing else themselves.
    
    PR:             235097

commit 180b0dcbbb8489a335b907f83aac450924f293a8
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Tue Jan 22 02:13:33 2019 +0000

    pf: Validate psn_len in DIOCGETSRCNODES
    
    psn_len is controlled by user space, but we allocated memory based on it.
    Check how much memory we might need at most (i.e. how many source nodes we
    have) and limit the allocation to that.
    
    Reported by:    markj

commit 6a8ee0f715769b71dacafda3741d80331e906c7e
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Fri Jan 18 08:19:54 2019 +0000

    pf: fix pfsync breaking carp
    
    Fix missing initialisation of sc_flags into a valid sync state on clone which
    breaks carp in pfsync.
    
    This regression was introduce by r342051.
    
    PR:             235005
    Submitted by:   smh@FreeBSD.org
    Differential Revision:  https://reviews.freebsd.org/D18882

commit 032dff662c7559ea5ae4f837587443ab9e59d257
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Tue Jan 15 08:59:51 2019 +0000

    pf: silence a runtime warning
    
    Sometimes, for negated tables, pf can log 'pfr_update_stats: assertion failed'.
    This warning does not clarify anything for users, so silence it, just as
    OpenBSD has.
    
    PR:             234874

commit a68cc388790587b330a01380a0c1864fb9ff3f1e
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Wed Jan 9 01:11:19 2019 +0000

    Mechanical cleanup of epoch(9) usage in network stack.
    
    - Remove macros that covertly create epoch_tracker on thread stack. Such
      macros a quite unsafe, e.g. will produce a buggy code if same macro is
      used in embedded scopes. Explicitly declare epoch_tracker always.
    
    - Unmask interface list IFNET_RLOCK_NOSLEEP(), interface address list
      IF_ADDR_RLOCK() and interface AF specific data IF_AFDATA_RLOCK() read
      locking macros to what they actually are - the net_epoch.
      Keeping them as is is very misleading. They all are named FOO_RLOCK(),
      while they no longer have lock semantics. Now they allow recursion and
      what's more important they now no longer guarantee protection against
      their companion WLOCK macros.
      Note: INP_HASH_RLOCK() has same problems, but not touched by this commit.
    
    This is non functional mechanical change. The only functionally changed
    functions are ni6_addrs() and ni6_store_addrs(), where we no longer enter
    epoch recursively.
    
    Discussed with: jtl, gallatin

commit 336683f24f08303aa9b59eb207f22b1122cd720a
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Wed Dec 12 20:15:06 2018 +0000

    pf: Fix endless loop on NAT exhaustion with sticky-address
    
    When we try to find a source port in pf_get_sport() it's possible that
    all available source ports will be in use. In that case we call
    pf_map_addr() to try to find a new source IP to try from. If there are
    no more available source IPs pf_map_addr() will return 1 and we stop
    trying.
    
    However, if sticky-address is set we'll always return the same IP
    address, even if we've already tried that one.
    We need to check the supplied address, because if that's the one we'd
    set it means pf_get_sport() has already tried it, and we should error
    out rather than keep trying.
    
    PR:             233867
    Differential Revision:  https://reviews.freebsd.org/D18483

commit 5b551954ab0c94bd17a4405183a5a3dfd4370751
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Tue Dec 11 21:44:39 2018 +0000

    pf: Prevent integer overflow in PF when calculating the adaptive timeout.
    
    Mainly states of established TCP connections would be affected resulting
    in immediate state removal once the number of states is bigger than
    adaptive.start.  Disabling adaptive timeouts is a workaround to avoid this bug.
    Issue found and initial diff by Mathieu Blanc (mathieu.blanc at cea dot fr)
    
    Reported by: Andreas Longwitz <longwitz AT incore.de>
    Obtained from:  OpenBSD

> 54941f8c23af5f3054ab65b0af68b4bda4e509e4

commit 4fc65bcbe3fb720a298c795628126bbae9457e5a
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Thu Dec 6 19:27:15 2018 +0000

    pfsync: Performance improvement
    
    pfsync code is called for every new state, state update and state
    deletion in pf. While pf itself can operate on multiple states at the
    same time (on different cores, assuming the states hash to a different
    hashrow), pfsync only had a single lock.
    This greatly reduced throughput on multicore systems.
    
    Address this by splitting the pfsync queues into buckets, based on the
    state id. This ensures that updates for a given connection always end up
    in the same bucket, which allows pfsync to still collapse multiple
    updates into one, while allowing multiple cores to proceed at the same
    time.
    
    The number of buckets is tunable, but defaults to 2 x number of cpus.
    Benchmarking has shown improvement, depending on hardware and setup, from ~30%
    to ~100%.
    
    Differential Revision:  https://reviews.freebsd.org/D18373

commit 2b0a4ffadb1e46aa6a249900ddabd41f963432c1
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Thu Dec 6 18:58:54 2018 +0000

    pf: add a comment describing why do we call pf_map_addr again if port
    selection process fails
    
    Obtained from:  OpenBSD

commit b2e0b24f76066fc52abe4330772c41996eca8bf8
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Sat Dec 1 09:58:21 2018 +0000

    pf: Fix panic on overlapping interface names
    
    In rare situations[*] it's possible for two different interfaces to have
    the same name. This confuses pf, because kifs are indexed by name (which
    is assumed to be unique). As a result we can end up trying to
    if_rele(NULL), which panics.
    
    Explicitly checking the ifp pointer before if_rele() prevents the panic.
    Note pf will likely behave in unexpected ways on the the overlapping
    interfaces.
    
    [*] Insert an interface in a vnet jail. Rename it to an interface which
    exists on the host. Remove the jail. There are now two interfaces with
    the same name in the host.

commit 87e4ca37d50259766571236991879c402e20a4fa
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Thu Nov 8 21:54:40 2018 +0000

    pf: Prevent tables referenced by rules in anchors from getting disabled.
    
    PR:             183198
    Obtained from:  OpenBSD

commit 58ef854f8b05508f41aff3bdaf1564c8dd4c1d4f
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Fri Nov 2 19:23:50 2018 +0000

    pf: Fix build if INVARIANTS is not set
    
    r340061 included a number of assertions pf_frent_remove(), but these assertions
    were the only use of the 'prev' variable. As a result builds without
    INVARIANTS had an unused variable, and failed.
    
    Reported by:    vangyzen@

commit 14624ab5822fc0ae5734ea4cbeda44683cacb481
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Fri Nov 2 17:05:40 2018 +0000

    pf: Keep a reference to struct ifnets we're using
    
    Ensure that the struct ifnet we use can't go away until we're done with
    it.

commit dde6e1fecb6cafe1b23cccb519cf9c2cd48276cd
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Fri Nov 2 17:03:53 2018 +0000

    pfsync: Add missing unlock
    
    If we fail to set up the multicast entry for pfsync and return an error
    we must release the pfsync lock first.
    
    Differential Revision:  https://reviews.freebsd.org/D17506

commit 04fe85f06867cc660d711625b6805d06b7ec7f8a
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Fri Nov 2 17:01:18 2018 +0000

    pfsync: Allow module to be unloaded
    
    Differential Revision:  https://reviews.freebsd.org/D17505

commit fbbf436d56a307944c0cd0097492ddcb70b57490
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Fri Nov 2 16:57:23 2018 +0000

    pfsync: Handle syncdev going away
    
    If the syncdev is removed we no longer need to clean up the multicast
    entry we've got set up for that device.
    
    Pass the ifnet detach event through pf to pfsync, and remove our
    multicast handle, and mark us as no longer having a syncdev.
    
    Note that this callback is always installed, even if the pfsync
    interface is disabled (and thus it's not a per-vnet callback pointer).
    
    Differential Revision:  https://reviews.freebsd.org/D17502

commit 26549dfcad9a017dbab72bb306c65ce99bace946
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Fri Nov 2 16:53:15 2018 +0000

    pfsync: Ensure uninit is done before pf
    
    pfsync touches pf memory (for pf_state and the pfsync callback
    pointers), not the other way around. We need to ensure that pfsync is
    torn down before pf.
    
    Differential Revision:  https://reviews.freebsd.org/D17501

commit 5f6cf24e2da6f22e5aeea2bc7ae83da5d01682c4
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Fri Nov 2 16:47:07 2018 +0000

    pfsync: Make pfsync callbacks per-vnet
    
    The callbacks are installed and removed depending on the state of the
    pfsync device, which is per-vnet. The callbacks must also be per-vnet.
    
    Differential Revision:  https://reviews.freebsd.org/D17499

commit 790194cd472b1d17e08940e9f839322abcf14ec9
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Fri Nov 2 15:32:04 2018 +0000

    pf: Limit the fragment entry queue length to 64 per bucket.
    
    So we have a global limit of 1024 fragments, but it is fine grained to
    the region of the packet.  Smaller packets may have less fragments.
    This costs another 16 bytes of memory per reassembly and devides the
    worst case for searching by 8.
    
    Obtained from:  OpenBSD
    Differential Revision:  https://reviews.freebsd.org/D17734

commit fd2ea405e601bd5e240153c5de0f7c264946ce6f
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Fri Nov 2 15:26:51 2018 +0000

    pf: Split the fragment reassembly queue into smaller parts
    
    Remember 16 entry points based on the fragment offset.  Instead of
    a worst case of 8196 list traversals we now check a maximum of 512
    list entries or 16 array elements.
    
    Obtained from:  OpenBSD
    Differential Revision:  https://reviews.freebsd.org/D17733

commit 2b1c354ee6fb075953d2c3e81c8221f4115ce981
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Fri Nov 2 15:23:57 2018 +0000

    pf: Count holes rather than fragments for reassembly
    
    Avoid traversing the list of fragment entris to check whether the
    pf(4) reassembly is complete.  Instead count the holes that are
    created when inserting a fragment.  If there are no holes left, the
    fragments are continuous.
    
    Obtained from:  OpenBSD
    Differential Revision:  https://reviews.freebsd.org/D17732

commit 19a22ae31328d9a960732a0904116c1b5566351b
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Fri Nov 2 15:01:59 2018 +0000

    Revert "pf: Limit the maximum number of fragments per packet"
    
    This reverts commit r337969.
    We'll handle this the OpenBSD way, in upcoming commits.

commit 99eb00558a73186924b3dce77c96687bb0cb6b48
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Sun Oct 28 05:32:50 2018 +0000

    pf: Make ':0' ignore link-local v6 addresses too
    
    When users mark an interface to not use aliases they likely also don't
    want to use the link-local v6 address there.
    
    PR:             201695
    Submitted by:   Russell Yount <Russell.Yount AT gmail.com>
    Differential Revision:  https://reviews.freebsd.org/D17633

commit 13d640d3766055d6f58e829495ae451d3d7041e8
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Wed Oct 24 00:19:44 2018 +0000

    pf: Fix copy/paste error in IPv6 address rewriting
    
    We checked the destination address, but replaced the source address. This was
    fixed in OpenBSD as part of their NAT rework, which we don't want to import
    right now.
    
    CID:            1009561

commit 73c9014569c0e5f9f7a70359f4cb0ad8c281bdc7
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Tue Oct 23 23:15:44 2018 +0000

    pf: ifp can never be NULL in pfi_ifaddr_event()
    
    There's no point in the NULL check for ifp, because we'll already have
    dereferenced it by then. Moreover, the event will always have a valid ifp.
    
    Replace the late check with an early assertion.
    
    CID:            1357338

commit 1563a27e1fde8615d1ef632bd23fc5bd2f38b628
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Sat Oct 20 18:37:21 2018 +0000

    pf synproxy will do the 3WHS on behalf of the target machine, and once
    the 3WHS is completed, establish the backend connection. The trigger
    for "3WHS completed" is the reception of the first ACK. However, we
    should not proceed if that ACK also has RST or FIN set.
    
    PR:             197484
    Obtained from:  OpenBSD

commit 032d3aaa9607e1010d5ae766ea55d3474c434395
Author: John-Mark Gurney <jmg@FreeBSD.org>
Date:   Sun Sep 16 00:44:23 2018 +0000

    Significantly improve pf purge cpu usage by only taking locks
    when there is work to do.  This reduces CPU consumption to one
    third on systems.  This will help keep the thread CPU usage under
    control now that the default hash size has increased.
    
    Differential Revision:  https://reviews.freebsd.org/D17097

commit 249cc75fd14eac511a102b657646f98229c9dcc3
Author: Patrick Kelsey <pkelsey@FreeBSD.org>
Date:   Wed Aug 22 19:38:48 2018 +0000

    Extended pf(4) ioctl interface and pfctl(8) to allow bandwidths of
    2^32 bps or greater to be used.  Prior to this, bandwidth parameters
    would simply wrap at the 2^32 boundary.  The computations in the HFSC
    scheduler and token bucket regulator have been modified to operate
    correctly up to at least 100 Gbps.  No other algorithms have been
    examined or modified for correct operation above 2^32 bps (some may
    have existing computation resolution or overflow issues at rates below
    that threshold).  pfctl(8) will now limit non-HFSC bandwidth
    parameters to 2^32 - 1 before passing them to the kernel.
    
    The extensions to the pf(4) ioctl interface have been made in a
    backwards-compatible way by versioning affected data structures,
    supporting all versions in the kernel, and implementing macros that
    will cause existing code that consumes that interface to use version 0
    without source modifications.  If version 0 consumers of the interface
    are used against a new kernel that has had bandwidth parameters of
    2^32 or greater configured by updated tools, such bandwidth parameters
    will be reported as 2^32 - 1 bps by those old consumers.
    
    All in-tree consumers of the pf(4) interface have been updated.  To
    update out-of-tree consumers to the latest version of the interface,
    define PFIOC_USE_LATEST ahead of any includes and use the code of
    pfctl(8) as a guide for the ioctls of interest.
    
    PR:     211730
    Differential Revision:  https://reviews.freebsd.org/D16782

commit d47023236cf5553a60d44993508a6f58dce13371
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Fri Aug 17 15:00:10 2018 +0000

    pf: Limit the maximum number of fragments per packet
    
    Similar to the network stack issue fixed in r337782 pf did not limit the number
    of fragments per packet, which could be exploited to generate high CPU loads
    with a crafted series of packets.
    
    Limit each packet to no more than 64 fragments. This should be sufficient on
    typical networks to allow maximum-sized IP frames.
    
    This addresses the issue for both IPv4 and IPv6.
    
    Security:       CVE-2018-5391

commit e9ddca4a40c9cf37e1cb1b3954034503ca248def
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Sat Aug 11 16:37:55 2018 +0000

    pf: Take the IF_ADDR_RLOCK() when iterating over the group list
    
    We did do this elsewhere in pf, but the lock was missing here.
    
commit 33b242b5335698c979b0ced7e9c299dc48b866e5
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Sat Aug 11 16:34:30 2018 +0000

    pf: Fix 'set skip on' for groups
    
    The pfi_skip_if() function sometimes caused skipping of groups to work,
    if the members of the group used the groupname as a name prefix.
    This is often the case, e.g. group lo usually contains lo0, lo1, ...,
    but not always.
    
    Rather than relying on the name explicitly check for group memberships.
    
    Obtained from:  OpenBSD (pf_if.c,v 1.62, pf_if.c,v 1.63)

commit 5f901c92a8d99227901f548f0b755b31d9dd8525
Author: Andrew Turner <andrew@FreeBSD.org>
Date:   Tue Jul 24 16:35:52 2018 +0000

    Use the new VNET_DEFINE_STATIC macro when we are defining static VNET
    variables.
    
    Differential Revision:  https://reviews.freebsd.org/D16147

commit 32ece669c29aab0c8736d026f3d45d6742b85f24
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Sat Jul 14 10:14:59 2018 +0000

    pf: Fix synproxy
    
    Synproxy was accidentally broken by r335569. The 'return (action)' must be
    executed for every non-PF_PASS result, but the error packet (TCP RST or ICMP
    error) should only be sent if the packet was dropped (i.e. PF_DROP) and the
    return flag is set.
    
    PR:             229477
    Submitted by:   Andre Albsmeier <mail AT fbsd.e4m.org>

commit 3e603d1ffaddbac3f1c110efbc95d267d7194cb1
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Sat Jul 14 09:11:32 2018 +0000

    pf: Fix panic on vnet jail shutdown with synproxy
    
    When shutting down a vnet jail pf_shutdown() clears the remaining states, which
    through pf_clear_states() calls pf_unlink_state().
    For synproxy states pf_unlink_state() will send a TCP RST, which eventually
    tries to schedule the pf swi in pf_send(). This means we can't remove the
    software interrupt until after pf_shutdown().
    
commit cc535c95ca97a44aaf74f7ff58cd2b4152f2f29b
Author: Will Andrews <will@FreeBSD.org>
Date:   Wed Jul 4 03:36:46 2018 +0000

    Revert r335833.
    
    Several third-parties use at least some of these ioctls.  While it would be
    better for regression testing if they were used in base (or at least in the
    test suite), it's currently not worth the trouble to push through removal.
    
    Submitted by:   antoine, markj

commit c1887e9f09e94518a8cfc2bcaaf08c5cd7c27a09
Author: Will Andrews <will@FreeBSD.org>
Date:   Sun Jul 1 01:16:03 2018 +0000

    pf: remove unused ioctls.
    
    Several ioctls are unused in pf, in the sense that no base utility
    references them.  Additionally, a cursory review of pf-based ports
    indicates they're not used elsewhere either.  Some of them have been
    unused since the original import.  As far as I can tell, they're also
    unused in OpenBSD.  Finally, removing this code removes the need for
    future pf work to take them into account.
    
    Differential Revision:  https://reviews.freebsd.org/D16076

commit de210decd14b0ce9f1aaf1b84bdafab9471bf8c2
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Sat Jun 30 12:51:08 2018 +0000

    pfsync: Fix state sync during initial bulk update
    
    States learned via pfsync from a peer with the same ruleset checksum were not
    getting assigned to rules like they should because pfsync_in_upd() wasn't
    passing the PFSYNC_SI_CKSUM flag along to pfsync_state_import.
    
    PR:             229092
    Submitted by:   Kajetan Staszkiewicz <vegeta tuxpowered.net>
    Obtained from:  OpenBSD

commit 150182e309ff781a0c71519ea6da708d999d5ccb
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Fri Jun 22 21:59:30 2018 +0000

    pf: Support "return" statements in passing rules when they fail.
    
    Normally pf rules are expected to do one of two things: pass the traffic or
    block it. Blocking can be silent - "drop", or loud - "return", "return-rst",
    "return-icmp". Yet there is a 3rd category of traffic passing through pf:
    Packets matching a "pass" rule but when applying the rule fails. This happens
    when redirection table is empty or when src node or state creation fails. Such
    rules always fail silently without notifying the sender.
    
    Allow users to configure this behaviour too, so that pf returns an error packet
    in these cases.
    
    PR:             226850
    Submitted by:   Kajetan Staszkiewicz <vegeta tuxpowered.net>

commit 0b799353d850dfa7f0ffb6879b7f562ae468a1b2
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Sat Jun 9 14:17:06 2018 +0000

    pf: Fix deadlock with route-to
    
    If a locally generated packet is routed (with route-to/reply-to/dup-to) out of
    a different interface it's passed through the firewall again. This meant we
    lost the inp pointer and if we required the pointer (e.g. for user ID matching)
    we'd deadlock trying to acquire an inp lock we've already got.
    
    Pass the inp pointer along with pf_route()/pf_route6().
    
    PR:             228782

commit 455969d30561b38fbdccc2207fbec04ffb8b6fe1
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Wed May 30 07:11:33 2018 +0000

    pf: Replace rwlock on PF_RULES_LOCK with rmlock
    
    Given that PF_RULES_LOCK is a mostly read lock, replace the rwlock with rmlock.
    This change improves packet processing rate in high pps environments.
    Benchmarking by olivier@ shows a 65% improvement in pps.
    
    While here, also eliminate all appearances of "sys/rwlock.h" includes since it
    is not used anymore.
    
    Submitted by:   farrokhi@
    Differential Revision:  https://reviews.freebsd.org/D15502

commit 4f6c66cc9c75c857341b6ca6ca92d4808be8d3b5
Author: Matt Macy <mmacy@FreeBSD.org>
Date:   Wed May 23 21:02:14 2018 +0000

    UDP: further performance improvements on tx
    
    Cumulative throughput while running 64
      netperf -H $DUT -t UDP_STREAM -- -m 1
    on a 2x8x2 SKL went from 1.1Mpps to 2.5Mpps
    
    Single stream throughput increases from 910kpps to 1.18Mpps
    
    Baseline:
    https://people.freebsd.org/~mmacy/2018.05.11/udpsender2.svg
    
    - Protect read access to global ifnet list with epoch
    https://people.freebsd.org/~mmacy/2018.05.11/udpsender3.svg
    
    - Protect short lived ifaddr references with epoch
    https://people.freebsd.org/~mmacy/2018.05.11/udpsender4.svg
    
    - Convert if_afdata read lock path to epoch
    https://people.freebsd.org/~mmacy/2018.05.11/udpsender5.svg
    
    A fix for the inpcbhash contention is pending sufficient time
    on a canary at LLNW.
    
    Differential Revision:  https://reviews.freebsd.org/D15409

commit d7c5a620e2b99e914f1770abde956cf0d0a970b7
Author: Matt Macy <mmacy@FreeBSD.org>
Date:   Fri May 18 20:13:34 2018 +0000

    ifnet: Replace if_addr_lock rwlock with epoch + mutex
    
    Run on LLNW canaries and tested by pho@
    
    gallatin:
    Using a 14-core, 28-HTT single socket E5-2697 v3 with a 40GbE MLX5
    based ConnectX 4-LX NIC, I see an almost 12% improvement in received
    packet rate, and a larger improvement in bytes delivered all the way
    to userspace.
    
    When the host receiving 64 streams of netperf -H $DUT -t UDP_STREAM -- -m 1,
    I see, using nstat -I mce0 1 before the patch:
    
    InMpps OMpps  InGbs  OGbs err TCP Est %CPU syscalls csw     irq GBfree
    4.98   0.00   4.42   0.00 4235592     33   83.80 4720653 2149771   1235 247.32
    4.73   0.00   4.20   0.00 4025260     33   82.99 4724900 2139833   1204 247.32
    4.72   0.00   4.20   0.00 4035252     33   82.14 4719162 2132023   1264 247.32
    4.71   0.00   4.21   0.00 4073206     33   83.68 4744973 2123317   1347 247.32
    4.72   0.00   4.21   0.00 4061118     33   80.82 4713615 2188091   1490 247.32
    4.72   0.00   4.21   0.00 4051675     33   85.29 4727399 2109011   1205 247.32
    4.73   0.00   4.21   0.00 4039056     33   84.65 4724735 2102603   1053 247.32
    
    After the patch
    
    InMpps OMpps  InGbs  OGbs err TCP Est %CPU syscalls csw     irq GBfree
    5.43   0.00   4.20   0.00 3313143     33   84.96 5434214 1900162   2656 245.51
    5.43   0.00   4.20   0.00 3308527     33   85.24 5439695 1809382   2521 245.51
    5.42   0.00   4.19   0.00 3316778     33   87.54 5416028 1805835   2256 245.51
    5.42   0.00   4.19   0.00 3317673     33   90.44 5426044 1763056   2332 245.51
    5.42   0.00   4.19   0.00 3314839     33   88.11 5435732 1792218   2499 245.52
    5.44   0.00   4.19   0.00 3293228     33   91.84 5426301 1668597   2121 245.52
    
    Similarly, netperf reports 230Mb/s before the patch, and 270Mb/s after the patch
    
    Differential Revision:  https://reviews.freebsd.org/D15366

commit 2695c9c1096d885a2446906a5dbd8681a4889055
Author: Sean Bruno <sbruno@FreeBSD.org>
Date:   Wed May 2 15:59:15 2018 +0000

    Retire ixgb(4)
    
    This driver was for an early and uncommon legacy PCI 10GbE for a single
    ASIC, Intel 82597EX. Intel quickly shifted to the long lived ixgbe family.
    
    Submitted by:   kbowling
    Differential Revision:  https://reviews.freebsd.org/D15234

commit c41420d5dc7cef4f643dec5f676bb990f2c6e589
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Wed Apr 11 11:43:12 2018 +0000

    pf: limit ioctl to a reasonable and tuneable number of elements
    
    pf ioctls frequently take a variable number of elements as argument. This can
    potentially allow users to request very large allocations.  These will fail,
    but even a failing M_NOWAIT might tie up resources and result in concurrent
    M_WAITOK allocations entering vm_wait and inducing reclamation of caches.
    
    Limit these ioctls to what should be a reasonable value, but allow users to
    tune it should they need to.
    
    Differential Revision:  https://reviews.freebsd.org/D15018

commit 1a125a2f7f4f322fbf263bba5498d7a261ae93b4
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Fri Apr 6 19:36:35 2018 +0000

    pf: Improve ioctl validation
    
    Ensure that multiplications for memory allocations cannot overflow, and
    that we'll not try to allocate M_WAITOK for potentially overly large
    allocations.
    
commit 02214ac854283f0564bdb989e7676ba3938a6c50
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Fri Apr 6 19:20:45 2018 +0000

    pf: Improve ioctl validation for DIOCIGETIFACES and DIOCXCOMMIT
    
    These ioctls can process a number of items at a time, which puts us at
    risk of overflow in mallocarray() and of impossibly large allocations
    even if we don't overflow.
    
    There's no obvious limit to the request size for these, so we limit the
    requests to something which won't overflow. Change the memory allocation
    to M_NOWAIT so excessive requests will fail rather than stall forever.
    
commit adfe2f6aff00c658f9f2d4b29cc006e058570dcf
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Fri Apr 6 15:54:30 2018 +0000

    pf: Improve ioctl validation for DIOCRGETTABLES, DIOCRGETTSTATS, DIOCRCLRTSTATS and DIOCRSETTFLAGS
    
    These ioctls can process a number of items at a time, which puts us at
    risk of overflow in mallocarray() and of impossibly large allocations
    even if we don't overflow.
    
    Limit the allocation to required size (or the user allocation, if that's
    smaller). That does mean we need to do the allocation with the rules
    lock held (so the number doesn't change while we're doing this), so it
    can't M_WAITOK.
    
commit 8748b499c11609953acd3fc209781c7359e2f594
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Fri Apr 6 15:01:45 2018 +0000

    pf: Improve ioctl validation for DIOCRADDTABLES and DIOCRDELTABLES
    
    The DIOCRADDTABLES and DIOCRDELTABLES ioctls can process a number of
    tables at a time, and as such try to allocate <number of tables> *
    sizeof(struct pfr_table). This multiplication can overflow. Thanks to
    mallocarray() this is not exploitable, but an overflow does panic the
    system.
    
    Arbitrarily limit this to 65535 tables. pfctl only ever processes one
    table at a time, so it presents no issues there.
    
commit 541d96aaaf46cde0f4247c226ed29d635b1915c4
Author: Brooks Davis <brooks@FreeBSD.org>
Date:   Fri Mar 30 18:50:13 2018 +0000

    Use an accessor function to access ifr_data.
    
    This fixes 32-bit compat (no ioctl command defintions are required
    as struct ifreq is the same size).  This is believed to be sufficent to
    fully support ifconfig on 32-bit systems.
    
    Obtained from:  CheriBSD
    Differential Revision:  https://reviews.freebsd.org/D14900

commit effaab8861d675090f859b6e49d75381ec3ba6ca
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Fri Mar 23 16:56:44 2018 +0000

    netpfil: Introduce PFIL_FWD flag
    
    Forwarded packets passed through PFIL_OUT, which made it difficult for
    firewalls to figure out if they were forwarding or producing packets. This in
    turn is an issue for pf for IPv6 fragment handling: it needs to call
    ip6_output() or ip6_forward() to handle the fragments. Figuring out which was
    difficult (and until now, incorrect).
    Having pfil distinguish the two removes an ugly piece of code from pf.
    
    Introduce a new variant of the netpfil callbacks with a flags variable, which
    has PFIL_FWD set for forwarded packets. This allows pf to reliably work out if
    a packet is forwarded.
    
    Differential Revision:  https://reviews.freebsd.org/D13715

commit b4b8fa3387339468d65278566e31966504a6a75c
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Mon Mar 19 21:13:25 2018 +0000

    pf: Fix memory leak in DIOCRADDTABLES
    
    If a user attempts to add two tables with the same name the duplicate table
    will not be added, but we forgot to free the duplicate table, leaking memory.
    Ensure we free the duplicate table in the error path.
    
    Reported by:    Coverity
    CID:            1382111

commit bf56a3fe47ef43441c098ef11d553fb5ce78673a
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Sun Feb 25 08:56:44 2018 +0000

    pf: Cope with overly large net.pf.states_hashsize
    
    If the user configures a states_hashsize or source_nodes_hashsize value we may
    not have enough memory to allocate this. This used to lock up pf, because these
    allocations used M_WAITOK.
    
    Cope with this by attempting the allocation with M_NOWAIT and falling back to
    the default sizes (with M_WAITOK) if these fail.
    
    PR:             209475
    Submitted by:   Fehmi Noyan Isi <fnoyanisi AT yahoo.com>
    Differential Revision:  https://reviews.freebsd.org/D14367

commit c201b5644dd703cc8cadd2fd55b55c21e7c267a0
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Thu Feb 1 07:52:06 2018 +0000

    pf: Avoid warning without INVARIANTS
    
    When INVARIANTS is not set the 'last' variable is not used, which can generate
    compiler warnings.
    If this invariant is ever violated it'd result in a KASSERT failure in
    refcount_release(), so this one is not strictly required.

commit 6701c43213eee0b9d41da2281e69f2f5cec9fa3c
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Wed Jan 24 04:29:16 2018 +0000

    pf: States have at least two references
    
    pf_unlink_state() releases a reference to the state without checking if
    this is the last reference. It can't be, because pf_state_insert()
    initialises it to two. KASSERT() that this is always the case.
    
    CID:    1347140

commit 6273ba66f26debbfe26f1424f2f44631ad709ecc
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Sun Jan 7 13:35:15 2018 +0000

    pf: Avoid integer overflow issues by using mallocarray() iso. malloc()
    
    pfioctl() handles several ioctl that takes variable length input, these
    include:
    - DIOCRADDTABLES
    - DIOCRDELTABLES
    - DIOCRGETTABLES
    - DIOCRGETTSTATS
    - DIOCRCLRTSTATS
    - DIOCRSETTFLAGS
    
    All of them take a pfioc_table struct as input from userland. One of
    its elements (pfrio_size) is used in a buffer length calculation.
    The calculation contains an integer overflow which if triggered can lead
    to out of bound reads and writes later on.
    
    Reported by:    Ilja Van Sprundel <ivansprundel@ioactive.com>

commit 9d671fee3aa196422b291e560624d0e8692df4cc
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Sun Dec 31 16:18:13 2017 +0000

    pf: Allow the module to be unloaded
    
    pf can now be safely unloaded. Most of this code is exercised on vnet
    jail shutdown.
    
    Don't block unloading.

commit 5d0020d6d7918406f6c1d8dfa74e11bfaab6e8e7
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Sun Dec 31 10:01:31 2017 +0000

    pf: Clean all fragments on shutdown
    
    When pf is unloaded, or a vnet jail using pf is stopped we need to
    ensure we clean up all fragments, not just the expired ones.

commit 6e778a7efdc0e804471750157f6bacd1ef7d1580
Author: Pedro F. Giffuni <pfg@FreeBSD.org>
Date:   Fri Dec 8 15:57:29 2017 +0000

    SPDX: license IDs for some ISC-related files.

commit 8820ecc040f2b2392de20f32ee40cb5f3b90d0d3
Author: Pedro F. Giffuni <pfg@FreeBSD.org>
Date:   Thu Nov 30 15:10:11 2017 +0000

    SPDX: Fix some cases wrongly attributed to MIT.
    
    In the cases of BSD-style license variants without clauses, use 0BSD for
    the time being in lack of a better description.

commit fe267a559009cbf34f9341666fe4d88a92c02d5e
Author: Pedro F. Giffuni <pfg@FreeBSD.org>
Date:   Mon Nov 27 15:23:17 2017 +0000

    sys: general adoption of SPDX licensing ID tags.
    
    Mainly focus on files that use BSD 2-Clause license, however the tool I
    was using misidentified many licenses so this was mostly a manual - error
    prone - task.
    
    The Software Package Data Exchange (SPDX) group provides a specification
    to make it easier for automated tools to detect and summarize well known
    opensource licenses. We are gradually adopting the specification, noting
    that the tags are considered only advisory and do not, in any way,
    superceed or replace the license texts.
    
    No functional change intended.

commit 51369649b03ece2aed3eb61b0c8214b9aa5b2fa2
Author: Pedro F. Giffuni <pfg@FreeBSD.org>
Date:   Mon Nov 20 19:43:44 2017 +0000

    sys: further adoption of SPDX licensing ID tags.
    
    Mainly focus on files that use BSD 3-Clause license.
    
    The Software Package Data Exchange (SPDX) group provides a specification
    to make it easier for automated tools to detect and summarize well known
    opensource licenses. We are gradually adopting the specification, noting
    that the tags are considered only advisory and do not, in any way,
    superceed or replace the license texts.
    
    Special thanks to Wind River for providing access to "The Duke of
    Highlander" tool: an older (2014) run over FreeBSD tree was useful as a
    starting point.

commit 7f3ad01804c439cedb33d3da7539060c2dd1bb97
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Tue Aug 8 21:09:26 2017 +0000

    pf_get_sport(): Prevent possible endless loop when searching for an unused nat port
    
    This is an import of Alexander Bluhm's OpenBSD commit r1.60,
    the first chunk had to be modified because on OpenBSD the
    'cut' declaration is located elsewhere.
    
    Upstream report by Jingmin Zhou:
    https://marc.info/?l=openbsd-pf&m=150020133510896&w=2
    
    OpenBSD commit message:
     Use a 32 bit variable to detect integer overflow when searching for
     an unused nat port.  Prevents a possible endless loop if high port
     is 65535 or low port is 0.
     report and analysis Jingmin Zhou; OK sashan@ visa@
    Quoted from: https://cvsweb.openbsd.org/cgi-bin/cvsweb/src/sys/net/pf_lb.c
    
    PR:             221201
    Submitted by:   Fabian Keil <fk@fabiankeil.de>
    Obtained from:  OpenBSD via ElectroBSD

> 425f1cf27b3247d066477dc1da3914abe13420c0

commit b7ae43552b99b610416918bc00a264b6ae8da35a
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Sun Jul 9 17:56:39 2017 +0000

    pf: Fix vnet purging
    
    pf_purge_thread() breaks up the work of iterating all states (in
    pf_purge_expired_states()) and tracks progress in the idx variable.
    
    If multiple vnets exist this results in pf_purge_thread() only calling
    pf_purge_expired_states() for part of the states (the first part of the
    first vnet, second part of the second vnet and so on).
    Combined with the mark-and-sweep approach to cleaning up old rules (in
    V_pf_unlinked_rules) that resulted in pf freeing rules that were still
    referenced by states. This in turn caused panics when pf_state_expires()
    encounters that state and attempts to access the rule.
    
    We need to track the progress per vnet, not globally, so idx is moved
    into a per-vnet V_pf_purge_idx.
    
    PR:             219251

commit 468cefa22e66bd250077b080167787fa9821b471
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Sun May 7 14:33:58 2017 +0000

    pf: Fix vnet initialisation
    
    When running the vnet init code (pf_load_vnet()) we used to iterate over
    all vnets, marking them as unhooked.
    This is incorrect and leads to panics if pf is unloaded, as the unload
    code does not unregister the pfil hooks (because the vnet is marked as
    unhooked).
    
    There's no need or reason to touch other vnets during initialisation.
    Their pf_load_vnet() function will be triggered, which handles all
    required initialisation.
    
    Differential Revision:  https://reviews.freebsd.org/D10592

commit 64c79ee7334c41c89780a4b1a206777d6b7d1d89
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Wed May 3 20:56:54 2017 +0000

    pf: Fix panic on unload
    
    vnet_pf_uninit() is called through vnet_deregister_sysuninit() and
    linker_file_unload() when the pf module is unloaded. This is executed
    after pf_unload() so we end up trying to take locks which have been
    destroyed already.
    
    Move pf_unload() to a separate SYSUNINIT() to ensure it's called after
    all the vnet_pf_uninit() calls.
    
    Differential Revision:  https://reviews.freebsd.org/D10025

commit 1e9e37419915be099d74e0f8e848cf430c069915
Author: Marko Zec <zec@FreeBSD.org>
Date:   Tue Apr 25 08:34:39 2017 +0000

    Fix VNET leakages in PF by V_irtualizing pfr_ktables and friends.
    Apparently this resolves a PF-triggered panic when destroying VNET jails.
    
    Submitted by:   Peter Blok <peter.blok@bsd4all.org>

commit 3a36ee404f6725568999ce1bc77af9453ee18418
Author: Marko Zec <zec@FreeBSD.org>
Date:   Tue Apr 25 08:30:28 2017 +0000

    Since curvnet is already properly set on entry to event handlers,
    there's no need to override it, particularly not unconditionally with
    vnet0.
    
    Submitted by:   Peter Blok <peter.blok@bsd4all.org>

commit 00eab743abca6918aca3ad165c1707ab70f7037f
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Thu Apr 20 09:05:53 2017 +0000

    pf: Fix possible incorrect IPv6 fragmentation
    
    When forwarding pf tracks the size of the largest fragment in a fragmented
    packet, and refragments based on this size.
    It failed to ensure that this size was a multiple of 8 (as is required for all
    but the last fragment), so it could end up generating incorrect fragments.
    
    For example, if we received an 8 byte and 12 byte fragment pf would emit a first
    fragment with 12 bytes of payload and the final fragment would claim to be at
    offset 8 (not 12).
    
    We now assert that the fragment size is a multiple of 8 in ip6_fragment(), so
    other users won't make the same mistake.
    
    Reported by:    Antonios Atlasis <aatlasis at secfu net>

commit 4e261006a1d9307a6ddaceb4051c7f5c33f6a32b
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Tue Apr 18 20:07:21 2017 +0000

    pf: Also clear limit counters
    
    The "pfctl -F info" command didn't clear the limit counters ( as shown in the
    "pfctl -vsi" output).
    
    Submitted by:   Max <maximos@als.nnov.ru>

commit 9f5efe718fcf4a91b8a64c2192aed8fe84c4770b
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Fri Apr 14 01:56:15 2017 +0000

    Fix potential NULL deref.
    
    Found by:       PVS Studio

commit 3601d25181bfde3e4cdc11a0f46c3e0e2d9fabe1
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Sat Apr 1 12:22:34 2017 +0000

    pf: Fix leak of pf_state_keys
    
    If we hit the state limit we returned from pf_create_state() without cleaning
    up.
    
    PR:             217997
    Submitted by:   Max <maximos@als.nnov.ru>

commit 2f8fb3a8689169dd0b272c7718670cf58698d1a9
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Wed Mar 22 21:18:18 2017 +0000

    pf: Fix possible shutdown race
    
    Prevent possible races in the pf_unload() / pf_purge_thread() shutdown
    code. Lock the pf_purge_thread() with the new pf_end_lock to prevent
    these races.
    
    Use a shared/exclusive lock, as we need to also acquire another sx lock
    (VNET_LIST_RLOCK). It's fine for both pf_purge_thread() and pf_unload()
    to sleep,
    
    Pointed out by: eri, glebius, jhb
    Differential Revision:  https://reviews.freebsd.org/D10026

commit 08ef4ddb0fa8ee531b6b213a3d041ab7fe89cda7
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Sun Mar 19 03:06:09 2017 +0000

    pf: Fix rule evaluation after inet6 route-to
    
    In pf_route6() we re-run the ruleset with PF_FWD if the packet goes out
    of a different interface. pf_test6() needs to know that the packet was
    forwarded (in case it needs to refragment so it knows whether to call
    ip6_output() or ip6_forward()).
    
    This lead pf_test6() to try to evaluate rules against the PF_FWD
    direction, which isn't supported, so it needs to treat PF_FWD as PF_OUT.
    Once fwdir is set correctly the correct output/forward function will be
    called.
    
    PR:             217883
    Submitted by:   Kajetan Staszkiewicz

commit 5c172e7059b03321a11cd831ea432ca326e69211
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Sat Mar 18 01:37:20 2017 +0000

    pf: Fix memory leak on vnet shutdown or unload
    
    Rules are unlinked in shutdown_pf(), so we must call
    pf_unload_vnet_purge(), which frees unlinked rules, after that, not
    before.
    
    Differential Revision:  https://reviews.freebsd.org/D10040

commit 2a57d24bd1c9693c6316d40101b9cac0e33f6f58
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Sun Mar 12 05:42:57 2017 +0000

    pf: Fix incorrect rw_sleep() in pf_unload()
    
    When we unload we don't hold the pf_rules_lock, so we cannot call rw_sleep()
    with it, because it would release a lock we do not hold. There's no need for the
    lock either, so we can just tsleep().
    
    While here also make the same change in pf_purge_thread(), because it explicitly
    takes the lock before rw_sleep() and then immediately releases it afterwards.

commit f6182013148cc450e296d52a8afd4bb5f5439dda
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Sun Mar 12 05:00:04 2017 +0000

    pf: Do not lose the VNET lock when ending the purge thread
    
    When the pf_purge_thread() exits it must make sure to release the
    VNET_LIST_RLOCK it still holds.
    kproc_exit() does not return.

commit 98a9874f7b4e58c23754c321cdc032ac41c03cef
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Mon Mar 6 23:41:23 2017 +0000

    pf: Fix a crash in low-memory situations
    
    If the call to pf_state_key_clone() in pf_get_translation() fails (i.e. there's
    no more memory for it) it frees skp. This is wrong, because skp is a
    pf_state_key **, so we need to free *skp, as is done later in the function.
    Getting it wrong means we try to free a stack variable of the calling
    pf_test_rule() function, and we panic.

commit 643faabe0dc26a4b62b4b03797106cd4b003e856
Author: Eric van Gyzen <vangyzen@FreeBSD.org>
Date:   Thu Feb 16 20:44:44 2017 +0000

    pf: use inet_ntoa_r() instead of inet_ntoa(); maybe fix IPv6 OS fingerprinting
    
    inet_ntoa() cannot be used safely in a multithreaded environment
    because it uses a static local buffer. Instead, use inet_ntoa_r()
    with a buffer on the caller's stack.
    
    This code had an INET6 conditional before this commit, but opt_inet6.h
    was not included, so INET6 was never defined.  Apparently, pf's OS
    fingerprinting hasn't worked with IPv6 for quite some time.
    This commit might fix it, but I didn't test that.
    
    Differential Revision:  https://reviews.freebsd.org/D9625

commit 164aa3ce5e4bada1f189d1c5b56279731aa367ef
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Mon Jan 30 22:47:48 2017 +0000

    Fix indentantion in pf_purge_thread().  No functional change.

commit a5c1a50a26ced05031cc256c7b01ca395489328c
Author: Luiz Otavio O Souza <loos@FreeBSD.org>
Date:   Sun Jan 29 02:17:52 2017 +0000

    Do not run the pf purge thread while the VNET variables are not
    initialized, this can cause a divide by zero (if the VNET initialization
    takes to long to complete).
    
    Obtained from:  pfSense

commit aa8c6a6dcad846925a8e928acf6e271d7ffb349b
Author: Marcel Moolenaar <marcel@FreeBSD.org>
Date:   Sat Dec 10 03:31:38 2016 +0000

    Improve upon r309394
    
    Instead of taking an extra reference to deal with pfsync_q_ins()
    and pfsync_q_del() taken and dropping a reference (resp,) make
    it optional of those functions to take or drop a reference by
    passing an extra argument.
    
    Submitted by:   glebius@

commit 296d65b7a908e77b42d13b463b469cc34448a677
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Fri Dec 9 18:00:45 2016 +0000

    Backout accidentially leaked in r309746 not yet reviewed patch :(

commit 3cbee8caa140f9675d5f2653e829c8d3d5d92281
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Fri Dec 9 17:59:15 2016 +0000

    Use counter_ratecheck() in the ICMP rate limiting.
    
    Together with:  rrs, jtl

commit c3e14afc186ccb3f2a790c8a5d987420ed801090
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Mon Dec 5 21:52:10 2016 +0000

    pflog: Correctly initialise subrulenr
    
    subrulenr is considered unset if it's set to -1, not if it's set to 1.
    See contrib/tcpdump/print-pflog.c pflog_print() for a user.
    
    This caused incorrect pflog output (tcpdump -n -e -ttt -i pflog0):
      rule 0..16777216(match)
    instead of the correct output of
      rule 0/0(match)
    
    PR:             214832
    Submitted by:   andywhite@gmail.com

commit d6d35f15619dbd977f44e9431ed9af223bc9b6a9
Author: Marcel Moolenaar <marcel@FreeBSD.org>
Date:   Fri Dec 2 06:15:59 2016 +0000

    Fix use-after-free bugs in pfsync(4)
    
    Use after free happens for state that is deleted. The reference
    count is what prevents the state from being freed. When the
    state is dequeued, the reference count is dropped and the memory
    freed. We can't dereference the next pointer or re-queue the
    state.
    
    Differential Revision:  https://reviews.freebsd.org/D8671

commit 1f4955785d0594f33c6dde48bf44969ece9564b8
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Thu Oct 13 20:34:44 2016 +0000

    pf: port extended DSCP support from OpenBSD
    
    Ignore the ECN bits on 'tos' and 'set-tos' and allow to use
    DCSP names instead of having to embed their TOS equivalents
    as plain numbers.
    
    Obtained from:  OpenBSD
    Differential Revision:  https://reviews.freebsd.org/D8165

commit 813196a11a12ba7c2de7dc71cb7b01c8cab7ab87
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Tue Oct 4 19:35:14 2016 +0000

    pf: remove fastroute tag
    
    The tag fastroute came from ipf and was removed in OpenBSD in 2011. The code
    allows to skip the in pfil hooks and completely removes the out pfil invoke,
    albeit looking up a route that the IP stack will likely find on its own.
    The code between IPv4 and IPv6 is also inconsistent and marked as "XXX"
    for years.
    
    Submitted by:   Franco Fichtner <franco@opnsense.org>
    Differential Revision:  https://reviews.freebsd.org/D8058

commit c7641cd18dfb14591181a493b176227da07e3a3e
Author: Kevin Lo <kevlo@FreeBSD.org>
Date:   Wed Sep 28 13:29:11 2016 +0000

    Remove ifa_list, use ifa_link (structure field) instead.
    
    While here, prefer if_addrhead (FreeBSD) to if_addrlist (BSD compat) naming
    for the interface address list in sctp_bsd_addr.c
    
    Differential Revision:  https://reviews.freebsd.org/D8051

commit 0df377cbb8747aee4e6460e16fa41ce84ad34e00
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Mon Aug 15 12:13:14 2016 +0000

    pf: Add missing byte-order swap to pf_match_addr_range
    
    Without this, rules using address ranges (e.g. "10.1.1.1 - 10.1.1.5") did not
    match addresses correctly on little-endian systems.
    
    PR:             211796
    Obtained from:  OpenBSD (sthen)

> b328f2324c1fd85c10114f3ec9d05d568abf0c3b

commit aa7cac58c6278ff30d887f7496718bd29a139691
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Sat Jul 9 12:17:01 2016 +0000

    pf: Map hook returns onto the correct error values
    
    pf returns PF_PASS, PF_DROP, ... in the netpfil hooks, but the hook callers
    expect to get E<foo> error codes.
    Map the returns values. A pass is 0 (everything is OK), anything else means
    pf ate the packet, so return EACCES, which tells the stack not to emit an ICMP
    error message.
    
    PR:     207598

commit a8fc1b786d0e5a576d8084d184c88362288ee8a9
Author: Bjoern A. Zeeb <bz@FreeBSD.org>
Date:   Fri Jun 24 11:53:12 2016 +0000

    The void isn't void.
    
    Unbreak sparc64 and powerpc builds.
    
commit 66c00e9efbfbf9f4c1c15444e1f7cd85bd349bc7
Author: Bjoern A. Zeeb <bz@FreeBSD.org>
Date:   Thu Jun 23 22:31:44 2016 +0000

    Proerply virtualize pfsync for bringup after pf is initialized and
    teardown of VNETs once pf(4) has been shut down.
    Properly split resources into VNET_SYS(UN)INITs and one time module
    loading.
    While here cover the INET parts in the uninit callpath with proper
    #ifdefs.
    
    Obtained from:  projects/vnet

commit 7d7751a071b8b4be43b3926be378dc2ed8129070
Author: Bjoern A. Zeeb <bz@FreeBSD.org>
Date:   Thu Jun 23 22:31:10 2016 +0000

    Make sure pflog is attached after pf is initializaed so we can
    borrow pf's lock, and also make sure pflog goes after pf is gone
    in order to avoid callouts in VNETs to an already freed instance.
    
    Reported by:    Ivan Klymenko, Johan Hendriks  on current@ today
    Obtained from:  projects/vnet

commit a8e8c574436ca0a2383c02fcd091148d50e39cba
Author: Bjoern A. Zeeb <bz@FreeBSD.org>
Date:   Thu Jun 23 21:42:43 2016 +0000

    PFSTATE_NOSYNC goes onto state_flags, not sync_state;
    this prevents: panic: pfsync_delete_state: unexpected sync state 8
    
    Differential Revision:  https://reviews.freebsd.org/D6942

commit a0429b5459bfd2581b6e8f7c538136d03f2b5a4d
Author: Bjoern A. Zeeb <bz@FreeBSD.org>
Date:   Thu Jun 23 21:34:38 2016 +0000

    Update pf(4) and pflog(4) to survive basic VNET testing, which includes
    proper virtualisation, teardown, avoiding use-after-free, race conditions,
    no longer creating a thread per VNET (which could easily be a couple of
    thousand threads), gracefully ignoring global events (e.g., eventhandlers)
    on teardown, clearing various globally cached pointers and checking
    them before use.
    
    Differential Revision:  https://reviews.freebsd.org/D6924

commit 8147948e194cbeb6a652266e780670b738b854e2
Author: Bjoern A. Zeeb <bz@FreeBSD.org>
Date:   Thu Jun 23 05:41:46 2016 +0000

    Import a fix for and old security issue (CVE-2010-3830) in pf which
    was not relevant to FreeBSD as only root could open /dev/pf by default.
    With VIMAGE this is will longer be the case.  As pf(4) starts to
    be supported with VNETs 3rd party users may open /dev/pf inside the
    virtual jail instance; thus we need to address this issue after all.
    While OpenBSD largely rewrote code parts for the fix [1], and it's
    unclear what Apple [3] did, import the minimal fix from NetBSD [2].
    
    [1] http://cvsweb.openbsd.org/cgi-bin/cvsweb/src/sys/net/pf_ioctl.c.diff?r1=1.235&r2=1.236
    [2] http://mail-index.netbsd.org/source-changes/2011/01/19/msg017518.html
    [3] https://support.apple.com/en-gb/HT202154
    
    Obtained from:          http://cvsweb.netbsd.org/bsdweb.cgi/src/sys/dist/pf/net/pf_ioctl.c.diff?r1=1.42&r2=1.43&only_with_tag=MAIN
    Security:               CVE-2010-3830

commit 89856f7e2d63bcaaacf105f679ade0bf5d40e821
Author: Bjoern A. Zeeb <bz@FreeBSD.org>
Date:   Tue Jun 21 13:48:49 2016 +0000

    Get closer to a VIMAGE network stack teardown from top to bottom rather
    than removing the network interfaces first. This change is rather larger
    and convoluted as the ordering requirements cannot be separated.
    
    Move the pfil(9) framework to SI_SUB_PROTO_PFIL, move Firewalls and
    related modules to their own SI_SUB_PROTO_FIREWALL.
    Move initialization of "physical" interfaces to SI_SUB_DRIVERS,
    move virtual (cloned) interfaces to SI_SUB_PSEUDO.
    Move Multicast to SI_SUB_PROTO_MC.
    
    Re-work parts of multicast initialisation and teardown, not taking the
    huge amount of memory into account if used as a module yet.
    
    For interface teardown we try to do as many of them as we can on
    SI_SUB_INIT_IF, but for some this makes no sense, e.g., when tunnelling
    over a higher layer protocol such as IP. In that case the interface
    has to go along (or before) the higher layer protocol is shutdown.
    
    Kernel hhooks need to go last on teardown as they may be used at various
    higher layers and we cannot remove them before we cleaned up the higher
    layers.
    
    For interface teardown there are multiple paths:
    (a) a cloned interface is destroyed (inside a VIMAGE or in the base system),
    (b) any interface is moved from a virtual network stack to a different
    network stack ("vmove"), or (c) a virtual network stack is being shut down.
    All code paths go through if_detach_internal() where we, depending on the
    vmove flag or the vnet state, make a decision on how much to shut down;
    in case we are destroying a VNET the individual protocol layers will
    cleanup their own parts thus we cannot do so again for each interface as
    we end up with, e.g., double-frees, destroying locks twice or acquiring
    already destroyed locks.
    When calling into protocol cleanups we equally have to tell them
    whether they need to detach upper layer protocols ("ulp") or not
    (e.g., in6_ifdetach()).
    
    Provide or enahnce helper functions to do proper cleanup at a protocol
    rather than at an interface level.
    
    Obtained from:          projects/vnet
    Differential Revision:  https://reviews.freebsd.org/D6747

commit 3e248e0fb43b43afc95019d26f5b10bc74aee8b9
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Fri Jun 17 18:21:55 2016 +0000

    pf: Filter on and set vlan PCP values
    
    Adopt the OpenBSD syntax for setting and filtering on VLAN PCP values. This
    introduces two new keywords: 'set prio' to set the PCP value, and 'prio' to
    filter on it.
    
    Obtained from:  OpenBSD (mostly)
    Differential Revision:  https://reviews.freebsd.org/D6786

commit b599e8dc5912a4cdd71a3263ab2104b8dcaee541
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Mon May 23 13:59:48 2016 +0000

    pf: Fix more ICMP mistranslation
    
    In the default case fix the substitution of the destination address.
    
    PR:             201519
    Submitted by:   Max <maximos@als.nnov.ru>

commit c0c82715b8c0ab61d53f3ecc55c8966c27a8ac65
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Mon May 23 12:41:29 2016 +0000

    pf: Fix ICMP translation
    
    Fix ICMP source address rewriting in rdr scenarios.
    
    PR:             201519
    Submitted by:   Max <maximos@als.nnov.ru>

commit d9f4fce5a7296072d9da189e4eb17238dc9f5ce8
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Fri May 20 15:41:05 2016 +0000

    pf: Fix fragment timeout
    
    We were inconsistent about the use of time_second vs. time_uptime.
    Always use time_uptime so the value can be meaningfully compared.
    
    Submitted by:   "Max" <maximos@als.nnov.ru>

commit a4641f4eaad242fd40c50e4dd14522aff3494f9a
Author: Pedro F. Giffuni <pfg@FreeBSD.org>
Date:   Tue May 3 18:05:43 2016 +0000

    sys/net*: minor spelling fixes.
    
    No functional change.

commit 0d8c93313e49f8c033a545b5480a7724fad4f922
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Wed Mar 16 06:42:15 2016 +0000

    pf: Improve forwarding detection
    
    When we guess the nature of the outbound packet (output vs. forwarding) we need
    to take bridges into account. When bridging the input interface does not match
    the output interface, but we're not forwarding. Similarly, it's possible for the
    interface to actually be the bridge interface itself (and not a member interface).
    
    PR:             202351

commit 14b5e85b184326b6787be9f0a828dec82c1ee120
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Thu Feb 25 07:33:59 2016 +0000

    pf: Fix possible out-of-bounds write
    
    In the DIOCRSETADDRS ioctl() handler we allocate a table for struct pfr_addrs,
    which is processed in pfr_set_addrs(). At the users request we also provide
    feedback on the deleted addresses, by storing them after the new list
    ('bcopy(&ad, addr + size + i, sizeof(ad));' in pfr_set_addrs()).
    
    This means we write outside the bounds of the buffer we've just allocated.
    We need to look at pfrio_size2 instead (i.e. the size the user reserved for our
    feedback). That'd allow a malicious user to specify a smaller pfrio_size2 than
    pfrio_size though, in which case we'd still read outside of the allocated
    buffer. Instead we allocate the largest of the two values.
    
    Reported By:    Paul J Murphy <paul@inetstat.net>
    PR:             207463
    Differential Revision:  https://reviews.freebsd.org/D5426

commit c90369f880c99f2d3abf4c3754c3a92ea1009249
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Sat Feb 20 12:53:53 2016 +0000

    in pf_print_state_parts, do not use skw->proto to print the protocol but our
    local copy proto that we very carefully set beforehands. skw being NULL is
    perfectly valid there.
    
    Obtained from:  OpenBSD (henning)

commit 61eee0e202c2bda75971193c95d870e6148a6152
Author: Alexander V. Chernikov <melifaro@FreeBSD.org>
Date:   Mon Jan 25 06:33:15 2016 +0000

    MFP r287070,r287073: split radix implementation and route table structure.
    
    There are number of radix consumers in kernel land (pf,ipfw,nfs,route)
      with different requirements. In fact, first 3 don't have _any_ requirements
      and first 2 does not use radix locking. On the other hand, routing
      structure do have these requirements (rnh_gen, multipath, custom
      to-be-added control plane functions, different locking).
    Additionally, radix should not known anything about its consumers internals.
    
    So, radix code now uses tiny 'struct radix_head' structure along with
      internal 'struct radix_mask_head' instead of 'struct radix_node_head'.
      Existing consumers still uses the same 'struct radix_node_head' with
      slight modifications: they need to pass pointer to (embedded)
      'struct radix_head' to all radix callbacks.
    
    Routing code now uses new 'struct rib_head' with different locking macro:
      RADIX_NODE_HEAD prefix was renamed to RIB_ (which stands for routing
      information base).
    
    New net/route_var.h header was added to hold routing subsystem internal
      data. 'struct rib_head' was placed there. 'struct rtentry' will also
      be moved there soon.

commit ea8d14925c6a7e96949493984f558411d0fa4380
Author: Alexander V. Chernikov <melifaro@FreeBSD.org>
Date:   Sat Jan 9 09:34:39 2016 +0000

    Remove sys/eventhandler.h from net/route.h
    

commit 460a5b502f0f3cac5f48f1328144fdedca6dd415
Author: Alexander V. Chernikov <melifaro@FreeBSD.org>
Date:   Thu Jan 7 10:20:03 2016 +0000

    Convert pf(4) to the new routing API.
    
    Differential Revision:  https://reviews.freebsd.org/D4763

commit 637670e77eadf1a2d658bfecc235eddd501457ba
Author: Alexander V. Chernikov <melifaro@FreeBSD.org>
Date:   Sun Nov 15 16:02:22 2015 +0000

    Bring back the ability of passing cached route via nd6_output_ifp().

commit 7c4676ddee36407ec4c40d4311b79cbd17d1da6e
Author: Randall Stewart <rrs@FreeBSD.org>
Date:   Fri Nov 13 22:51:35 2015 +0000

    This fixes several places where callout_stops return is examined. The
    new return codes of -1 were mistakenly being considered "true". Callout_stop
    now returns -1 to indicate the callout had either already completed or
    was not running and 0 to indicate it could not be stopped.  Also update
    the manual page to make it more consistent no non-zero in the callout_stop
    or callout_reset descriptions.
    
commit 5a505b317aa29b4bc6d269b45e2d43a0dccabdb2
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Sat Nov 7 23:51:42 2015 +0000

    pf: Fix broken rule skip calculation
    
    r289932 accidentally broke the rule skip calculation. The address family
    argument to PF_ANEQ() is now important, and because it was set to 0 the macro
    always evaluated to false.
    This resulted in incorrect skip values, which in turn broke the rule
    evaluations.

commit 679e3c77b7e382554b8ab2fa149e42c3f82b5f62
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Thu Oct 29 20:45:53 2015 +0000

    pf: Fix IPv6 checksums with route-to.
    
    When using route-to (or reply-to) pf sends the packet directly to the output
    interface. If that interface doesn't support checksum offloading the checksum
    has to be calculated in software.
    That was already done in the IPv4 case, but not for the IPv6 case. As a result
    we'd emit packets with pseudo-header checksums (i.e. incorrect checksums).
    
    This issue was exposed by the changes in r289316 when pf stopped performing full
    checksum calculations for all packets.
    
    Submitted by:   Luoqi Chen

commit 78546dad4e5d611483af5248aff846ea35dcff91
Author: Alexander V. Chernikov <melifaro@FreeBSD.org>
Date:   Tue Oct 27 21:25:40 2015 +0000

    Eliminate last rtalloc_ign() caller.
    
    Differential Revision:  https://reviews.freebsd.org/D3927

commit c110fc49da2995d10d60d908af0838ecb4be9bee
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Wed Oct 14 16:21:41 2015 +0000

    pf: Fix TSO issues
    
    In certain configurations (mostly but not exclusively as a VM on Xen) pf
    produced packets with an invalid TCP checksum.
    
    The problem was that pf could only handle packets with a full checksum. The
    FreeBSD IP stack produces TCP packets with a pseudo-header checksum (only
    addresses, length and protocol).
    Certain network interfaces expect to see the pseudo-header checksum, so they
    end up producing packets with invalid checksums.
    
    To fix this stop calculating the full checksum and teach pf to only update TCP
    checksums if TSO is disabled or the change affects the pseudo-header checksum.
    
    PR:             154428, 193579, 198868
    Differential Revision:  https://reviews.freebsd.org/D3779

commit 1fe201c322f93424e29581c5622da7cde44db51f
Author: Alexander V. Chernikov <melifaro@FreeBSD.org>
Date:   Wed Sep 16 14:26:28 2015 +0000

    Simplify the way of attaching IPv6 link-layer header.
    
    Problem description:
    How do we currently perform layer 2 resolution and header imposition:
    
    For IPv4 we have the following chain:
      ip_output() -> (ether|atm|whatever)_output() -> arpresolve()
    
    Lookup is done in proper place (link-layer output routine) and it is possible
      to provide cached lle data.
    
    For IPv6 situation is more complex:
      ip6_output() -> nd6_output() -> nd6_output_ifp() -> (whatever)_output() ->
        nd6_storelladdr()
    
    We have ip6_ouput() which calls nd6_output() instead of link output routine.
    nd6_output() does the following:
      * checks if lle exists, creates it if needed (similar to arpresolve())
      * performes lle state transitions (similar to arpresolve())
      * calls nd6_output_ifp() which pushes packets to link output routine along
        with running SeND/MAC hooks regardless of lle state
        (e.g. works as run-hooks placeholder).
    
    After that, iface output routine like ether_output() calls nd6_storelladdr()
      which performs lle lookup once again.
    
    As a result, we perform lookup twice for each outgoing packet for most types
      of interfaces. We also need to maintain runtime-checked table of 'nd6-free'
      interfaces (see nd6_need_cache()).
    
    Fix this behavior by eliminating first ND lookup. To be more specific:
      * make all nd6_output() consumers use nd6_output_ifp() instead
      * rename nd6_output[_slow]() to nd6_resolve_[slow]()
      * convert nd6_resolve() and nd6_resolve_slow() to arpresolve() semantics,
        e.g. copy L2 address to buffer instead of pushing packet towards lower
        layers
      * Make all nd6_storelladdr() users use nd6_resolve()
      * eliminate nd6_storelladdr()
    
    The resulting callchain is the following:
      ip6_output() -> nd6_output_ifp() -> (whatever)_output() -> nd6_resolve()
    
    Error handling:
    Currently sending packet to non-existing la results in ip6_<output|forward>
      -> nd6_output() -> nd6_output _lle() which returns 0.
    In new scenario packet is propagated to <ether|whatever>_output() ->
      nd6_resolve() which will return EWOULDBLOCK, and that result
      will be converted to 0.
    
    (And EWOULDBLOCK is actually used by IB/TOE code).
    
    Differential Revision:  https://reviews.freebsd.org/D1469

commit 2f6c345adfb739e62b5ddb3d8d3b92d8614f6a50
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Tue Sep 1 19:04:04 2015 +0000

    pf: Fix misdetection of forwarding when net.link.bridge.pfil_bridge is set
    
    If net.link.bridge.pfil_bridge is set we can end up thinking we're forwarding in
    pf_test6() because the rcvif and the ifp (output interface) are different.
    In that case we're bridging though, and the rcvif the the bridge member on which
    the packet was received and ifp is the bridge itself.
    If we'd set dir to PF_FWD we'd end up calling ip6_forward() which is incorrect.
    
    Instead check if the rcvif is a member of the ifp bridge. (In other words, the
    if_bridge is the ifp's softc). If that's the case we're not forwarding but
    bridging.
    
    PR:     202351
    Differential Revision:  https://reviews.freebsd.org/D3534

commit 64b3b4d611c32eea0529878de95fd2f9b9dcaa3a
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Thu Aug 27 21:27:47 2015 +0000

    pf: Remove support for 'scrub fragment crop|drop-ovl'
    
    The crop/drop-ovl fragment scrub modes are not very useful and likely to confuse
    users into making poor choices.
    It's also a fairly large amount of complex code, so just remove the support
    altogether.
    
    Users who have 'scrub fragment crop|drop-ovl' in their pf configuration will be
    implicitly converted to 'scrub fragment reassemble'.
    
    Differential Revision:  https://reviews.freebsd.org/D3466

commit 22932fc9be2fcca8f3f33d09b536ab71b1c2452a
Author: Luiz Otavio O Souza <loos@FreeBSD.org>
Date:   Mon Aug 24 21:41:05 2015 +0000

    Reapply r196551 which was accidentally reverted by r223637 (update to
    OpenBSD pf 4.5).
    
    Fix argument ordering to memcpy as well as the size of the copy in the
    (theoretical) case that pfi_buffer_cnt should be greater than ~_max.
    
    This fix the failure when you hit the self table size and force it to be
    resized.
    
commit 0a70aaf8f5d93454d0940a09b94deecd7aa5fa0d
Author: Luiz Otavio O Souza <loos@FreeBSD.org>
Date:   Fri Aug 21 22:02:22 2015 +0000

    Add ALTQ(9) support for the CoDel algorithm.
    
    CoDel is a parameterless queue discipline that handles variable bandwidth
    and RTT.
    
    It can be used as the single queue discipline on an interface or as a sub
    discipline of existing queue disciplines such as PRIQ, CBQ, HFSC, FAIRQ.
    
    Differential Revision:  https://reviews.freebsd.org/D3272
    Obtained from:  pfSense

commit f2fc809dcd122b7d7d618e7b6c548d89d8a92f91
Author: Luiz Otavio O Souza <loos@FreeBSD.org>
Date:   Mon Aug 17 23:03:54 2015 +0000

    Fix the copy of addresses passed from userland in table replace command.
    
    The size2 is the maximum userland buffer size (used when the addresses are
    copied back to userland).
    
    Obtained from:  pfSense

commit 643ef281cd4e8e9c00df95ba4c4ae2598bf9743f
Author: Mariusz Zaborski <oshogbo@FreeBSD.org>
Date:   Tue Aug 11 17:24:34 2015 +0000

    Use correct src/dst ports when removing states.
    
    Submitted by:   Milosz Kaniewski <m.kaniewski@wheelsystems.com>,
                    UMEZAWA Takeshi <umezawa@iij.ad.jp> (orginal)
    Obtained from:  OpenBSD

commit 48c29b118e8229f19397bb8e205a086fdf0ed468
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Wed Jul 29 06:35:36 2015 +0000

    pf: Always initialise pf_fragment.fr_flags
    
    When we allocate the struct pf_fragment in pf_fillup_fragment() we forgot to
    initialise the fr_flags field. As a result we sometimes mistakenly thought the
    fragment to not be a buffered fragment. This resulted in panics because we'd end
    up freeing the pf_fragment but not removing it from V_pf_fragqueue (believing it
    to be part of V_pf_cachequeue).
    The next time we iterated V_pf_fragqueue we'd use a freed object and panic.
    
    While here also fix a pf_fragment use after free in pf_normalize_ip().
    pf_reassemble() frees the pf_fragment, so we can't use it any more.
    
    PR:             201879, 201932

commit 299c819a75b9494ed8ab5a5a64f3d85db568d7e7
Author: Renato Botelho <garga@FreeBSD.org>
Date:   Tue Jul 28 14:59:29 2015 +0000

    Simplify logic added in r285945 as suggested by glebius
    
commit b1b98a2db7bbeb69e3299e953e63bea759db0ef0
Author: Renato Botelho <garga@FreeBSD.org>
Date:   Tue Jul 28 10:31:34 2015 +0000

    Respect pf rule log option before log dropped packets with IP options or
    dangerous v6 headers
    
    Obtained from:  pfSense
    Differential Revision:  https://reviews.freebsd.org/D3222

commit 3e437fd2c6ec2564c4e287cc1d81bfdebe199bce
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Tue Jul 28 09:36:26 2015 +0000

    Fix a typo in r280169. Of course we are interested in deleting nsn only
    if we have just created it and we were the last reference.
    
    Submitted by:   dhartmei

commit a5b789f65a306f8abd91a8b2eea77df2e77f90f6
Author: Ermal Luçi <eri@FreeBSD.org>
Date:   Wed Jun 24 19:16:41 2015 +0000

    ALTQ FAIRQ discipline import from DragonFLY
    
    Differential Revision:  https://reviews.freebsd.org/D2847
    Obtained from:  pfSense

commit 06ba348d27fd23b45b7a6c8acf8940065490479e
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Thu Jun 11 17:57:47 2015 +0000

    pf: Remove frc_direction
    
    We don't use the direction of the fragments for anything. The frc_direction
    field is assigned, but never read.
    Just remove it.
    
    Differential Revision:  https://reviews.freebsd.org/D2773

commit 837b925abaf9db35055f689ad83a82627cc8b961
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Thu Jun 11 13:26:16 2015 +0000

    pf: Save the protocol number in the pf_fragment
    
    When we try to look up a pf_fragment with pf_find_fragment() we compare (see
    pf_frag_compare()) addresses (and family), id but also protocol.  We failed to
    save the protocol to the pf_fragment in pf_fragcache(), resulting in failing
    reassembly.
    
    Differential Revision:  https://reviews.freebsd.org/D2772

commit 0b7eba6ad40ed978dfbaff56c062360a836fcf91
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Wed Jun 10 13:44:04 2015 +0000

    pf: address family must be set when creating a pf_fragment
    
    Fix a panic when handling fragmented ip4 packets with 'drop-ovl' set.
    In that scenario we take a different branch in pf_normalize_ip(), taking us to
    pf_fragcache() (rather than pf_reassemble()). In pf_fragcache() we create a
    pf_fragment, but do not set the address family. This leads to a panic when we
    try to insert that into pf_frag_tree because pf_addr_cmp(), which is used to
    compare the pf_fragments doesn't know what to do if the address family is not
    set.
    
    Simply ensure that the address family is set correctly (always AF_INET in this
    path).
    
    PR:                     200330
    Differential Revision:  https://reviews.freebsd.org/D2769

commit fd90e2ed54a69bb07d14dcd4e805431ccb7d6cb6
Author: Jung-uk Kim <jkim@FreeBSD.org>
Date:   Fri May 22 17:05:21 2015 +0000

    CALLOUT_MPSAFE has lost its meaning since r141428, i.e., for more than ten
    years for head.  However, it is continuously misused as the mpsafe argument
    for callout_init(9).  Deprecate the flag and clean up callout_init() calls
    to make them more consistent.
    
    Differential Revision:  https://reviews.freebsd.org/D2613

commit 3dd01a884c8eb85ac50586d596ecb5c6495b351c
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Tue May 19 14:04:21 2015 +0000

    Use MTX_SYSINIT() instead of mtx_init() to separate mutex initialization
    from associated structures initialization.  The mutexes are global, while
    the structures are per-vnet.
    
    Submitted by:   Nikos Vassiliadis <nvass gmx.com>

commit 30fe681e44a333c7f48f25fa13b44c487fe6f559
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Tue May 19 14:02:40 2015 +0000

    During module unload unlock rules before destroying UMA zones, which
    may sleep in uma_drain(). It is safe to unlock here, since we are already
    dehooked from pfil(9) and all pf threads had quit.
    
commit 78680d05d1fb21665527ca7e6c2ef8c3a22b31fb
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Mon May 18 15:51:27 2015 +0000

    A miss from r283061: don't dereference NULL is pf_get_mtag() fails.
    
    PR:             200222
    Submitted by:   Franco Fichtner <franco opnsense.org>

commit b7f69c506d057493bdee72f02b56df12b24c0bc6
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Mon May 18 15:05:12 2015 +0000

    Don't dereference NULL is pf_get_mtag() fails.
    
    PR:             200222
    Submitted by:   Franco Fichtner <franco opnsense.org>

commit 772e66a6fc2fdfca4c9a85dcafbfe4d17c3ddc35
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Thu Apr 16 20:22:40 2015 +0000

    Move ALTQ from contrib to net/altq. The ALTQ code is for many years
    discontinued by its initial authors. In FreeBSD the code was already
    slightly edited during the pf(4) SMP project. It is about to be edited
    more in the projects/ifnet. Moving out of contrib also allows to remove
    several hacks to the make glue.
    
commit 3d1bbe5fa055912f747a6a12d5c81856d7d841b7
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Tue Apr 14 19:07:37 2015 +0000

    pf: Fix forwarding detection
    
    If the direction is not PF_OUT we can never be forwarding. Some input packets
    have rcvif != ifp (looped back packets), which lead us to ip6_forward() inbound
    packets, causing panics.
    
    Equally, we need to ensure that packets were really received and not locally
    generated before trying to ip6_forward() them.
    
    Differential Revision:  https://reviews.freebsd.org/D2286

commit 916e17fd56783ea9ca93290c60c673a95e0ef8bf
Author: George V. Neville-Neil <gnn@FreeBSD.org>
Date:   Tue Apr 14 14:43:42 2015 +0000

    I can find no reason to allow packets with both SYN and FIN bits
    set past this point in the code. The packet should be dropped and
    not massaged as it is here.
    
    Differential Revision:  https://reviews.freebsd.org/D2266
    Submitted by: eri

commit 1873dcc8c93dc9e31e4b40c16887b15e341136aa
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Mon Apr 6 19:05:00 2015 +0000

    pf: Skip firewall for refragmented ip6 packets
    
    In cases where we scrub (fragment reassemble) on both input and output
    we risk ending up in infinite loops when forwarding packets.
    
    Fragmented packets come in and get collected until we can defragment. At
    that point the defragmented packet is handed back to the ip stack (at
    the pfil point in ip6_input(). Normal processing continues.
    
    Eventually we figure out that the packet has to be forwarded and we end
    up at the pfil hook in ip6_forward(). After doing the inspection on the
    defragmented packet we see that the packet has been defragmented and
    because we're forwarding we have to refragment it.
    
    In pf_refragment6() we split the packet up again and then ip6_forward()
    the individual fragments.  Those fragments hit the pfil hook on the way
    out, so they're collected until we can reconstruct the full packet, at
    which point we're right back where we left off and things continue until
    we run out of stack.
    
    Break that loop by marking the fragments generated by pf_refragment6()
    as M_SKIP_FIREWALL. There's no point in processing those packets in the
    firewall anyway. We've already filtered on the full packet.
    
    Differential Revision:  https://reviews.freebsd.org/D2197

commit 6d947416cc02a93c63479eed545059577446814c
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Wed Apr 1 22:26:39 2015 +0000

    o Use new function ip_fillid() in all places throughout the kernel,
      where we want to create a new IP datagram.
    o Add support for RFC6864, which allows to set IP ID for atomic IP
      datagrams to any value, to improve performance. The behaviour is
      controlled by net.inet.ip.rfc6864 sysctl knob, which is enabled by
      default.
    o In case if we generate IP ID, use counter(9) to improve performance.
    o Gather all code related to IP ID into ip_id.c.
    
    Differential Revision:          https://reviews.freebsd.org/D2177

commit 7dce9b515b54dfb62c8ad4a9d0c8ab3139b15233
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Wed Apr 1 12:16:56 2015 +0000

    pf: Deal with runt packets
    
    On Ethernet packets have a minimal length, so very short packets get padding
    appended to them. This padding is not stripped off in ip6_input() (due to
    support for IPv6 Jumbograms, RFC2675).
    That means PF needs to be careful when reassembling fragmented packets to not
    include the padding in the reassembled packet.
    
    While here also remove the 'Magic from ip_input.' bits. Splitting up and
    re-joining an mbuf chain here doesn't make any sense.
    
    Differential Revision:  https://reviews.freebsd.org/D2189

commit 798318490e65f1e570ce26ea64df0c0468877d0b
Author: Kristof Provost <kp@FreeBSD.org>
Date:   Wed Apr 1 12:15:01 2015 +0000

    Preserve IPv6 fragment IDs accross reassembly and refragmentation
    
    When forwarding fragmented IPv6 packets and filtering with PF we
    reassemble and refragment. That means we generate new fragment headers
    and a new fragment ID.
    
    We already save the fragment IDs so we can do the reassembly so it's
    straightforward to apply the incoming fragment ID on the refragmented
    packets.
    
    Differential Revision:  https://reviews.freebsd.org/D2188

commit a4879be4024dfd621ead2237797652030c1615d4
Author: Sergey Kandaurov <pluknet@FreeBSD.org>
Date:   Thu Mar 26 13:31:04 2015 +0000

    Static'ize pf_fillup_fragment body to match its declaration.
    
    Missed in 278925.

commit 3e8c6d74bb723946a98cf90912738dad1a22e727
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Tue Mar 17 12:19:28 2015 +0000

    Always lock the hash row of a source node when updating its 'states' counter.
    
    PR:             182401

commit 998fbd14b8caf8755f764548678bb8ad9a5a052e
Author: Andrey V. Elsukov <ae@FreeBSD.org>
Date:   Thu Mar 12 08:57:24 2015 +0000

    Reset mbuf pointer to NULL in fastroute case to indicate that mbuf was
    consumed by filter. This fixes several panics due to accessing to mbuf
    after free.
    
    Submitted by:   Kristof Provost

commit 4ac6485cc6f268da149f5d4ea43bd871fdf24fd2
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Tue Feb 17 22:33:22 2015 +0000

    Even more fixes to !INET and !INET6 kernels.
    
    In collaboration with:  pluknet

commit 0324938a0f2fd6f66b27aa879a0f273f1ce0cc58
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Mon Feb 16 23:50:53 2015 +0000

    - Improve INET/INET6 scope.
    - style(9) declarations.
    - Make couple of local functions static.

commit 8dc98c2a369bf0539bf05dfde9de732848b5e92b
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Mon Feb 16 21:52:28 2015 +0000

    Toss declarations to fix regular build and NO_INET6 build.

commit 39a58828ef1e2449e4158ef46d7453d84890d219
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Mon Feb 16 07:01:02 2015 +0000

    In the forwarding case refragment the reassembled packets with the same
    size as they arrived in. This allows the sender to determine the optimal
    fragment size by Path MTU Discovery.
    
    Roughly based on the OpenBSD work by Alexander Bluhm.
    
    Submitted by:           Kristof Provost
    Differential Revision:  D1767

commit f5ceb22b78a4c5c6cd4d702cd6cb0b24e41b8ddc
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Mon Feb 16 03:38:27 2015 +0000

    Update the pf fragment handling code to closer match recent OpenBSD.
    That partially fixes IPv6 fragment handling. Thanks to Kristof for
    working on that.
    
    Submitted by:           Kristof Provost
    Tested by:              peter
    Differential Revision:  D1765

commit efc6c51ffae26a42f712389cb931e2c459c17243
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Thu Jan 22 01:23:16 2015 +0000

    Back out r276841, r276756, r276747, r276746. The change in r276747 is very
    very questionable, since it makes vimages more dependent on each other. But
    the reason for the backout is that it screwed up shutting down the pf purge
    threads, and now kernel immedially panics on pf module unload. Although module
    unloading isn't an advertised feature of pf, it is very important for
    development process.
    
    I'd like to not backout r276746, since in general it is good. But since it
    has introduced numerous build breakages, that later were addressed in
    r276841, r276756, r276747, I need to back it out as well. Better replay it
    in clean fashion from scratch.

commit 7259906eb0d1c5e9faacf136b9a7b1caa7eb122b
Author: Craig Rodrigues <rodrigc@FreeBSD.org>
Date:   Thu Jan 8 17:49:07 2015 +0000

    Do not initialize pfi_unlnkdkifs_mtx and pf_frag_mtx.
    They are already initialized by MTX_SYSINIT.
    
    Submitted by: Nikos Vassiliadis <nvass@gmx.com>

commit 8d665c6ba81413b8a7fc38820ad24c4355a56804
Author: Craig Rodrigues <rodrigc@FreeBSD.org>
Date:   Tue Jan 6 16:47:02 2015 +0000

    Reapply previous patch to fix build.
    
    PR: 194515

commit 4de985af0bcf30abf005595785caecabfd3ae66a
Author: Craig Rodrigues <rodrigc@FreeBSD.org>
Date:   Tue Jan 6 09:03:03 2015 +0000

    Instead of creating a purge thread for every vnet, create
    a single purge thread and clean up all vnets from this thread.
    
    PR:                     194515
    Differential Revision:  D1315
    Submitted by:           Nikos Vassiliadis <nvass@gmx.com>

commit c75820c7569bb9e281f84e4bda884b543902e4d5
Author: Craig Rodrigues <rodrigc@FreeBSD.org>
Date:   Tue Jan 6 08:39:06 2015 +0000

    Merge: r258322 from projects/pf branch
    
        Split functions that initialize various pf parts into their
        vimage parts and global parts.
        Since global parts appeared to be only mutex initializations, just
        abandon them and use MTX_SYSINIT() instead.
        Kill my incorrect VNET_FOREACH() iterator and instead use correct
        approach with VNET_SYSINIT().
    
    PR:                     194515
    Differential Revision:  D1309
    Submitted by:           glebius, Nikos Vassiliadis <nvass@gmx.com>

commit 7b56cc430a261630677f614b1cf4283e6ebb34fc
Author: Ermal Luçi <eri@FreeBSD.org>
Date:   Wed Nov 19 13:31:08 2014 +0000

    pf(4) needs to have a correct checksum during its processing.
    Calculate checksums for the IPv6 path when needed before
    delving into pf(4) code as required.
    
    PR:     172648, 179392
    Obtained from:  pfSense

commit 5b07fc31cc496671dfb960b03aad9f8ee1510519
Author: Alexander V. Chernikov <melifaro@FreeBSD.org>
Date:   Sun Nov 9 17:01:54 2014 +0000

    Finish r274315: remove union 'u' from struct pf_send_entry.
    
    Suggested by:   kib

commit a458ad86ee9d509ea0b14dd1e7a24496156b973b
Author: Alexander V. Chernikov <melifaro@FreeBSD.org>
Date:   Sun Nov 9 16:15:28 2014 +0000

    Remove unused 'struct route' fields.

commit 6df8a710676253708200e0c1299ba9016675568d
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Fri Nov 7 09:39:05 2014 +0000

    Remove SYSCTL_VNET_* macros, and simply put CTLFLAG_VNET where needed.
    
commit f0188618f2abe08246731cf09b0b0a99609fd34c
Author: Hans Petter Selasky <hselasky@FreeBSD.org>
Date:   Tue Oct 21 07:31:21 2014 +0000

    Fix multiple incorrect SYSCTL arguments in the kernel:
    
    - Wrong integer type was specified.
    
    - Wrong or missing "access" specifier. The "access" specifier
    sometimes included the SYSCTL type, which it should not, except for
    procedural SYSCTL nodes.
    
    - Logical OR where binary OR was expected.
    
    - Properly assert the "access" argument passed to all SYSCTL macros,
    using the CTASSERT macro. This applies to both static- and dynamically
    created SYSCTLs.
    
    - Properly assert the the data type for both static and dynamic
    SYSCTLs. In the case of static SYSCTLs we only assert that the data
    pointed to by the SYSCTL data pointer has the correct size, hence
    there is no easy way to assert types in the C language outside a
    C-function.
    
    - Rewrote some code which doesn't pass a constant "access" specifier
    when creating dynamic SYSCTL nodes, which is now a requirement.
    
    - Updated "EXAMPLES" section in SYSCTL manual page.
    
commit 99e9de871aee402a1166cdecb957fe6c8c99da13
Author: Dag-Erling Smørgrav <des@FreeBSD.org>
Date:   Sat Oct 18 22:15:11 2014 +0000

    Add a complete implementation of MurmurHash3.  Tweak both implementations
    so they match the established idiom.  Document them in hash(9).
    
commit 1d2baefc132ed7c8526f8045409ad0bfa05d03f9
Author: George V. Neville-Neil <gnn@FreeBSD.org>
Date:   Fri Oct 10 19:26:26 2014 +0000

    Change the PF hash from Jenkins to Murmur3.  In forwarding tests
    this showed a conservative 3% incrase in PPS.
    
    Differential Revision:  https://reviews.freebsd.org/D461
    Submitted by:   des

commit 31f0d081d8bb499cd7beab872694ca4b3ebd9cf0
Author: Alexander V. Chernikov <melifaro@FreeBSD.org>
Date:   Wed Oct 1 14:39:06 2014 +0000

    Remove lock init from radix.c.
    Radix has never managed its locking itself.
    The only consumer using radix with embeded rwlock
    is system routing table. Move per-AF lock inits there.

commit 495a22b595e867d57b26eb154ffb6a509ad13f1f
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Wed Oct 1 13:35:41 2014 +0000

    Use rn_detachhead() instead of direct free(9) for radix tables.
    
commit 2a6009bfa6b33e7d2fd982bbaf9af6b5507a1643
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Fri Sep 19 09:19:29 2014 +0000

    Mechanically convert to if_inc_counter().

commit 56b61ca27ace61b1f30aaeb54138d8114df56d00
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Fri Sep 19 09:01:19 2014 +0000

    Remove ifq_drops from struct ifqueue. Now queue drops are accounted in
    struct ifnet if_oqdrops.
    
    Some netgraph modules used ifqueue w/o ifnet. Accounting of queue drops
    is simply removed from them. There were no API to read this statistic.
    
commit 450cecf0a0935f59d72e51726f3b3e4e211c5bd5
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Fri Sep 12 08:39:15 2014 +0000

    - Provide a sleepable lock to protect against ioctl() vs ioctl() races.
    - Use the new lock to protect against simultaneous DIOCSTART and/or
      DIOCSTOP ioctls.
    
    Reported & tested by:   jmallett

commit bf7dcda366949717168add4b92e36f55521c3a23
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Wed Sep 3 08:30:18 2014 +0000

    Clean up unused CSUM_FRAGMENT.
    
commit b616ae250cdb7c962de544717143ca71ba5716e9
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Mon Sep 1 13:00:45 2014 +0000

    Explicitly free packet on PF_DROP, otherwise a "quick" rule with
    "route-to" may still forward it.
    
    PR:             177808
    Submitted by:   Kajetan Staszkiewicz <kajetan.staszkiewicz innogames.de>

commit e85343b1a5ff17afe460541c8bffaaa16e5c0962
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Fri Aug 15 14:16:08 2014 +0000

    Do not lookup source node twice when pf_map_addr() is used.
    
    PR:             184003
    Submitted by:   Kajetan Staszkiewicz <vegeta tuxpowered.net>

commit afab0f7e016b87a62b113a4e585f5af2662105e5
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Fri Aug 15 14:02:24 2014 +0000

    pf_map_addr() can fail and in this case we should drop the packet,
    otherwise bad consequences including a routing loop can occur.
    
    Move pf_set_rt_ifp() earlier in state creation sequence and
    inline it, cutting some extra code.
    
    PR:             183997
    Submitted by:   Kajetan Staszkiewicz <vegeta tuxpowered.net>

commit 11341cf97e097775470cddb742190aa5da07cc58
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Fri Aug 15 04:35:34 2014 +0000

    Fix synproxy with IPv6. pf_test6() was missing a check for M_SKIP_FIREWALL.
    
    PR:             127920
    Submitted by:   Kajetan Staszkiewicz <vegeta tuxpowered.net>

commit 73d76e77b613b979905eb52f71d79ccd1cf1a254
Author: Kevin Lo <kevlo@FreeBSD.org>
Date:   Fri Aug 15 02:43:02 2014 +0000

    Change pr_output's prototype to avoid the need for explicit casts.
    This is a follow up to r269699.
    
    Phabric:        D564

commit a9572d8f02519b4cb8df9ed16ea63c10be0e927d
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Thu Aug 14 18:57:46 2014 +0000

    - Count global pf(4) statistics in counter(9).
    - Do not count global number of states and of src_nodes,
      use uma_zone_get_cur() to obtain values.
    - Struct pf_status becomes merely an ioctl API structure,
      and moves to netpfil/pf/pf.h with its constants.
    - V_pf_status is now of type struct pf_kstatus.
    
    Submitted by:   Kajetan Staszkiewicz <vegeta tuxpowered.net>

commit 8f5a8818f57e31278b4bbd415c2cfa498306f91f
Author: Kevin Lo <kevlo@FreeBSD.org>
Date:   Fri Aug 8 01:57:15 2014 +0000

    Merge 'struct ip6protosw' and 'struct protosw' into one.  Now we have
    only one protocol switch structure that is shared between ipv4 and ipv6.
    
    Phabric:        D476

commit 8ff2bd98d6cfbac2c2177ad622e4f86c79b04f56
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Thu Jul 10 12:41:58 2014 +0000

    On machines with strict alignment copy pfsync_state_key from packet
    on stack to avoid unaligned access.
    
    PR:             187381
    Submitted by:   Lytochkin Boris <lytboris gmail.com>

commit af3b2549c4ba2ef00a7cbb4cb6836598bf0aefbe
Author: Hans Petter Selasky <hselasky@FreeBSD.org>
Date:   Sat Jun 28 03:56:17 2014 +0000

    Pull in r267961 and r267973 again. Fix for issues reported will follow.

commit 37a107a407cdb47ee0f4c4337e369e9973b34076
Author: Glen Barber <gjb@FreeBSD.org>
Date:   Fri Jun 27 22:05:21 2014 +0000

    Revert r267961, r267973:
    
    These changes prevent sysctl(8) from returning proper output,
    such as:
    
     1) no output from sysctl(8)
     2) erroneously returning ENOMEM with tools like truss(1)
        or uname(1)
     truss: can not get etype: Cannot allocate memory

commit 3da1cf1e88f8448bb10c5f778ab56ff65c7a6938
Author: Hans Petter Selasky <hselasky@FreeBSD.org>
Date:   Fri Jun 27 16:33:43 2014 +0000

    Extend the meaning of the CTLFLAG_TUN flag to automatically check if
    there is an environment variable which shall initialize the SYSCTL
    during early boot. This works for all SYSCTL types both statically and
    dynamically created ones, except for the SYSCTL NODE type and SYSCTLs
    which belong to VNETs. A new flag, CTLFLAG_NOFETCH, has been added to
    be used in the case a tunable sysctl has a custom initialisation
    function allowing the sysctl to still be marked as a tunable. The
    kernel SYSCTL API is mostly the same, with a few exceptions for some
    special operations like iterating childrens of a static/extern SYSCTL
    node. This operation should probably be made into a factored out
    common macro, hence some device drivers use this. The reason for
    changing the SYSCTL API was the need for a SYSCTL parent OID pointer
    and not only the SYSCTL parent OID list pointer in order to quickly
    generate the sysctl path. The motivation behind this patch is to avoid
    parameter loading cludges inside the OFED driver subsystem. Instead of
    adding special code to the OFED driver subsystem to post-load tunables
    into dynamically created sysctls, we generalize this in the kernel.
    
    Other changes:
    - Corrected a possibly incorrect sysctl name from "hw.cbb.intr_mask"
    to "hw.pcic.intr_mask".
    - Removed redundant TUNABLE statements throughout the kernel.
    - Some minor code rewrites in connection to removing not needed
    TUNABLE statements.
    - Added a missing SYSCTL_DECL().
    - Wrapped two very long lines.
    - Avoid malloc()/free() inside sysctl string handling, in case it is
    called to initialize a sysctl from a tunable, hence malloc()/free() is
    not ready when sysctls from the sysctl dataset are registered.
    - Bumped FreeBSD version to indicate SYSCTL API change.
    
commit b437b06c798ae32193ea6df2b11ad559b109742f
Author: John Baldwin <jhb@FreeBSD.org>
Date:   Thu May 29 19:17:10 2014 +0000

    Fix pf(4) to build with MAXCPU set to 256.  MAXCPU is actually a count,
    not a maximum ID value (so it is a cap on mp_ncpus, not mp_maxid).

commit 0e4f18aa688dfcade01e36910981d19b2622276c
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Sat May 17 12:30:27 2014 +0000

    o In pf_normalize_ip() we don't need mtag in
      !(PFRULE_FRAGCROP|PFRULE_FRAGDROP) case.
    o In the (PFRULE_FRAGCROP|PFRULE_FRAGDROP) case we should allocate mtag
      if we don't find any.
    
    Tested by:      Ian FREISLICH <ianf cloudseed.co.za>

commit 53f4b0cf9bcbb430fff335c844f11c9fcaacdd33
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Fri Apr 25 11:36:11 2014 +0000

    The current API for adding rules with pool addresses is the following:
    
    - DIOCADDADDR adds addresses and puts them into V_pf_pabuf
    - DIOCADDRULE takes all addresses from V_pf_pabuf and links
      them into rule.
    
    The ugly part is that if address is a table, then it is initialized
    in DIOCADDRULE, because we need ruleset, and DIOCADDADDR doesn't
    supply ruleset. But if address is a dynaddr, we need address family,
    and address family could be different for different addresses in one
    rule, so dynaddr is initialized in DIOCADDADDR.
    
    This leads to the entangled state of addresses on V_pf_pabuf. Some are
    initialized, and some not. That's why running pf_empty_pool(&V_pf_pabuf)
    can lead to a panic on a NULL table address.
    
    Since proper fix requires API/ABI change, for now simply plug the panic
    in pf_empty_pool().
    
    Reported by:    danger

commit ecb47cf9c5e03d3f0011fd4b9687a87f9808e483
Merge: 0f70759c12df 7e92ce7380d1
Author: Martin Matuska <mm@FreeBSD.org>
Date:   Sun Apr 20 09:17:48 2014 +0000

    Backport from projects/pf r263908:
    
    De-virtualize UMA zone pf_mtag_z and move to global initialization part.
    
    The m_tag struct does not know about vnet context and the pf_mtag_free()
    callback is called unaware of current vnet. This causes a panic.
    
commit 79bde95f51be75e30a1b26c1e6ed2cd07d889419
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Wed Apr 16 09:25:20 2014 +0000

    Backout r257223,r257224,r257225,r257246,r257710. The changes caused
    some regressions in ICMP handling, and right now me and Baptiste
    are out of time on analyzing them.
    
    PR:             188253

commit 42311ccc0b9dd70d377189ac90aa100503c90796
Merge: 9d3cc729fb71 0a7c583acc77
Author: Martin Matuska <mm@FreeBSD.org>
Date:   Mon Apr 7 07:06:13 2014 +0000

    Merge from projects/pf r264198:
    Execute pf_overload_task() in vnet context. Fixes a vnet kernel panic.
    
commit 0a7c583acc77e4a2b1b5b695ef547a3263433efc
Author: Martin Matuska <mm@FreeBSD.org>
Date:   Sun Apr 6 19:19:25 2014 +0000

    Execute pf_overload_task() in vnet context. Fixes a vnet kernel panic.
    

commit 7e92ce7380d106e692a8210b7417a9844080fdde
Author: Martin Matuska <mm@FreeBSD.org>
Date:   Sat Mar 29 09:05:25 2014 +0000

    De-virtualize UMA zone pf_mtag_z and move to global initialization part.
    
    The m_tag struct does not know about vnet context and the pf_mtag_free()
    callback is called unaware of current vnet. This causes a panic.
    

commit 1709ccf9d38a5753192420ce5fccd93b04ce4d07
Merge: 5748b897da44 bf5a54b2012e
Author: Martin Matuska <mm@FreeBSD.org>
Date:   Sat Mar 29 08:39:53 2014 +0000

    Merge head up to r263906.

commit d318d97fb5855e2ba0305656caba22989dc8d391
Merge: 37dbba2a4456 6828cc99e14e
Author: Martin Matuska <mm@FreeBSD.org>
Date:   Tue Mar 25 06:55:53 2014 +0000

    Merge from projects/pf r251993 (glebius@):
    
    De-vnet hash sizes and hash masks.
    
    Submitted by:   Nikos Vassiliadis <nvass gmx.com>
    
commit e3a7aa6f56f9377fc576988a41986b3832b038cf
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Wed Mar 5 01:17:47 2014 +0000

    - Remove rt_metrics_lite and simply put its members into rtentry.
    - Use counter(9) for rt_pksent (former rt_rmx.rmx_pksent). This
      removes another cache trashing ++ from packet forwarding path.
    - Create zini/fini methods for the rtentry UMA zone. Via initialize
      mutex and counter in them.
    - Fix reporting of rmx_pksent to routing socket.
    - Fix netstat(1) to report "Use" both in kvm(3) and sysctl(3) mode.
    
    The change is mostly targeted for stable/10 merge. For head,
    rt_pksent is expected to just disappear.
    
    Discussed with:         melifaro

commit fb3541ad15f18d7dd4149c314e7a53d5013f6d04
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Wed Mar 5 00:40:03 2014 +0000

    Instead of playing games with casts simply add 3 more members to the
    structure pf_rule, that are used when the structure is passed via
    ioctl().
    
    PR:             187074

commit 5748b897da441d1f10e1fe0c39155ea33d6d383a
Merge: 654957c2c861 2067168264b9
Author: Martin Matuska <mm@FreeBSD.org>
Date:   Wed Feb 19 22:02:15 2014 +0000

    Merge head up to r262222 (last merge was incomplete).

commit dc64d6b7e165edc90643ae509a241a1e7e8ed962
Author: Martin Matuska <mm@FreeBSD.org>
Date:   Wed Feb 19 17:06:04 2014 +0000

    Revert r262196
    
    I am going to split this into two individual patches and test it with
    the projects/pf branch that may get merged later.

commit a93b9a64fe2ffeea5e8b55943b189fbb7af7d5a3
Author: Martin Matuska <mm@FreeBSD.org>
Date:   Tue Feb 18 22:17:12 2014 +0000

    De-virtualize pf_mtag_z [1]
    Process V_pf_overloadqueue in vnet context [2]
    
    This fixes two VIMAGE kernel panics and allows to simultaneously run host-pf
    and vnet jails. pf inside jails remains broken.
    
    PR:             kern/182964
    Submitted by:   glebius@FreeBSD.org [2], myself [1]
    Tested by:      rodrigc@FreeBSD.org, myself

commit 48278b884656bf960d81fd9556f1203b176749e2
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Fri Feb 14 10:05:21 2014 +0000

    Once pf became not covered by a single mutex, many counters in it became
    race prone. Some just gather statistics, but some are later used in
    different calculations.
    
    A real problem was the race provoked underflow of the states_cur counter
    on a rule. Once it goes below zero, it wraps to UINT32_MAX. Later this
    value is used in pf_state_expires() and any state created by this rule
    is immediately expired.
    
    Thus, make fields states_cur, states_tot and src_nodes of struct
    pf_rule be counter(9)s.
    
    Thanks to Dennis for providing me shell access to problematic box and
    his help with reproducing, debugging and investigating the problem.
    
    Thanks to:              Dennis Yusupoff <dyr smartspb.net>
    Also reported by:       dumbbell, pgj, Rambler

commit be3d21a2cfd6ed249bed26ba28cd7e4573e67c00
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Wed Jan 22 15:58:43 2014 +0000

    Remove NULL pointer dereference.
    
    CID:    1009118

commit d26bbeb948c00ce5bd39a09c1ddbc2725f87ad18
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Wed Jan 22 15:44:38 2014 +0000

    Fix resource leak and simplify code for DIOCCHANGEADDR.
    
    CID:    1007035

commit a830c4524d006f490a8ccddd50dc10b6783f7268
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Mon Jan 6 19:05:04 2014 +0000

    When pf_get_translation() fails, it should leave *sn pointer pristine,
    otherwise we will panic in pf_test_rule().
    
    PR:             182557

commit 85838e48bd0aed4296659a3eb432d2cb58cb6658
Author: Dimitry Andric <dim@FreeBSD.org>
Date:   Sun Dec 22 19:47:22 2013 +0000

    Fix incorrect header guard define in sys/netpfil/pf/pf.h, which snuck in
    in r257186.  Found by clang 3.4.

commit 0b5d46ce4da8c350c2abf469461c7e87b832498a
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Sun Dec 22 12:10:36 2013 +0000

    Fix fallout from r258479: in pf_free_src_node() the node must already
    be unlinked.
    
    Reported by:    Konstantin Kukushkin <dark rambler-co.ru>

commit 19acaecac3e423c2c667a1deecfcfcc5687ce45a
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Fri Nov 22 19:22:26 2013 +0000

    The DIOCKILLSRCNODES operation was implemented with O(m*n) complexity,
    where "m" is number of source nodes and "n" is number of states. Thus,
    on heavy loaded router its processing consumed a lot of CPU time.
    
    Reimplement it with O(m+n) complexity. We first scan through source
    nodes and disconnect matching ones, putting them on the freelist and
    marking with a cookie value in their expire field. Then we scan through
    the states, detecting references to source nodes with a cookie, and
    disconnect them as well. Then the freelist is passed to pf_free_src_nodes().
    
    In collaboration with:  Kajetan Staszkiewicz <kajetan.staszkiewicz innogames.de>
    PR:             kern/176763

commit d77c1b3269b9d7dd340d36191bf42126af488557
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Fri Nov 22 19:16:34 2013 +0000

    To support upcoming changes change internal API for source node handling:
    - Removed pf_remove_src_node().
    - Introduce pf_unlink_src_node() and pf_unlink_src_node_locked().
      These function do not proceed with freeing of a node, just disconnect
      it from storage.
    - New function pf_free_src_nodes() works on a list of previously
      disconnected nodes and frees them.
    - Utilize new API in pf_purge_expired_src_nodes().
    
    In collaboration with:  Kajetan Staszkiewicz <kajetan.staszkiewicz innogames.de>
    
commit 1320f8c0d5495a69802a7b83a55e77bba078d94d
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Fri Nov 22 18:57:27 2013 +0000

    Fix off by ones when scanning source nodes hash.
    
commit 4280d14d2bb41799dfb53890881a41216ad541be
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Fri Nov 22 18:54:06 2013 +0000

    Style: don't compare unsigned <= 0.
    
commit 654957c2c861b1483df873678439699c0dfeeb94
Merge: f053058ceee2 c5068af55943
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Tue Nov 19 12:21:47 2013 +0000

    Merge head up to r258343.

commit f053058ceee274352b1ad18f292f8e52b2e69027
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Mon Nov 18 22:18:07 2013 +0000

    - Split functions that initialize various pf parts into their vimage
      parts and global parts.
    - Since global parts appeared to be only mutex initializations, just
      abandon them and use MTX_SYSINIT() instead.
    - Kill my incorrect VNET_FOREACH() iterator and instead use correct
      approach with VNET_SYSINIT().
    
    Submitted by:   Nikos Vassiliadis <nvass gmx.com>

commit e4e01d9ceca35fc787ca6d0cf91acaf66ccd8e09
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Thu Nov 14 14:20:35 2013 +0000

    Some fixups to pf_get_sport after r257223:
    
    - Do not return blindly if proto isn't ICMP.
    - The dport is in network order, so fix comparisons.
    - Remove ridiculous htonl(arc4random()).
    - Push local variable to a narrower block.

commit 50d3286d9dbd7bec7aef9c7ac76eaa690a760bec
Merge: f9b2a21c9eb4 0adcb21d0292
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Mon Nov 11 20:33:25 2013 +0000

    Merge head r232040 through r258006.

commit 6c71335c62cc9d8273aeb6800b78b5fe81683fba
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Tue Nov 5 16:54:25 2013 +0000

    Fix fallout from r257223. Since pf_test_state_icmp() can call
    pf_icmp_state_lookup() twice, we need to unlock previously found state.
    
    Reported & tested by:   gavin

commit e1b58d2cff8ad5583295fbe1793b18edc71af14d
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Mon Nov 4 08:20:06 2013 +0000

    Code logic of handling PFTM_PURGE into pf_find_state().

commit 7710f9f14a92744b65a87e7b29563923f116b1ff
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Mon Nov 4 08:15:59 2013 +0000

    Remove unused PFTM_UNTIL_PACKET const.

commit f9b2a21c9eb4d2715be82dc9049eae29fdb40d17
Merge: 0bfd163f5227 5b74cfe42faa
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Thu Oct 31 17:33:29 2013 +0000

    Merge head r232040 through r257457.
    M    usr.sbin/portsnap/portsnap/portsnap.8
    M    usr.sbin/portsnap/portsnap/portsnap.sh
    M    usr.sbin/tcpdump/tcpdump/Makefile

commit 1ce5620d32668a549ff1ea745e622134c088bcce
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Mon Oct 28 10:12:19 2013 +0000

    - Fix VIMAGE build.
    - Fix build with gcc.

commit 0664b03c16e4f27927180a05794327ba1786f21c
Author: Baptiste Daroussin <bapt@FreeBSD.org>
Date:   Sun Oct 27 20:56:23 2013 +0000

    Import pf.c 1.638 from OpenBSD
    
    Original log:
    Some ICMP types that also have icmp_id, pointed out by markus@
    
    Obtained from:  OpenBSD

> 8c0632cd274b40630a5b61155b5258bd8e0829d9

commit 5fff3f1010134e6bd213132ea4de3681425a9214
Author: Baptiste Daroussin <bapt@FreeBSD.org>
Date:   Sun Oct 27 20:52:09 2013 +0000

    Improt pf.c 1.636 from OpenBSD
    
    Original log:
    Make sure pd2 has a pointer to the icmp header in the payload; fixes
    panic seen with some some icmp types in icmp error message payloads.
    
    Obtained from:  OpenBSD

> 016929412c6906368950e38a478feca1fa1c9351

commit 44df0d9356ee0b423ff0d5e8da49525e26bdac90
Author: Baptiste Daroussin <bapt@FreeBSD.org>
Date:   Sun Oct 27 20:44:42 2013 +0000

    Import pf.c 1.635 and pf_lb.c 1.4 from OpenBSD
    
    Stricter state checking for ICMP and ICMPv6 packets: include the ICMP type
    
    in one port of the state key, using the type to determine which
    side should be the id, and which should be the type. Also:
    - Handle ICMP6 messages which are typically sent to multicast
      addresses but recieve unicast replies, by doing fallthrough lookups
      against the correct multicast address.  - Clear up some mistaken
      assumptions in the PF code:
    - Not all ICMP packets have an icmp_id, so simulate
      one based on other data if we can, otherwise set it to 0.
      - Don't modify the icmp id field in NAT unless it's echo
      - Use the full range of possible id's when NATing icmp6 echoy
    
    Difference with OpenBSD version:
    - C99ify the new code
    - WITHOUT_INET6 safe
    
    Obtained from:  OpenBSD

commit 75bf2db38065cafe6b1716e5e66a00962866d5bf
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Sun Oct 27 16:25:57 2013 +0000

    Move new pf includes to the pf directory. The pfvar.h remain
    in net, to avoid compatibility breakage for no sake.
    
    The future plan is to split most of non-kernel parts of
    pfvar.h into pf.h, and then make pfvar.h a kernel only
    include breaking compatibility.
    
    Discussed with:         bz

commit eedc7fd9e87e86d636304611a29e53cecb3a57a1
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Sat Oct 26 18:18:50 2013 +0000

    Provide includes that are needed in these files, and before were read
    in implicitly via if.h -> if_var.h pollution.
    
commit 76039bc84fae9915788b54ff28fe0cc4876952d2
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Sat Oct 26 17:58:36 2013 +0000

    The r48589 promised to remove implicit inclusion of if_var.h soon. Prepare
    to this event, adding if_var.h to files that do need it. Also, include
    all includes that now are included due to implicit pollution via if_var.h
    
commit 0bfd163f522701b486e066fa2e56624c02f5081a
Merge: 6828cc99e14e d48971d0d2de
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Fri Oct 18 09:32:02 2013 +0000

    Merge head r233826 through r256722.

commit 8fc6e19c2cb11354b05d5d53798f487e79724012
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Mon Sep 2 10:14:25 2013 +0000

    Merge 1.12 of pf_lb.c from OpenBSD, with some changes. Original commit:
    
      date: 2010/02/04 14:10:12;  author: sthen;  state: Exp;  lines: +24 -19;
      pf_get_sport() picks a random port from the port range specified in a
      nat rule. It should check to see if it's in-use (i.e. matches an existing
      PF state), if it is, it cycles sequentially through other ports until
      it finds a free one. However the check was being done with the state
      keys the wrong way round so it was never actually finding the state
      to be in-use.
    
      - switch the keys to correct this, avoiding random state collisions
      with nat. Fixes PR 6300 and problems reported by robert@ and viq.
    
      - check pf_get_sport() return code in pf_test(); if port allocation
      fails the packet should be dropped rather than sent out untranslated.
    
      Help/ok claudio@.
    
    Some additional changes to 1.12:
    
    - We also need to bzero() the key to zero padding, otherwise key
      won't match.
    - Collapse two if blocks into one with ||, since both conditions
      lead to the same processing.
    - Only naddr changes in the cycle, so move initialization of other
      fields above the cycle.
    - s/u_intXX_t/uintXX_t/g
    
    PR:             kern/181690
    Submitted by:   Olivier Cochard-Labbé <olivier cochard.me>

> 0c449d8997416a3237f58655ac29a655a936c8d5

commit 86bd0491442e667469d72d133cf07945362f7dad
Author: Andre Oppermann <andre@FreeBSD.org>
Date:   Mon Aug 19 13:27:32 2013 +0000

    Add m_clrprotoflags() to clear protocol specific mbuf flags at up and
    downwards layer crossings.
    
    Consistently use it within IP, IPv6 and ethernet protocols.
    
    Discussed with: trociny, glebius

commit 415077bad99eb697b23b373895be97c4c69e10eb
Author: Andrey V. Elsukov <ae@FreeBSD.org>
Date:   Mon Jul 29 13:17:18 2013 +0000

    Fix a possible NULL-pointer dereference on the pfsync(4) reconfiguration.
    
    Reported by:    Eugene M. Zheganin

commit 6828cc99e14e0354a0890b91b76edbb0a8e8a3b9
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Wed Jun 19 13:37:29 2013 +0000

    De-vnet hash sizes and hash masks.
    
    Submitted by:   Nikos Vassiliadis <nvass gmx.com>

commit 93ecffe50bd152f736078cd910001c735da9aeb3
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Thu Jun 13 06:07:19 2013 +0000

    Improve locking strategy between keys hash and ID hash.
    
    Before this change state creating sequence was:
    
    1) lock wire key hash
    2) link state's wire key
    3) unlock wire key hash
    4) lock stack key hash
    5) link state's stack key
    6) unlock stack key hash
    7) lock ID hash
    8) link into ID hash
    9) unlock ID hash
    
    What could happen here is that other thread finds the state via key
    hash lookup after 6), locks ID hash and does some processing of the
    state. When the thread creating state unblocks, it finds the state
    it was inserting already non-virgin.
    
    Now we perform proper interlocking between key hash locks and ID hash
    lock:
    
    1) lock wire & stack hashes
    2) link state's keys
    3) lock ID hash
    4) unlock wire & stack hashes
    5) link into ID hash
    6) unlock ID hash
    
    To achieve that, the following hacking was performed in pf_state_key_attach():
    
    - Key hash mutex is marked with MTX_DUPOK.
    - To avoid deadlock on 2 key hash mutexes, we lock them in order determined
      by their address value.
    - pf_state_key_attach() had a magic to reuse a > FIN_WAIT_2 state. It unlinked
      the conflicting state synchronously. In theory this could require locking
      a third key hash, which we can't do now.
      Now we do not remove the state immediately, instead we leave this task to
      the purge thread. To avoid conflicts in a short period before state is
      purged, we push to the very end of the TAILQ.
    - On success, before dropping key hash locks, pf_state_key_attach() locks
      ID hash and returns.
    
    Tested by:      Ian FREISLICH <ianf clue.co.za>

commit 5af77b3ebd031f3b9bbd8b0db29da144886f274a
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Sat May 11 18:06:51 2013 +0000

    Return meaningful error code from pf_state_key_attach() and
    pf_state_insert().

commit 03911dec5ba264602cb56c76b9ee5cb38eca6186
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Sat May 11 18:03:36 2013 +0000

    Better debug message.

commit 048c95417d45bf6b197f989288778ccc6bf5c2ab
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Sat May 11 17:58:26 2013 +0000

    Fix DIOCADDSTATE operation.

commit b69d74e83491e4d122f0fda188aa0fd4fc51ac8b
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Sat May 11 17:57:52 2013 +0000

    Invalid creatorid is always EINVAL, not only when we are in verbose mode.

commit f8aa444783975f9f7ace273b06d485727351b3a5
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Mon May 6 21:44:06 2013 +0000

    Improve KASSERT() message.

commit 7a954bbbcefc40b5c4b805faf0b2baeb33efc71f
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Mon May 6 21:43:15 2013 +0000

    Simplify printf().

commit 47e8d432d5db395e2812c03093b70227e48a1c6d
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Fri Apr 26 12:50:32 2013 +0000

    Add const qualifier to the dst parameter of the ifnet if_output method.

commit dc4ad05ecdb2ffe15cb9ed3163c47649489adae0
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Fri Mar 15 12:55:30 2013 +0000

    Use m_get/m_gethdr instead of compat macros.
    
commit 41a7572b26da5acade4565f8cf943b13ac6fedb5
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Tue Mar 12 13:42:47 2013 +0000

    Functions m_getm2() and m_get2() have different order of arguments,
    and that can drive someone crazy. While m_get2() is young and not
    documented yet, change its order of arguments to match m_getm2().
    
    Sorry for churn, but better now than later.

commit e2a55a0021dc0b7d7c07300d64d698f9eb62ebdc
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Fri Feb 15 09:03:56 2013 +0000

    Finish the r244185. This fixes ever growing counter of pfsync bad
    length packets, which was actually harmless.
    
    Note that peers with different version of head/ may grow this
    counter, but it is harmless - all pfsync data is processed.
    
    Reported & tested by:   Anton Yuzhaninov <citrin citrin.ru>

commit d8aa10cc35d4541bf5ad134755cb1136dd84a428
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Fri Dec 28 09:19:49 2012 +0000

    In netpfil/pf:
      - Add my copyright to files I've touched a lot this year.
      - Add dash in front of all copyright notices according to style(9).
      - Move $OpenBSD$ down below copyright notices.
      - Remove extra line between cdefs.h and __FBSDID.

commit f5002be657292f835309226f688e1ba9dc0ccf0b
Author: Pawel Jakub Dawidek <pjd@FreeBSD.org>
Date:   Mon Dec 17 10:10:13 2012 +0000

    Warn about reaching various PF limits.
    
    Obtained from:  WHEEL Systems

commit bf1e95a21c807e08bbfb58bd449dd0d98f0b53c3
Author: Mikolaj Golub <trociny@FreeBSD.org>
Date:   Sat Dec 15 17:19:36 2012 +0000

    In pfioctl, if the permission checks failed we returned with vnet context
    set.
    
    As the checks don't require vnet context, this is fixed by setting
    vnet after the checks.
    
    PR:             kern/160541
    Submitted by:   Nikos Vassiliadis (slightly different approach)

commit f094f811fb71f2e0a19832004ad4eb4cfa620b25
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Fri Dec 14 13:01:16 2012 +0000

      Fix error in r235991. No-sleep version of IFNET_RLOCK() should
    be used here, since we may hold the main pf rulesets rwlock.
    
    Reported by:    Fleuriot Damien <ml my.gd>

commit 4c794f5c06bf5d3c445d02475c98be162fee2804
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Fri Dec 14 08:02:35 2012 +0000

    Fix VIMAGE build broken in r244185.
    
    Submitted by:   Nikolai Lifanov <lifanov mail.lifanov.com>

commit 9ff7e6e922dd36293d1c794b63535b3a1cd053b8
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Thu Dec 13 12:51:22 2012 +0000

    Merge rev. 1.119 from OpenBSD:
    
      date: 2009/03/31 01:21:29;  author: dlg;  state: Exp;  lines: +9 -16
      ...
    
      this also firms up some of the input parsing so it handles short frames a
      bit better.
    
    This actually fixes reading beyond mbuf data area in pfsync_input(), that
    may happen at certain pfsync datagrams.

> 4d0211cf9f8bb1913573f0d72391352510e25670

commit feaa4dd2d0d87a83a669c0d9e26a80c7d08ac096
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Thu Dec 13 12:48:57 2012 +0000

      Initialize state id prior to attaching state to key hash. Otherwise a
    race can happen, when pf_find_state() finds state via key hash, and locks
    id hash slot 0 instead of appropriate to state id slot.

commit fed7635002480fe6102f47bb4254dbaf567ec7a5
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Tue Dec 11 08:37:08 2012 +0000

    Merge 1.127 from OpenBSD, that closes a regression from 1.125 (merged
    as r242694):
      do better detection of when we have a better version of the tcp sequence
      windows than our peer.
    
      this resolves the last of the pfsync traffic storm issues ive been able to
      produce, and therefore makes it possible to do usable active-active
      statuful firewalls with pf.

> 0c82a00626b1448ae73e168721fe336d83a4a648

commit 59cc9fde4f858e2636d1398c97ab6e7cd71ee88a
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Thu Dec 6 08:38:14 2012 +0000

      Rule memory garbage collecting in new pf scans only states that are on
    id hash. If a state has been disconnected from id hash, its rule pointers
    can no longer be dereferenced, and referenced memory can't be modified.
    Thus, move rule statistics from pf_free_rule() to pf_unlink_rule() and
    update them prior to releasing id hash slot lock.
    
    Reported by:    Ian FREISLICH <ianf cloudseed.co.za>

commit 38cc0bfa261be414833920add3f47e8390c45e1f
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Thu Dec 6 08:32:28 2012 +0000

    Close possible races between state deletion and sent being sent out
    from pfsync:
    - Call into pfsync_delete_state() holding the state lock.
    - Set the state timeout to PFTM_UNLINKED after state has been moved
      to the PFSYNC_S_DEL queue in pfsync.
    
    Reported by:    Ian FREISLICH <ianf cloudseed.co.za>

commit 8db7e13f1dc2bb78437832c0709ea5eeb78b5503
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Thu Dec 6 08:22:08 2012 +0000

      Remove extra PFSYNC_LOCK() in pfsync_bulk_update() which lead to lock
    recursion.
    
    Reported by:    Ian FREISLICH <ianf cloudseed.co.za>

commit 5da39c565b16957188f11a6c065303c493080a5f
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Thu Dec 6 08:15:06 2012 +0000

      Revert erroneous r242693. A state may have PFTM_UNLINKED being on the
    PFSYNC_S_DEL queue of pfsync.

commit f18ab0ffa3fe5d96634ecc33949cac3cc26e3338
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Wed Nov 7 07:35:05 2012 +0000

    Merge rev. 1.125 from OpenBSD:
      date: 2009/06/12 02:03:51;  author: dlg;  state: Exp;  lines: +59 -69
      rewrite the way states from pfsync are merged into the local state tree
      and the conditions on which pfsync will notify its peers on a stale update.
    
      each side (ie, the sending and receiving side) of the state update is
      compared separately. any side that is further along than the local state
      tree is merged. if any side is further along in the local state table, an
      update is sent out telling the peers about it.

> f448e3942d51b9f0e67d6b912da66371aafd218d

commit d75efebeab7ec2a2b3b0424c1901cc9d5b23dd8f
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Wed Nov 7 07:30:40 2012 +0000

    It may happen that pfsync holds the last reference on a state. In this
    case keys had already been freed. If encountering such state, then
    just release last reference.
    
    Not sure this can happen as a runtime race, but can be reproduced by
    the following scenario:
    
    - enable pfsync
    - disable pfsync
    - wait some time
    - enable pfsync

commit 078468ede4efa8d3d231e41c4fe73c392e50a704
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Fri Oct 26 21:06:33 2012 +0000

    o Remove last argument to ip_fragment(), and obtain all needed information
      on checksums directly from mbuf flags. This simplifies code.
    o Clear CSUM_IP from the mbuf in ip_fragment() if we did checksums in
      hardware. Some driver may not announce CSUM_IP in theur if_hwassist,
      although try to do checksums if CSUM_IP set on mbuf. Example is em(4).
    o While here, consistently use CSUM_IP instead of its alias CSUM_DELAY_IP.
      After this change CSUM_DELAY_IP vanishes from the stack.
    
    Submitted by:   Sebastian Kuzminsky <seb lineratesystems.com>

commit 8f134647ca14b930e2ab01b4192ce895127a6e02
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Mon Oct 22 21:09:03 2012 +0000

      Switch the entire IPv4 stack to keep the IP packet header
    in network byte order. Any host byte order processing is
    done in local variables and host byte order values are
    never[1] written to a packet.
    
      After this change a packet processed by the stack isn't
    modified at all[2] except for TTL.
    
      After this change a network stack hacker doesn't need to
    scratch his head trying to figure out what is the byte order
    at the given place in the stack.
    
    [1] One exception still remains. The raw sockets convert host
    byte order before pass a packet to an application. Probably
    this would remain for ages for compatibility.
    
    [2] The ip_input() still subtructs header len from ip->ip_len,
    but this is planned to be fixed soon.
    
    Tested by:      ray, Olivier Cochard-Labbe <olivier cochard.me>

commit 42a58907c35af91de3028f15c0039f73149bf732
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Tue Oct 16 13:37:54 2012 +0000

    Make the "struct if_clone" opaque to users of the cloning API. Users
    now use function calls:
    
      if_clone_simple()
      if_clone_advanced()
    
    to initialize a cloner, instead of macros that initialize if_clone
    structure.
    
    Discussed with:         brooks, bz, 1 year ago

commit 9823d52705ad71f19ef2205aa729547ac396e3eb
Author: Kevin Lo <kevlo@FreeBSD.org>
Date:   Wed Oct 10 08:36:38 2012 +0000

    Revert previous commit...
    
    Pointyhat to:   kevlo (myself)

commit a10cee30c94cf5944826d2a495e9cdf339dfbcc8
Author: Kevin Lo <kevlo@FreeBSD.org>
Date:   Tue Oct 9 08:27:40 2012 +0000

    Prefer NULL over 0 for pointers

commit b833c0d990c97cd83ea5c9a091756d3b1c779b20
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Mon Oct 8 23:02:32 2012 +0000

    Any pfil(9) hooks should be called with already set VNET context.
    

commit 23e9c6dc1ecc5660dbf815858ca2291f550c0951
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Mon Oct 8 08:03:58 2012 +0000

      After r241245 it appeared that in_delayed_cksum(), which still expects
    host byte order, was sometimes called with net byte order. Since we are
    moving towards net byte order throughout the stack, the function was
    converted to expect net byte order, and its consumers fixed appropriately:
      - ip_output(), ipfilter(4) not changed, since already call
        in_delayed_cksum() with header in net byte order.
      - divert(4), ng_nat(4), ipfw_nat(4) now don't need to swap byte order
        there and back.
      - mrouting code and IPv6 ipsec now need to switch byte order there and
        back, but I hope, this is temporary solution.
      - In ipsec(4) shifted switch to net byte order prior to in_delayed_cksum().
      - pf_route() catches up on r241245 changes to ip_output().

commit 21d172a3f17d63c16991f0313fe5de2353043d5b
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Sat Oct 6 10:02:11 2012 +0000

      A step in resolving mess with byte ordering for AF_INET. After this change:
    
      - All packets in NETISR_IP queue are in net byte order.
      - ip_input() is entered in net byte order and converts packet
        to host byte order right _after_ processing pfil(9) hooks.
      - ip_output() is entered in host byte order and converts packet
        to net byte order right _before_ processing pfil(9) hooks.
      - ip_fragment() accepts and emits packet in net byte order.
      - ip_forward(), ip_mloopback() use host byte order (untouched actually).
      - ip_fastforward() no longer modifies packet at all (except ip_ttl).
      - Swapping of byte order there and back removed from the following modules:
        pf(4), ipfw(4), enc(4), if_bridge(4).
      - Swapping of byte order added to ipfilter(4), based on __FreeBSD_version
      - __FreeBSD_version bumped.
      - pfil(9) manual page updated.
    
    Tested by:      glebius (LE), ray (BE)

commit ea2951beedb7ea869cc7e602d1d8474dfcccd1dd
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Sat Oct 6 07:06:57 2012 +0000

      The pfil(9) layer guarantees us presence of the protocol header,
    so remove extra check, that is always false.
    
    P.S. Also, goto there lead to unlocking a not locked rwlock.

commit aa955cb5b82c3db6868fc55694dd5eff80007fc4
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Tue Oct 2 12:44:46 2012 +0000

    To reduce volume of pfsync traffic:
    - Scan request update queue to prevent doubles.
    - Do not push undersized daragram in pfsync_update_request().

commit 7b6fbb7367f06f0fd7944fd2342f32d0628ce409
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Sat Sep 29 20:11:00 2012 +0000

    Clear and re-setup all function pointers that glue pf(4) and pfsync(4)
    together whenever the pfsync0 is brought down or up respectively.

commit 0fa4aaa7e6907afd0161c6b0ba1abefd8e9c97ab
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Sat Sep 29 20:02:26 2012 +0000

    Simplify send out queue code:
    - Write method of a queue now is void,length of item is taken
      as queue property.
    - Write methods don't need to know about mbud, supply just buf
      to them.
    - No need for safe queue iterator in pfsync_sendout().
    
    Obtained from:  OpenBSD

commit e2cfe4243055cdcf17eeb50672bfa14729789129
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Fri Sep 28 20:43:03 2012 +0000

    Simplify and somewhat redesign interaction between pf_purge_thread() and
    pf_purge_expired_states().
    
    Now pf purging daemon stores the current hash table index on stack
    in pf_purge_thread(), and supplies it to next iteration of
    pf_purge_expired_states(). The latter returns new index back.
    
    The important change is that whenever pf_purge_expired_states() wraps
    around the array it returns immediately. This makes our knowledge about
    status of states expiry run more consistent. Prior to this change it
    could happen that n-th run stopped on i-th entry, and returned (1) as
    full run complete, then next (n+1) full run stopped on j-th entry, where
    j < i, and that broke the mark-and-sweep algorythm that saves references
    rules. A referenced rule was freed, and this later lead to a crash.

commit 51e02a31d044cd5c47c5bc0c432de0c9e517e2bc
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Sat Sep 22 19:03:11 2012 +0000

    EBUSY is a better reply for refusing to unload pf(4) or pfsync(4).
    
    Submitted by:   pluknet

commit 29bdd62c85c2b9e28df4dca300caa8a769d6b0bf
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Sat Sep 22 10:14:47 2012 +0000

    When connection rate hits and we overload a source to a table,
    we are actually editing table, which means editing rules,
    thus we need writer access to 'em.
    
    Fix this by offloading the update of table to the same taskqueue,
    we already use for flushing. Since taskqueues major task is now
    overloading, and flushing is optional, do mechanical rename
    s/flush/overload/ in the code related to the taskqueue.
    
    Since overloading tasks do unsafe referencing of rules, provide
    a bandaid in pf_purge_unlinked_rules(). If the latter sees any
    queued tasks, then it skips purging for this run.
    
    In table code:
    - Assert any lock in pfr_lookup_addr().
    - Assert writer lock in pfr_route_kentry().

commit e706fd3a3a17178fe2f72084620aa3298fecc591
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Sat Sep 22 10:04:48 2012 +0000

    In pfr_insert_kentry() return ENOMEM if memory allocation failed.

commit 7348c5240d1a35aea8e23e5da460483bc3084c37
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Sat Sep 22 10:02:44 2012 +0000

    Fix fallout from r236397 in pfr_update_stats(), that was missed
    later in r237155. We need to zero sockaddr before lookup. While
    here, make pfr_update_stats() panic on unknown af.

commit b7340ded6ef8b86c18ced63a6a142e7924f8a321
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Thu Sep 20 07:04:08 2012 +0000

    Reduce copy/paste when freeing an source node.

commit 22c914789e8cbaa4858e0e1002f838b850a25668
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Thu Sep 20 06:52:05 2012 +0000

    Utilize Jenkins hash with random seed for source nodes storage.

commit 7f7ef494f11d89442977cc4a1d7ed733cce88300
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Tue Sep 18 11:07:19 2012 +0000

    Provide kernel compile time option to make pf(4) default rule to drop.
    
    This is important to secure a small timeframe at boot time, when
    network is already configured, but pf(4) is not yet.
    
    PR:             kern/171622
    Submitted by:   Olivier Cochard-LabbИ <olivier cochard.me>

commit 1d6139c0e41a4c029e9ba073b41f4402f571f5a6
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Tue Sep 18 10:54:56 2012 +0000

    Make ruleset anchors in pf(4) reentrant. We've got two problems here:
    
    1) Ruleset parser uses a global variable for anchor stack.
    2) When processing a wildcard anchor, matching anchors are marked.
    
    To fix the first one:
    
    o Allocate anchor processing stack on stack. To make this allocation
      as small as possible, following measures taken:
      - Maximum stack size reduced from 64 to 32.
      - The struct pf_anchor_stackframe trimmed by one pointer - parent.
        We can always obtain the parent via the rule pointer.
      - When pf_test_rule() calls pf_get_translation(), the former lends
        its stack to the latter, to avoid recursive allocation 32 entries.
    
    The second one appeared more tricky. The code, that marks anchors was
    added in OpenBSD rev. 1.516 of pf.c. According to commit log, the idea
    is to enable the "quick" keyword on an anchor rule. The feature isn't
    documented anywhere. The most obscure part of the 1.516 was that code
    examines the "match" mark on a just processed child, which couldn't be
    put here by current frame. Since this wasn't documented even in the
    commit message and functionality of this is not clear to me, I decided
    to drop this examination for now. The rest of 1.516 is redone in a
    thread safe manner - the mark isn't put on the anchor itself, but on
    current stack frame. To avoid growing stack frame, we utilize LSB
    from the rule pointer, relying on kernel malloc(9) returning pointer
    aligned addresses.
    
    Discussed with:         dhartmei

commit effbcf38424fe163d04f1f4339e7fd3455066557
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Tue Sep 18 09:15:32 2012 +0000

    Fix DIOCNATLOOK: zero key padding before performing lookup.

commit 3b3a8eb937bf8045231e8364bfd1b94cd4a95979
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Fri Sep 14 11:51:49 2012 +0000

    o Create directory sys/netpfil, where all packet filters should
      reside, and move there ipfw(4) and pf(4).
    
    o Move most modified parts of pf out of contrib.
    
    Actual movements:
    
    sys/contrib/pf/net/*.c          -> sys/netpfil/pf/
    sys/contrib/pf/net/*.h          -> sys/net/
    contrib/pf/pfctl/*.c            -> sbin/pfctl
    contrib/pf/pfctl/*.h            -> sbin/pfctl
    contrib/pf/pfctl/pfctl.8        -> sbin/pfctl
    contrib/pf/pfctl/*.4            -> share/man/man4
    contrib/pf/pfctl/*.5            -> share/man/man5
    
    sys/netinet/ipfw                -> sys/netpfil/ipfw
    
    The arguable movement is pf/net/*.h -> sys/net. There are
    future plans to refactor pf includes, so I decided not to
    break things twice.
    
    Not modified bits of pf left in contrib: authpf, ftp-proxy,
    tftp-proxy, pflogd.
    
    The ipfw(4) movement is planned to be merged to stable/9,
    to make head and stable match.
    
    Discussed with:         bz, luigi

commit 3b3a8eb937bf8045231e8364bfd1b94cd4a95979
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Fri Sep 14 11:51:49 2012 +0000

    o Create directory sys/netpfil, where all packet filters should
      reside, and move there ipfw(4) and pf(4).
    
    o Move most modified parts of pf out of contrib.
    
    Actual movements:
    
    sys/contrib/pf/net/*.c          -> sys/netpfil/pf/
    sys/contrib/pf/net/*.h          -> sys/net/
    contrib/pf/pfctl/*.c            -> sbin/pfctl
    contrib/pf/pfctl/*.h            -> sbin/pfctl
    contrib/pf/pfctl/pfctl.8        -> sbin/pfctl
    contrib/pf/pfctl/*.4            -> share/man/man4
    contrib/pf/pfctl/*.5            -> share/man/man5
    
    sys/netinet/ipfw                -> sys/netpfil/ipfw
    
    The arguable movement is pf/net/*.h -> sys/net. There are
    future plans to refactor pf includes, so I decided not to
    break things twice.
    
    Not modified bits of pf left in contrib: authpf, ftp-proxy,
    tftp-proxy, pflogd.
    
    The ipfw(4) movement is planned to be merged to stable/9,
    to make head and stable match.
    
    Discussed with:         bz, luigi

commit d6d3f01e0a3395c1fae34a3c4be7b051cb2d7581
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Sat Sep 8 06:41:54 2012 +0000

    Merge the projects/pf/head branch, that was worked on for last six months,
    into head. The most significant achievements in the new code:
    
     o Fine grained locking, thus much better performance.
     o Fixes to many problems in pf, that were specific to FreeBSD port.
    
    New code doesn't have that many ifdefs and much less OpenBSDisms, thus
    is more attractive to our developers.
    
      Those interested in details, can browse through SVN log of the
    projects/pf/head branch. And for reference, here is exact list of
    revisions merged:
    
    r232043, r232044, r232062, r232148, r232149, r232150, r232298, r232330,
    r232332, r232340, r232386, r232390, r232391, r232605, r232655, r232656,
    r232661, r232662, r232663, r232664, r232673, r232691, r233309, r233782,
    r233829, r233830, r233834, r233835, r233836, r233865, r233866, r233868,
    r233873, r234056, r234096, r234100, r234108, r234175, r234187, r234223,
    r234271, r234272, r234282, r234307, r234309, r234382, r234384, r234456,
    r234486, r234606, r234640, r234641, r234642, r234644, r234651, r235505,
    r235506, r235535, r235605, r235606, r235826, r235991, r235993, r236168,
    r236173, r236179, r236180, r236181, r236186, r236223, r236227, r236230,
    r236252, r236254, r236298, r236299, r236300, r236301, r236397, r236398,
    r236399, r236499, r236512, r236513, r236525, r236526, r236545, r236548,
    r236553, r236554, r236556, r236557, r236561, r236570, r236630, r236672,
    r236673, r236679, r236706, r236710, r236718, r237154, r237155, r237169,
    r237314, r237363, r237364, r237368, r237369, r237376, r237440, r237442,
    r237751, r237783, r237784, r237785, r237788, r237791, r238421, r238522,
    r238523, r238524, r238525, r239173, r239186, r239644, r239652, r239661,
    r239773, r240125, r240130, r240131, r240136, r240186, r240196, r240212.
    
    I'd like to thank people who participated in early testing:
    
    Tested by:      Florian Smeets <flo freebsd.org>
    Tested by:      Chekaluk Vitaly <artemrts ukr.net>
    Tested by:      Ben Wilber <ben desync.com>
    Tested by:      Ian FREISLICH <ianf cloudseed.co.za>

commit 6aef0416fb50058e825a9bb398dfe9b3900a8154
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Sun Jul 15 19:10:00 2012 +0000

    Use M_NOWAIT while holding the pf giant lock.

commit 40874f18de0027b8ae8bf303f98a278ef6c69bb7
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Wed Jun 6 09:36:52 2012 +0000

    Merge revision 1.715 from OpenBSD:
    
      date: 2010/12/24 20:12:56;  author: henning;  state: Exp;  lines: +3 -3
      in pf_src_connlimit, the indices to sk->addr were swapped.
      tracked down and diff sent by Robert B Mills <rbmills at sdf.lonestar.org>
      thanks, very good work! ok claudio
    
    Impact is that the "flush" keyword didn't work.
    
    Obtained from:  OpenBSD

> ea7d1040bbc43ec3952ff5bb7c3336e341e159e4

commit 0ad5ef9c8f689ed76e05a3c532c206c9423f3551
Author: Ermal Luçi <eri@FreeBSD.org>
Date:   Thu May 31 20:10:05 2012 +0000

    Correct table counter functionality to not  panic.
    This was caused by not proper initialization of necessary parameters.
    
    PR: 168200

commit bdf942c3f0d8d260cdb78793a3ff32e920844f32
Author: Alexander V. Chernikov <melifaro@FreeBSD.org>
Date:   Thu May 3 08:56:43 2012 +0000

    Revert r234834 per luigi@ request.
    
    Cleaner solution (e.g. adding another header) should be done here.
    
    Original log:
      Move several enums and structures required for L2 filtering from ip_fw_private.h to ip_fw.h.
      Remove ipfw/ip_fw_private.h header from non-ipfw code.
    
    Requested by:      luigi

commit 7bd5e9b1437b09ee68a2f6536b62fcfa65456ace
Author: Alexander V. Chernikov <melifaro@FreeBSD.org>
Date:   Mon Apr 30 10:22:23 2012 +0000

    Move several enums and structures required for L2 filtering from ip_fw_private.h to ip_fw.h.
    Remove ipfw/ip_fw_private.h header from non-ipfw code.
    
commit 59894e4a44474efd8814f96100836c29190582f8
Author: Andrey V. Elsukov <ae@FreeBSD.org>
Date:   Thu Apr 5 04:41:06 2012 +0000

    Fix VIMAGE build.

commit 07b6b55dce035842b2b25d60e4424046d52bb811
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Wed Apr 4 14:47:59 2012 +0000

    Merge from OpenBSD:
      revision 1.173
      date: 2011/11/09 12:36:03;  author: camield;  state: Exp;  lines: +11 -12
      State expire time is a baseline time ("last active") for expiry
      calculations, and does _not_ denote the time when to expire.  So
      it should never be added to (set into the future).
    
      Try to reconstruct it with an educated guess on state import and
      just set it to the current time on state updates.
    
      This fixes a problem on pfsync listeners where the expiry time
      could be double the expected value and cause a lot more states
      to linger.

> 3d99ce6dbe52f552bf8c1a218fc0e12ae056cf73

commit 64484cf6308b2121ad486d45b43090425d19aaa8
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Tue Apr 3 18:09:20 2012 +0000

    Since pf 4.5 import pf(4) has a mechanism to defer
    forwarding a packet, that creates state, until
    pfsync(4) peer acks state addition (or 10 msec
    timeout passes).
    
    This is needed for active-active CARP configurations,
    which are poorly supported in FreeBSD and arguably
    a good idea at all.
    
    Unfortunately by the time of import this feature in
    OpenBSD was turned on, and did not have a switch to
    turn it off. This leaked to FreeBSD.
    
    This change make it possible to turn this feature
    off via ioctl() and turns it off by default.
    
    Obtained from:  OpenBSD

commit 0e2fe5f990c2ae034a5175cfc3048af7294eaad5
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Thu Mar 8 09:20:00 2012 +0000

    Merge from OpenBSD:
    
      revision 1.146
      date: 2010/05/12 08:11:11;  author: claudio;  state: Exp;  lines: +2 -3
      bzero() the full compressed update struct before setting the values.
      This is needed because pf_state_peer_hton() skips some fields in certain
      situations which could result in garbage beeing sent to the other peer.
      This seems to fix the pfsync storms seen by stephan@ and so dlg owes me
      a whiskey.
    
    I didn't see any storms, but this definitely fixes a useless memory
    allocation on the receiving side, due to non zero scrub_flags field
    in a pfsync_state_peer structure.

> 5bcaec1df012b974442ad7eba88624da0516a655

commit 0e2181f57880a0791854190c1f0f8f243259ab08
Author: Bjoern A. Zeeb <bz@FreeBSD.org>
Date:   Fri Feb 3 13:20:48 2012 +0000

    Extend IPv6 routing lookups in pf(4) to use the new multi-FIB KPI.
    
    Try to make the "rtable" handling work but the current version of
    pf(4) does not fully support it yet as especially callers of
    PF_MISMATCHAW() are not fully FIB-aware.  OpenBSD seems to have
    fixed this in a later version.  Prepare as much as possible.
    
commit 3a8c7fa00873529d1c38dcc406705fcf3a35ed6f
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Tue Jan 17 12:14:26 2012 +0000

    Allocate our mbuf with m_get2().

commit 5646ad6d271638219964e2047132db340831c1eb
Author: Christian S.J. Peron <csjp@FreeBSD.org>
Date:   Sat Jan 14 22:51:34 2012 +0000

    Revert to the old behavior of allocating table/table entries using
    M_NOWAIT.  Currently, the code allows for sleeping in the ioctl path
    to guarantee allocation.  However code also handles ENOMEM gracefully, so
    propagate this error back to user-space, rather than sleeping while
    holding the global pf mutex.
    
    Discussed with: bz

commit b4f66a1781374c15f6f9ad248e0e092ab8b1dfae
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Wed Jan 11 18:34:57 2012 +0000

    Redo r226660:
     - Define schednetisr() to swi_sched.
     - In the swi handler check if there is some data prepared,
       and if true, then call pfsync_sendout(), however tell it
       not to schedule swi again.
     - Since now we don't obtain the pfsync lock in the swi handler,
       don't use ifqueue mutex to synchronize queue access.

commit 122d395f8567e4bc4ad45ce2d81d73757d9ab33a
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Wed Jan 11 14:24:03 2012 +0000

    Fix some spacing in code under __FreeBSD__.

commit c4f01d2d349aa363ec360f07fc54ae8bb20636b0
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Wed Jan 11 14:19:04 2012 +0000

    Add necessary locking in pfsync_in_ureq().

commit 0744a28a7961c7f3532e6f215dbdde397101b085
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Wed Jan 11 14:13:42 2012 +0000

    Move PF_LOCK_ASSERT() under __FreeBSD__.

commit 3488c2786e8a22e9d05b244437698c4b1a5b820e
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Wed Jan 11 14:11:10 2012 +0000

    Merge from OpenBSD:
      revision 1.128
      date: 2009/08/16 13:01:57;  author: jsg;  state: Exp;  lines: +1 -5
      remove prototypes of a bunch of functions that had their implementations
      removed in pfsync v5.

> 077313f094bec60e34f8f3e6f44642816ea6a464

commit 686cb9366703677531033540515b1eead96becce
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Wed Jan 11 13:57:48 2012 +0000

    When running with INVARIANTS the mutex(9) code does all necessary
    asserts for non-recursive mutexes.

commit 1d89f286c472a61ae2a2ef653b32786d1e9c2cb1
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Mon Jan 9 14:35:05 2012 +0000

    Can't pass MSIZE to m_cljget(), an mbuf can't be attached as external storage
    to another mbuf.

commit 317ebc3d0d1dbd0500afe9ba79a35e185ddd9bc2
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Mon Jan 9 12:06:02 2012 +0000

    Backout of backout: we need SI_SUB_PROTO_DOMAIN for pfsync, since
    it needs existing inetdomain on startup.

commit 101881ef425f93e1f74586dcfb9995f6bfdd1925
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Mon Jan 9 09:19:00 2012 +0000

    Revert sub argument of MODULE_DECLARE back to r226532.
    
    Noticed by:     bz

commit 151ceaa22ce0b9a44aea6952b5fcbe95dd330f15
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Mon Jan 9 08:55:23 2012 +0000

    In FreeBSD we determine presence of pfsync(4) at run-time, not
    at compile time, so define NPFSYNC to 1 always. While here, remove
    unused defines.

commit 5c39f7bdebc8c4f19925a03f6b7504df9540cff0
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Mon Jan 9 08:50:22 2012 +0000

    Bunch of fixes to pfsync(4) module load/unload:
    
    o Make the pfsync.ko actually usable. Before this change loading it
      didn't register protosw, so was a nop. However, a module /boot/kernel
      did confused users.
    o Rewrite the way we are joining multicast group:
      - Move multicast initialization/destruction to separate functions.
      - Don't allocate memory if we aren't going to join a multicast group.
      - Use modern API for joining/leaving multicast group.
      - Now the utterly wrong pfsync_ifdetach() isn't needed.
    o Move module initialization from SYSINIT(9) to moduledata_t method.
    o Refuse to unload module, unless asked forcibly.
    o Improve a bit some FreeBSD porting code:
      - Use separate malloc type.
      - Simplify swi sheduling.
    
    This change is probably wrong from VIMAGE viewpoint, however pfsync
    wasn't VIMAGE-correct before this change, too.
    
    Glanced at by:  bz

commit 98a38f5b1d2d196f3520956569030a22d1169112
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Mon Jan 9 08:36:12 2012 +0000

    o Fix panic on module unload, that happened due to mutex being
      destroyed prior to pfsync_uninit(). To do this, move all the
      initialization to the module_t method, instead of SYSINIT(9).
    o Fix another panic after module unload, due to not clearing the
      m_addr_chg_pf_p pointer.
    o Refuse to unload module, unless being unloaded forcibly.
    o Revert the sub argument to MODULE_DECLARE, to the stable/8 value.
    
    This change probably isn't correct from viewpoint of VIMAGE, but
    the module wasn't VIMAGE-correct before the change, as well.
    
    Glanced at by:  bz

commit dabfce9a5a40b4733c79f8421c42856b98d0409b
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Sat Jan 7 14:39:45 2012 +0000

    Merge from OpenBSD:
      revision 1.170
      date: 2011/10/30 23:04:38;  author: mikeb;  state: Exp;  lines: +6 -7
      Allow setting big MTU values on the pfsync interface but not larger
      than the syncdev MTU.  Prompted by the discussion with and tested
      by Maxim Bourmistrov;  ok dlg, mpf
    
    Consistently use sc_ifp->if_mtu in the MTU check throughout the
    module. This backs out r228813.

> 8ded9df8bfda2690ec52ca594adc147bdf4a5e08

commit e883df1d1b5e43fc0210f917c2c7c6172ddaf948
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Sat Jan 7 12:40:45 2012 +0000

    Fix indentation.

commit da914858e19c90b60e6ed777681fa98750cf9e99
Author: Sergey Kandaurov <pluknet@FreeBSD.org>
Date:   Sat Dec 24 00:23:27 2011 +0000

    Fix LINT-VIMAGE build after r228814: use virtualized pf_pool_limits.

commit 6bc752e028075471b3e4a0d89b930309b9865a48
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Thu Dec 22 19:09:55 2011 +0000

    Merge from OpenBSD:
      revision 1.122
      date: 2009/05/13 01:01:34;  author: dlg;  state: Exp;  lines: +6 -4
      only keep track of the number of updates on tcp connections. state sync on
      all the other protocols is simply pushing the timeouts along which has a
      resolution of 1 second, so it isnt going to be hurt by pfsync taking up
      to a second to send it over.
    
      keep track of updates on tcp still though, their windows need constant
      attention.

> b78a2737acaaa91e07a6020a5db27597a7158145

commit 2662e31fc3e2add106ed0e8fae9993fcc8ce66a9
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Thu Dec 22 19:05:58 2011 +0000

    Merge from OpenBSD:
      revision 1.120
      date: 2009/04/04 13:09:29;  author: dlg;  state: Exp;  lines: +5 -5
      use time_uptime instead of time_second internally. time_uptime isnt
      affected by adjusting the clock.
    
      revision 1.175
      date: 2011/11/25 12:52:10;  author: dlg;  state: Exp;  lines: +3 -3
      use time_uptime to set state creation values as time_second can be
      skewed at runtime by things like date(1) and ntpd. time_uptime is
      monotonic and therefore more useful to compare against.

> da9c45cd0fb82e1dee3a6c924e92c41ca16f6f07
> 59f6b0159d3ee9f0014ffd7e131e245a96073247

commit e3b670692add9964eacc62e6d3d88e6315bb2a1e
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Thu Dec 22 18:56:27 2011 +0000

    Merge couple more fixes from OpenBSD to bulk processing:
    
      revision 1.118
      date: 2009/03/23 06:19:59;  author: dlg;  state: Exp;  lines: +8 -6
      wait an appropriate amount of time before giving up on a bulk update,
      rather than giving up after a hardcoded 5 seconds (which is generally much
      too short an interval for a bulk update).
      pointed out by david@, eyeballed by mcbride@
    
      revision 1.171
      date: 2011/10/31 22:02:52;  author: mikeb;  state: Exp;  lines: +2 -1
      Don't forget to cancel bulk update failure timeout when destroying an
      interface.  Problem report and fix from Erik Lax, thanks!
    
    Start a brief note of revisions merged from OpenBSD.

> 00141b59bd4045ec976ba93154354bd3cf89a28b
> f71f45bb02dc1faeca35a4b89dbf5791bcbae7d2

commit c5360c2998ea6c8fc560c363851bbfc24bc5ef30
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Thu Dec 22 18:51:35 2011 +0000

    We really mean MTU of the real interface here, not of our pseudo.

commit 538c3a7cd0005d00237a2ef4a371ac9ea0af08fd
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Thu Dec 22 18:31:47 2011 +0000

    In FreeBSD we always have bpf(4) API, either real or stub. No need
    in detecting presense of 'device bpf'.

commit f08535f8727db100757115023ae19d0bc1eac194
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Tue Dec 20 13:53:31 2011 +0000

    Restore a feature that was present in 5.x and 6.x, and was cleared in
    7.x, 8.x and 9.x with pf(4) imports: pfsync(4) should suppress CARP
    preemption, while it is running its bulk update.
    
    However, reimplement the feature in more elegant manner, that is
    partially inspired by newer OpenBSD:
    
    - Rename term "suppression" to "demotion", to match with OpenBSD.
    - Keep a global demotion factor, that can be raised by several
      conditions, for now these are:
      - interface goes down
      - carp(4) has problems with ip_output() or ip6_output()
      - pfsync performs bulk update
    - Unlike in OpenBSD the demotion factor isn't a counter, but
      is actual value added to advskew. The adjustment values for
      particular error conditions are also configurable, and their
      defaults are maximum advskew value, so a single failure bumps
      demotion to maximum. This is for POLA compatibility, and should
      satisfy most users.
    - Demotion factor is a writable sysctl, so user can do
      foot shooting, if he desires to.

commit 352e70652f0bd17ba30222b78ed55828a45df01f
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Tue Dec 20 12:34:16 2011 +0000

    - Cover pfsync callouts deletion with PF_LOCK().
    - Cover setting up interface between pf and pfsync with PF_LOCK().

commit c53680a8eccc4c42339175d5fabd8310df1bbba8
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Wed Nov 30 08:47:17 2011 +0000

    Return value should be conditional on return value of pfsync_defer_ptr()
    
    PR:             kern/162947
    Submitted by:   Matthieu Kraus <matthieu.kraus s2008.tu-chemnitz.de>

commit 8d5eb1c4c8756ddfeaba222c21752573f2751cb9
Author: Kevin Lo <kevlo@FreeBSD.org>
Date:   Sun Oct 30 14:55:00 2011 +0000

    Add missing PF_UNLOCK in pf_test
    

commit 3e850a12ef30a817fce82c3800a75e677d84a369
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Thu Oct 27 09:47:00 2011 +0000

    Utilize new IF_DEQUEUE_ALL(ifq, m) macro in pfsyncintr() to reduce
    contention on ifqueue lock.

commit 9932deae930367e2fe82624f9fbba1f5f338d8c1
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Sun Oct 23 15:15:17 2011 +0000

    Merge several fixes to bulk update processing from OpenBSD. Merged
    revisions: 1.148, 1.149, 1.150. This makes number of states on
    master/slave to be of a sane value.

commit 8ecd40b6b29baaf17b329c5a6c22453adcce4ba8
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Sun Oct 23 15:10:15 2011 +0000

    Fix indentation, no code changed.

commit 2f2086d57ec06161049ec95eed3c8378317fd3e5
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Sun Oct 23 15:08:18 2011 +0000

    - Fix a bad typo (FreeBSD specific) in pfsync_bulk_update(). Instead
      of scheduling next run pfsync_bulk_update(), pfsync_bulk_fail()
      was scheduled.
      This lead to instant 100% state leak after first bulk update
      request.
    - After above fix, it appeared that pfsync_bulk_update() lacks
      locking. To fix this, sc_bulk_tmo callout was converted to an
      mtx one. Eventually, all pf/pfsync callouts should be converted
      to mtx version, since it isn't possible to stop or drain a
      non-mtx callout without risk of race.
    - Add comment that callout_stop() in pfsync_clone_destroy() lacks
      locking. Since pfsync0 can't be destroyed (yet), let it be here.

commit 35ad95774e0e9b9ef815cba11428cf18d603a1be
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Sun Oct 23 14:59:54 2011 +0000

    Fix from r226623 is not sufficient to close all races in pfsync(4).
    
    The root of problem is re-locking at the end of pfsync_sendout().
    Several functions are calling pfsync_sendout() holding pointers
    to pf data on stack, and these functions expect this data to be
    consistent.
    
    To fix this, the following approach was taken:
    
    - The pfsync_sendout() doesn't call ip_output() directly, but
      enqueues the mbuf on sc->sc_ifp's interfaces queue, that
      is currently unused. Then pfsync netisr is scheduled. PF_LOCK
      isn't dropped in pfsync_sendout().
    - The netisr runs through queue and ip_output()s packets
      on it.
    
    Apart from fixing race, this also decouples stack, fixing
    potential issues, that may happen, when sending pfsync(4)
    packets on input path.
    
commit 68270a37c8e095666a8b2325e13149e4df62790e
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Sun Oct 23 10:13:20 2011 +0000

    Absense of M_WAITOK in malloc flags for UMA doesn't
    equals presense of M_NOWAIT. Specify M_NOWAIT explicitly.
    
    This fixes sleeping with PF_LOCK().

commit f54a3a046ef3ee440be855d755596c4af99f5845
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Sun Oct 23 10:05:25 2011 +0000

    Correct flag for uma_zalloc() is M_WAITOK. M_WAIT is an old and
    deprecated flag from historical mbuf(9) allocator.
    
    This is style only change.

commit 8dc59178a893a4c449f5de298029c7d45311ec56
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Fri Oct 21 22:28:15 2011 +0000

    Fix a race: we should update sc_len before dropping the pf lock, otherwise a
    number of packets can be queued on sc, while we are in ip_output(), and then
    we wipe the accumulated sc_len. On next pfsync_sendout() that would lead to
    writing beyond our mbuf cluster.

commit b6b8562bfc8114da5b39db8444854389fcec77be
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Fri Oct 21 11:11:18 2011 +0000

    In FreeBSD ip_output() expects ip_len and ip_off in host byte order
    
    PR:             kern/159029

commit e999988442a9ee768086d55d2b42e7724273bd99
Author: Bjoern A. Zeeb <bz@FreeBSD.org>
Date:   Wed Oct 19 13:13:56 2011 +0000

    Fix recursive pf locking leading to panics.  Splatter PF_LOCK_ASSERT()s
    to document where we are expecting to be called with a lock held to
    more easily catch unnoticed code paths.
    This does not neccessarily improve locking in pfsync, it just tries
    to avoid the panics reported.
    
    PR:             kern/159390, kern/158873
    Submitted by:   pluknet (at least something that partly resembles
                    my patch ignoring other cleanup, which I only saw
                    too late on the 2nd PR)
    MFC After:      3 days

commit c902d29994abd7dba60331dde84cd75d567ac9dc
Author: Bjoern A. Zeeb <bz@FreeBSD.org>
Date:   Wed Oct 19 11:04:49 2011 +0000

    De-virtualize the pf_task_mtx lock.  At the current state of pf locking
    and virtualization it is not helpful but complicates things.
    
    Current state of art is to not virtualize these kinds of locks -
    inp_group/hash/info/.. are all not virtualized either.
    
commit 232ec0c97d4916ece1e1eb1280de1f03f0850002
Author: Bjoern A. Zeeb <bz@FreeBSD.org>
Date:   Wed Oct 19 10:16:42 2011 +0000

    Adjust the PF_ASSERT() macro to what we usually use in the network stack:
    PF_LOCK_ASSERT() and PF_UNLOCK_ASSERT().
    
commit 72aed41bed1ac65b394a550bf1e01a8b6e00b7f0
Author: Bjoern A. Zeeb <bz@FreeBSD.org>
Date:   Wed Oct 19 10:08:58 2011 +0000

    In the non-FreeBSD case we do not expect PF_LOCK and friends to do anything.
    
commit 5b63183446a76b08d5a371e278dfdf3505cd253a
Author: Bjoern A. Zeeb <bz@FreeBSD.org>
Date:   Wed Oct 19 10:04:24 2011 +0000

    Pseudo interfaces should go at SI_SUB_PSEUDO.  However at least
    pfsync also depends on pf to be initialized already so pf goes at
    FIRST and the interfaces go at ANY.
    Then the (VNET_)SYSINIT startups for pf stays at SI_SUB_PROTO_BEGIN
    and for pfsync we move to the later SI_SUB_PROTO_IF.
    
    This is not ideal either but at least an order that should work for
    the moment and can be re-fined with the VIMAGE merge, once this will
    actually work with more than one network stack.
    
commit c29a7fb3056b9b7a36c898cd64b1e49a68205ece
Author: Bjoern A. Zeeb <bz@FreeBSD.org>
Date:   Wed Oct 19 09:34:40 2011 +0000

    Fix an obvious locking bug where we would lock again rather than unlock.
    
commit 18d97aa11c78d24ed7a89b34bb47ee08209db29d
Author: Bjoern A. Zeeb <bz@FreeBSD.org>
Date:   Wed Oct 19 08:57:17 2011 +0000

    Fix a bug when NPFSYNC > 0 that on FreeBSD we would always return
    and never remove state.
    
    This fixes the problem some people are seeing that state is removed when pf
    is loaded as a module but not in situations when compiled into the kernel.
    
    Reported by:    many on freebsd-pf
    Tested by:      flo

commit 8552ee4b897d2049184eb1340cbd4f94090131f3
Author: Bjoern A. Zeeb <bz@FreeBSD.org>
Date:   Wed Oct 19 08:37:48 2011 +0000

    Fix indentation in a loop and a tiny maze of #ifdefs for just the
    __FreeBSD__ parts that had it wrong.
    
commit c5378361a316ce0e3054c3a7d0c39cb0556e7767
Author: Bjoern A. Zeeb <bz@FreeBSD.org>
Date:   Thu Aug 25 09:38:33 2011 +0000

    Use the correct byte order for the ip_divert(4) mbuf tag port meta
    information in pf(4).
    
commit a6bab2362ea6963901884bf0929c54a001e79d8b
Author: Sergey Kandaurov <pluknet@FreeBSD.org>
Date:   Wed Aug 17 13:02:50 2011 +0000

    Fix build failure without BPF.
    
commit e0bfbfce7922dd3c28eb072b599c6bb8f65f039e
Merge: e6df989fe417 739de636d7c9
Author: Bjoern A. Zeeb <bz@FreeBSD.org>
Date:   Tue Jun 28 11:57:25 2011 +0000

    Update packet filter (pf) code to OpenBSD 4.5.
    
    You need to update userland (world and ports) tools
    to be in sync with the kernel.

> OpenBSD 4.5 released 2009-05-01
> Appears to match:
> commit 88e5d32272316fb378df27722dede00c87240a0a
> Author: gollo <gollo@openbsd.org>
> Date:   Fri Feb 27 11:09:36 2009 +0000
> 
>     fix mbuf problems and simplify code, well spotted and input by
>     Alexander Sabourenkov. mbuf logic is based on claudio's recommendation
>     
>     Tested by Alexander Sabourenkov
>     
>     OK: henning@, claudio@
>     Theo: "In please..."

commit d3c1f00350b5323c94b4d5a525cfc9d2be7b3547
Author: Robert Watson <rwatson@FreeBSD.org>
Date:   Sat Jun 4 16:33:06 2011 +0000

    Add _mbuf() variants of various inpcb-related interfaces, including lookup,
    hash install, etc.  For now, these are arguments are unused, but as we add
    RSS support, we will want to use hashes extracted from mbufs, rather than
    manually calculated hashes of header fields, due to the expensive of the
    software version of Toeplitz (and similar hashes).
    
    Add notes that it would be nice to be able to pass mbufs into lookup
    routines in pf(4), optimising firewall lookup in the same way, but the
    code structure there doesn't facilitate that currently.
    
    (In principle there is no reason this couldn't be MFCed -- the change
    extends rather than modifies the KBI.  However, it won't be useful without
    other previous possibly less MFCable changes.)
    
commit 06034940f55b2514ecf6c0510d07aeffdcc8e134
Author: Bjoern A. Zeeb <bz@FreeBSD.org>
Date:   Tue May 31 15:05:29 2011 +0000

    Remove some further INET related symbols from pf to allow the module
    to not only compile bu load as well for testing with IPv6-only kernels.
    For the moment we ignore the csum change in pf_ioctl.c given the
    pending update to pf45.
    
    Reported by:    dru

commit fa046d8774c1fa5570e820bc81347c3b0039c6c9
Author: Robert Watson <rwatson@FreeBSD.org>
Date:   Mon May 30 09:43:55 2011 +0000

    Decompose the current single inpcbinfo lock into two locks:
    
    - The existing ipi_lock continues to protect the global inpcb list and
      inpcb counter.  This lock is now relegated to a small number of
      allocation and free operations, and occasional operations that walk
      all connections (including, awkwardly, certain UDP multicast receive
      operations -- something to revisit).
    
    - A new ipi_hash_lock protects the two inpcbinfo hash tables for
      looking up connections and bound sockets, manipulated using new
      INP_HASH_*() macros.  This lock, combined with inpcb locks, protects
      the 4-tuple address space.
    
    Unlike the current ipi_lock, ipi_hash_lock follows the individual inpcb
    connection locks, so may be acquired while manipulating a connection on
    which a lock is already held, avoiding the need to acquire the inpcbinfo
    lock preemptively when a binding change might later be required.  As a
    result, however, lookup operations necessarily go through a reference
    acquire while holding the lookup lock, later acquiring an inpcb lock --
    if required.
    
    A new function in_pcblookup() looks up connections, and accepts flags
    indicating how to return the inpcb.  Due to lock order changes, callers
    no longer need acquire locks before performing a lookup: the lookup
    routine will acquire the ipi_hash_lock as needed.  In the future, it will
    also be able to use alternative lookup and locking strategies
    transparently to callers, such as pcbgroup lookup.  New lookup flags are,
    supplementing the existing INPLOOKUP_WILDCARD flag:
    
      INPLOOKUP_RLOCKPCB - Acquire a read lock on the returned inpcb
      INPLOOKUP_WLOCKPCB - Acquire a write lock on the returned inpcb
    
    Callers must pass exactly one of these flags (for the time being).
    
    Some notes:
    
    - All protocols are updated to work within the new regime; especially,
      TCP, UDPv4, and UDPv6.  pcbinfo ipi_lock acquisitions are largely
      eliminated, and global hash lock hold times are dramatically reduced
      compared to previous locking.
    - The TCP syncache still relies on the pcbinfo lock, something that we
      may want to revisit.
    - Support for reverting to the FreeBSD 7.x locking strategy in TCP input
      is no longer available -- hash lookup locks are now held only very
      briefly during inpcb lookup, rather than for potentially extended
      periods.  However, the pcbinfo ipi_lock will still be acquired if a
      connection state might change such that a connection is added or
      removed.
    - Raw IP sockets continue to use the pcbinfo ipi_lock for protection,
      due to maintaining their own hash tables.
    - The interface in6_pcblookup_hash_locked() is maintained, which allows
      callers to acquire hash locks and perform one or more lookups atomically
      with 4-tuple allocation: this is required only for TCPv6, as there is no
      in6_pcbconnect_setup(), which there should be.
    - UDPv6 locking remains significantly more conservative than UDPv4
      locking, which relates to source address selection.  This needs
      attention, as it likely significantly reduces parallelism in this code
      for multithreaded socket use (such as in BIND).
    - In the UDPv4 and UDPv6 multicast cases, we need to revisit locking
      somewhat, as they relied on ipi_lock to stablise 4-tuple matches, which
      is no longer sufficient.  A second check once the inpcb lock is held
      should do the trick, keeping the general case from requiring the inpcb
      lock for every inpcb visited.
    - This work reminds us that we need to revisit locking of the v4/v6 flags,
      which may be accessed lock-free both before and after this change.
    - Right now, a single lock name is used for the pcbhash lock -- this is
      undesirable, and probably another argument is required to take care of
      this (or a char array name field in the pcbinfo?).
    
    This is not an MFC candidate for 8.x due to its impact on lookup and
    locking semantics.  It's possible some of these issues could be worked
    around with compatibility wrappers, if necessary.
    
commit 5084821ac2647a544241a04844d30c1b137c0a94
Author: Bjoern A. Zeeb <bz@FreeBSD.org>
Date:   Wed Apr 27 19:34:01 2011 +0000

    Make pf compile without INET support by adding #ifdef INETs and
    correcting few #includes.
    
commit 6627ad29b4d7a2a5fc9faa4969be1ad25554fb26
Author: Christian S.J. Peron <csjp@FreeBSD.org>
Date:   Fri Jan 14 04:24:53 2011 +0000

    Correct bogus initialization.  It should be noted that this change
    has been corrected in the vendor branch, but for now, silence clang
    warnings.
    
    Found by:       clang
    Discussed with: mlaier

commit 653bfa0ba3a815e19cd862d448f555877b90c1b2
Author: Rui Paulo <rpaulo@FreeBSD.org>
Date:   Wed Oct 13 17:16:08 2010 +0000

    Ignore the return value of ADDCARRY().

commit dd5f5f2b1bd18dd5784db92842fd3cb3393eef28
Author: Bjoern A. Zeeb <bz@FreeBSD.org>
Date:   Fri Sep 10 00:00:06 2010 +0000

    When using pf routing options, properly handle IP fragmentation
    for interfaces with TSO enabled, otherwise one would see an extra
    ICMP unreach, frag needed pre matching packet on lo0.
    This syncs pf code to ip_output.c r162084.
    
    PR:             kern/144311
    Submitted by:   yongari via mlaier
    Tested by:      kib

commit dcc2b1ff467a89c005babf3948557776c63fc7e5
Author: Xin LI <delphij@FreeBSD.org>
Date:   Thu Dec 24 00:43:44 2009 +0000

    Adapt OpenBSD pf's "sloopy" TCP state machine which is useful for Direct
    Server Return mode, where not all packets would be visible to the load
    balancer or gateway.
    
    This commit should be reverted when we merge future pf versions.  The
    benefit it would provide is that this version does not break any existing
    public interface and thus won't be a problem if we want to MFC it to
    earlier FreeBSD releases.
    
    Discussed with: mlaier
    Obtained from:  OpenBSD

commit c31650ade16a1f64307820485d56e1adedda3660
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Tue Aug 25 19:30:32 2009 +0000

    Fix argument ordering to memcpy as well as the size of the copy in the
    (theoretical) case that pfi_buffer_cnt should be greater than ~_max.
    
    Submitted by:   pjd

commit b5a6cecbcd90eac1f2bfb17c4e92aa8faa7cdfbd
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Wed Aug 19 00:10:10 2009 +0000

    If we cannot immediately get the pf_consistency_lock in the purge thread,
    restart the scan after acquiring the lock the hard way.  Otherwise we might
    end up with a dead reference.
    
    Reported by:            pfsense
    Initial patch by:       eri
    Tested by:              pfsense

commit 315e3e38faa1ac7e775bbbbca0079c23fa3513ea
Author: Robert Watson <rwatson@FreeBSD.org>
Date:   Sun Aug 2 19:43:32 2009 +0000

    Many network stack subsystems use a single global data structure to hold
    all pertinent statatistics for the subsystem.  These structures are
    sometimes "borrowed" by kernel modules that require a place to store
    statistics for similar events.
    
    Add KPI accessor functions for statistics structures referenced by kernel
    modules so that they no longer encode certain specifics of how the data
    structures are named and stored.  This change is intended to make it
    easier to move to per-CPU network stats following 8.0-RELEASE.
    
    The following modules are affected by this change:
    
          if_bridge
          if_cxgb
          if_gif
          ip_mroute
          ipdivert
          pf
    
    In practice, most of these statistics consumers should, in fact, maintain
    their own statistics data structures rather than borrowing structures
    from the base network stack.  However, that change is too agressive for
    this point in the release cycle.
    
commit 530c006014fae95c670f4b699fef8bb93034bc6d
Author: Robert Watson <rwatson@FreeBSD.org>
Date:   Sat Aug 1 19:26:27 2009 +0000

    Merge the remainder of kern_vimage.c and vimage.h into vnet.c and
    vnet.h, we now use jails (rather than vimages) as the abstraction
    for virtualization management, and what remained was specific to
    virtual network stacks.  Minor cleanups are done in the process,
    and comments updated to reflect these changes.
    
commit eddfbb763ded6b5f6777335142be9a0edab628bb
Author: Robert Watson <rwatson@FreeBSD.org>
Date:   Tue Jul 14 22:48:30 2009 +0000

    Build on Jeff Roberson's linker-set based dynamic per-CPU allocator
    (DPCPU), as suggested by Peter Wemm, and implement a new per-virtual
    network stack memory allocator.  Modify vnet to use the allocator
    instead of monolithic global container structures (vinet, ...).  This
    change solves many binary compatibility problems associated with
    VIMAGE, and restores ELF symbols for virtualized global variables.
    
    Each virtualized global variable exists as a "reference copy", and also
    once per virtual network stack.  Virtualized global variables are
    tagged at compile-time, placing the in a special linker set, which is
    loaded into a contiguous region of kernel memory.  Virtualized global
    variables in the base kernel are linked as normal, but those in modules
    are copied and relocated to a reserved portion of the kernel's vnet
    region with the help of a the kernel linker.
    
    Virtualized global variables exist in per-vnet memory set up when the
    network stack instance is created, and are initialized statically from
    the reference copy.  Run-time access occurs via an accessor macro, which
    converts from the current vnet and requested symbol to a per-vnet
    address.  When "options VIMAGE" is not compiled into the kernel, normal
    global ELF symbols will be used instead and indirection is avoided.
    
    This change restores static initialization for network stack global
    variables, restores support for non-global symbols and types, eliminates
    the need for many subsystem constructors, eliminates large per-subsystem
    structures that caused many binary compatibility issues both for
    monitoring applications (netstat) and kernel modules, removes the
    per-function INIT_VNET_*() macros throughout the stack, eliminates the
    need for vnet_symmap ksym(2) munging, and eliminates duplicate
    definitions of virtualized globals under VIMAGE_GLOBALS.
    
    Bump __FreeBSD_version and update UPDATING.
    
    Portions submitted by:  bz
    Discussed with:         gnn, jamie, jeff, jhb, julian, sam
    Suggested by:           peter

commit 5736e6fb9d15b95ee15c93c75e67222183a14b1d
Author: Bjoern A. Zeeb <bz@FreeBSD.org>
Date:   Tue Jun 23 17:03:45 2009 +0000

    After cleaning up rt_tables from vnet.h and cleaning up opt_route.h
    a lot of files no longer need route.h either. Garbage collect them.
    While here remove now unneeded vnet.h #includes as well.

commit f4945c9f023cdc95e2905ec88aef986526c0da82
Author: Bjoern A. Zeeb <bz@FreeBSD.org>
Date:   Wed Jun 10 11:19:34 2009 +0000

    All consumers of in_cksum.h have been properly #ifdefed already,
    so do not include the file either as it would give as an extra
    dependency on INET.

commit 8d8bc0182ea6f8f85409e76e53053487c7d23a84
Author: Bjoern A. Zeeb <bz@FreeBSD.org>
Date:   Mon Jun 8 19:57:35 2009 +0000

    After r193232 rt_tables in vnet.h are no longer indirectly dependent on
    the ROUTETABLES kernel option thus there is no need to include opt_route.h
    anymore in all consumers of vnet.h and no longer depend on it for module
    builds.
    
    Remove the hidden include in flowtable.h as well and leave the two
    explicit #includes in ip_input.c and ip_output.c.

commit bcf11e8d0048006ba97cb460a134cc23290428b2
Author: Robert Watson <rwatson@FreeBSD.org>
Date:   Fri Jun 5 14:55:22 2009 +0000

    Move "options MAC" from opt_mac.h to opt_global.h, as it's now in GENERIC
    and used in a large number of files, but also because an increasing number
    of incorrect uses of MAC calls were sneaking in due to copy-and-paste of
    MAC-aware code without the associated opt_mac.h include.
    
    Discussed with: pjd

commit d825c7936c97558399c080bedc884c4712272dcf
Author: Marko Zec <zec@FreeBSD.org>
Date:   Mon Jun 1 21:29:54 2009 +0000

    V_loif is not an array but a pure pointer, so treat it as such.
    
commit 279aa3d419d5bfaf514ed543ab177852e4c2b013
Author: Kip Macy <kmacy@FreeBSD.org>
Date:   Thu Apr 16 20:30:28 2009 +0000

    Change if_output to take a struct route as its fourth argument in order
    to allow passing a cached struct llentry * down to L2
    
commit e27b0c87759d9d7a6eebca60bc82f171fbf36afc
Author: Robert Watson <rwatson@FreeBSD.org>
Date:   Sun Apr 12 13:22:33 2009 +0000

    Update stats in struct icmpstat and icmp6stat using four new
    macros: ICMPSTAT_ADD(), ICMPSTAT_INC(), ICMP6STAT_ADD(), and
    ICMP6STAT_INC(), rather than directly manipulating the fields
    of these structures across the kernel.  This will make it
    easier to change the implementation of these statistics,
    such as using per-CPU versions of the data structures.
    
    In on case, icmp6stat members are manipulated indirectly, by
    icmp6_errcount(), and this will require further work to fix
    for per-CPU stats.
    
commit 026decb8f3fd8d046de838b3781084d59a9ef94c
Author: Robert Watson <rwatson@FreeBSD.org>
Date:   Sun Apr 12 11:42:40 2009 +0000

    Update stats in struct udpstat using two new macros, UDPSTAT_ADD()
    and UDPSTAT_INC(), rather than directly manipulating the fields
    across the kernel.  This will make it easier to change the
    implementation of these statistics, such as using per-CPU versions
    of the data structures.
    
commit 86425c62a0067a5c61d3c87ab5f3a489e3c4fd25
Author: Robert Watson <rwatson@FreeBSD.org>
Date:   Sat Apr 11 23:35:20 2009 +0000

    Update stats in struct ipstat using four new macros, IPSTAT_ADD(),
    IPSTAT_INC(), IPSTAT_SUB(), and IPSTAT_DEC(), rather than directly
    manipulating the fields across the kernel.  This will make it easier
    to change the implementation of these statistics, such as using
    per-CPU versions of the data structures.
    
commit 78b5071407e7f59724b2c3d3a4bd9f5cca1f0794
Author: Robert Watson <rwatson@FreeBSD.org>
Date:   Sat Apr 11 22:07:19 2009 +0000

    Update stats in struct tcpstat using two new macros, TCPSTAT_ADD() and
    TCPSTAT_INC(), rather than directly manipulating the fields across the
    kernel.  This will make it easier to change the implementation of
    these statistics, such as using per-CPU versions of the data structures.
    
commit 33553d6e997f102da7a5f27d534b3ee57beb0a87
Author: Bjoern A. Zeeb <bz@FreeBSD.org>
Date:   Fri Feb 27 14:12:05 2009 +0000

    For all files including net/vnet.h directly include opt_route.h and
    net/route.h.
    
    Remove the hidden include of opt_route.h and net/route.h from net/vnet.h.
    
    We need to make sure that both opt_route.h and net/route.h are included
    before net/vnet.h because of the way MRT figures out the number of FIBs
    from the kernel option. If we do not, we end up with the default number
    of 1 when including net/vnet.h and array sizes are wrong.
    
    This does not change the list of files which depend on opt_route.h
    but we can identify them now more easily.

commit 55b043392b2ef430db85e2debbd27400ae474c5b
Author: Ed Schouten <ed@FreeBSD.org>
Date:   Sun Jan 25 16:52:41 2009 +0000

    Revert my previous two changes.
    
    Even though the code seems to be FreeBSD kernel code, it isn't compiled
    on FreeBSD. I could have known this, because I was a little amazed that
    I couldn't find a prototype of pfopen()/pfclose() somewhere else,
    because it isn't marked as static.
    
    Apart from that, removing these functions wouldn't have been harmful
    anyway, because there are some other strange things about them (the
    implementation isn't consistent with the prototype at the top). Still,
    it's better to leave it, because it makes merging code back to older
    branches a little harder.
    
    Requested by:   mlaier

commit 014bf1f6e5c96ea412c28fe214c0998d2a0c30ab
Author: Ed Schouten <ed@FreeBSD.org>
Date:   Sun Jan 25 14:39:15 2009 +0000

    Remove pfopen() and pfclose() entirely.
    
    It turns out I was patching functions that weren't used by pf(4) anyway.
    They still seem to use `struct proc *' instead of `struct thread *'.
    They weren't listed in pf_cdevsw.

commit 1f895245a0c5348d6c822f145ee49606d75a94fd
Author: Ed Schouten <ed@FreeBSD.org>
Date:   Sun Jan 25 14:00:00 2009 +0000

    Remove unneeded checking for invalid minor numbers from pf(4).
    
    Because it is not possible to access the pf(4) character device through
    any other device node as the one in devfs, there is no need to check for
    unknown device minor numbers.
    
commit 6e6b3f7cbc89cf29eafdfa6d1613c6b1a37c364b
Author: Qing Li <qingli@FreeBSD.org>
Date:   Mon Dec 15 06:10:57 2008 +0000

    This main goals of this project are:
    1. separating L2 tables (ARP, NDP) from the L3 routing tables
    2. removing as much locking dependencies among these layers as
       possible to allow for some parallelism in the search operations
    3. simplify the logic in the routing code,
    
    The most notable end result is the obsolescent of the route
    cloning (RTF_CLONING) concept, which translated into code reduction
    in both IPv4 ARP and IPv6 NDP related modules, and size reduction in
    struct rtentry{}. The change in design obsoletes the semantics of
    RTF_CLONING, RTF_WASCLONE and RTF_LLINFO routing flags. The userland
    applications such as "arp" and "ndp" have been modified to reflect
    those changes. The output from "netstat -r" shows only the routing
    entries.
    
    Quite a few developers have contributed to this project in the
    past: Glebius Smirnoff, Luigi Rizzo, Alessandro Cerri, and
    Andre Oppermann. And most recently:
    
    - Kip Macy revised the locking code completely, thus completing
      the last piece of the puzzle, Kip has also been conducting
      active functional testing
    - Sam Leffler has helped me improving/refactoring the code, and
      provided valuable reviews
    - Julian Elischer setup the perforce tree for me and has helped
      me maintaining that branch before the svn conversion

commit 52f644a9e2865dead840cd758566accd586fbabe
Author: Bjoern A. Zeeb <bz@FreeBSD.org>
Date:   Sat Dec 13 22:04:52 2008 +0000

    Like for tcp_subr.c in r186057 make the MD5 context a function local
    variable in this copy of the code[1].
    
    While here prefix the variables with 'pf_' to avoid file static global
    variables with colliding names that are or will be virtualized.
    
    Discussed with: rwatson, silby [1]

commit 1b193af6101e6c1d10c6e2c5486bd4bbb7252fc2
Author: Bjoern A. Zeeb <bz@FreeBSD.org>
Date:   Sat Dec 13 19:13:03 2008 +0000

    Second round of putting global variables, which were virtualized
    but formerly missed under VIMAGE_GLOBAL.
    
    Put the extern declarations of the  virtualized globals
    under VIMAGE_GLOBAL as the globals themsevles are already.
    This will help by the time when we are going to remove the globals
    entirely.
    
commit 385195c062ad27bfd78b9f9592a8bbcb9419acfb
Author: Marko Zec <zec@FreeBSD.org>
Date:   Wed Dec 10 23:12:39 2008 +0000

    Conditionally compile out V_ globals while instantiating the appropriate
    container structures, depending on VIMAGE_GLOBALS compile time option.
    
    Make VIMAGE_GLOBALS a new compile-time option, which by default will not
    be defined, resulting in instatiations of global variables selected for
    V_irtualization (enclosed in #ifdef VIMAGE_GLOBALS blocks) to be
    effectively compiled out.  Instantiate new global container structures
    to hold V_irtualized variables: vnet_net_0, vnet_inet_0, vnet_inet6_0,
    vnet_ipsec_0, vnet_netgraph_0, and vnet_gif_0.
    
    Update the VSYM() macro so that depending on VIMAGE_GLOBALS the V_
    macros resolve either to the original globals, or to fields inside
    container structures, i.e. effectively
    
    #ifdef VIMAGE_GLOBALS
    #define V_rt_tables rt_tables
    #else
    #define V_rt_tables vnet_net_0._rt_tables
    #endif
    
    Update SYSCTL_V_*() macros to operate either on globals or on fields
    inside container structs.
    
    Extend the internal kldsym() lookups with the ability to resolve
    selected fields inside the virtualization container structs.  This
    applies only to the fields which are explicitly registered for kldsym()
    visibility via VNET_MOD_DECLARE() and vnet_mod_register(), currently
    this is done only in sys/net/if.c.
    
    Fix a few broken instances of MODULE_GLOBAL() macro use in SCTP code,
    and modify the MODULE_GLOBAL() macro to resolve to V_ macros, which in
    turn result in proper code being generated depending on VIMAGE_GLOBALS.
    
    De-virtualize local static variables in sys/contrib/pf/net/pf_subr.c
    which were prematurely V_irtualized by automated V_ prepending scripts
    during earlier merging steps.  PF virtualization will be done
    separately, most probably after next PF import.
    
    Convert a few variable initializations at instantiation to
    initialization in init functions, most notably in ipfw.  Also convert
    TUNABLE_INT() initializers for V_ variables to TUNABLE_FETCH_INT() in
    initializer functions.
    
    Discussed at:   devsummit Strassburg
    Obtained from:  //depot/projects/vimage-commit2/...

commit 3120b9d4285d2c477a8d7a188597fc7613a66d47
Author: Kip Macy <kmacy@FreeBSD.org>
Date:   Sun Dec 7 21:15:43 2008 +0000

     - convert radix node head lock from mutex to rwlock
     - make radix node head lock not recursive
     - fix LOR in rtexpunge
     - fix LOR in rtredirect
    
commit 4b79449e2fb67cb37c4c9f46d31791893a39ddd8
Author: Bjoern A. Zeeb <bz@FreeBSD.org>
Date:   Tue Dec 2 21:37:28 2008 +0000

    Rather than using hidden includes (with cicular dependencies),
    directly include only the header files needed. This reduces the
    unneeded spamming of various headers into lots of files.
    
    For now, this leaves us with very few modules including vnet.h
    and thus needing to depend on opt_route.h.
    
commit 86d02c5c63bb5947eb352a0fcdda2b3e3ecebb0a
Author: Bjoern A. Zeeb <bz@FreeBSD.org>
Date:   Sat Oct 4 15:06:34 2008 +0000

    Cache so_cred as inp_cred in the inpcb.
    This means that inp_cred is always there, even after the socket
    has gone away. It also means that it is constant for the lifetime
    of the inp.
    Both facts lead to simpler code and possibly less locking.
    
    Suggested by:   rwatson

commit 8b615593fc0d78ef8366c1328f5966256b82a9c0
Author: Marko Zec <zec@FreeBSD.org>
Date:   Thu Oct 2 15:37:58 2008 +0000

    Step 1.5 of importing the network stack virtualization infrastructure
    from the vimage project, as per plan established at devsummit 08/08:
    http://wiki.freebsd.org/Image/Notes200808DevSummit
    
    Introduce INIT_VNET_*() initializer macros, VNET_FOREACH() iterator
    macros, and CURVNET_SET() context setting macros, all currently
    resolving to NOPs.
    
    Prepare for virtualization of selected SYSCTL objects by introducing a
    family of SYSCTL_V_*() macros, currently resolving to their global
    counterparts, i.e. SYSCTL_V_INT() == SYSCTL_INT().
    
    Move selected #defines from sys/sys/vimage.h to newly introduced header
    files specific to virtualized subsystems (sys/net/vnet.h,
    sys/netinet/vinet.h etc.).
    
    All the changes are verified to have zero functional impact at this
    point in time by doing MD5 comparision between pre- and post-change
    object files(*).
    
    (*) netipsec/keysock.c did not validate depending on compile time options.
    
    Implemented by: julian, bz, brooks, zec
    Obtained from:  //depot/projects/vimage-commit2/...

commit 6bfa9a2d66dd0e00182017d6741d44e54d0b2cca
Author: Ed Schouten <ed@FreeBSD.org>
Date:   Sat Sep 27 08:51:18 2008 +0000

    Replace all calls to minor() with dev2unit().
    
    After I removed all the unit2minor()/minor2unit() calls from the kernel
    yesterday, I realised calling minor() everywhere is quite confusing.
    Character devices now only have the ability to store a unit number, not
    a minor number. Remove the confusion by using dev2unit() everywhere.
    
    This commit could also be considered as a bug fix. A lot of drivers call
    minor(), while they should actually be calling dev2unit(). In -CURRENT
    this isn't a problem, but it turns out we never had any problem reports
    related to that issue in the past. I suspect not many people connect
    more than 256 pieces of the same hardware.
    
commit 603724d3abed34351087e20b8cb363d8e02072c1
Author: Bjoern A. Zeeb <bz@FreeBSD.org>
Date:   Sun Aug 17 23:27:27 2008 +0000

    Commit step 1 of the vimage project, (network stack)
    virtualization work done by Marko Zec (zec@).
    
    This is the first in a series of commits over the course
    of the next few weeks.
    
    Mark all uses of global variables to be virtualized
    with a V_ prefix.
    Use macros to map them back to their global names for
    now, so this is a NOP change only.
    
    We hope to have caught at least 85-90% of what is needed
    so we do not invalidate a lot of outstanding patches again.
    
    Obtained from:  //depot/projects/vimage-commit2/...

commit 9f21c07f14711305ad542cb6bb5ab87438d27571
Merge: ae33434c7f07 c48a03d37af6
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Mon Aug 4 14:42:09 2008 +0000

    Merge state reuse for tcp.
    
    PR:             kern/125261
    Obtained from:  OpenBSD

commit 898dc49201ce23e4ef8a8ffa1b952a259c02ca58
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Mon Aug 4 13:30:44 2008 +0000

    Flatten out dist and all "live" tag directories.

commit 7e4e65ffb37514261ef8f14f644f65b6dc1655c3
Author: Julian Elischer <julian@FreeBSD.org>
Date:   Thu Jul 24 19:05:58 2008 +0000

    Fix spelling error in comment

commit b18b4dabe61d3403d70d052e462e3a7fc57b1eae
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Thu Jun 5 19:30:20 2008 +0000

    Fix range check for rtable id.

commit 8b07e49a008c89a15e1fc4a1e3db6d945f81fab4
Author: Julian Elischer <julian@FreeBSD.org>
Date:   Fri May 9 23:03:00 2008 +0000

    Add code to allow the system to handle multiple routing tables.
    This particular implementation is designed to be fully backwards compatible
    and to be MFC-able to 7.x (and 6.x)
    
    Currently the only protocol that can make use of the multiple tables is IPv4
    Similar functionality exists in OpenBSD and Linux.
    
    From my notes:
    
    -----
    
      One thing where FreeBSD has been falling behind, and which by chance I
      have some time to work on is "policy based routing", which allows
      different
      packet streams to be routed by more than just the destination address.
    
      Constraints:
      ------------
    
      I want to make some form of this available in the 6.x tree
      (and by extension 7.x) , but FreeBSD in general needs it so I might as
      well do it in -current and back port the portions I need.
    
      One of the ways that this can be done is to have the ability to
      instantiate multiple kernel routing tables (which I will now
      refer to as "Forwarding Information Bases" or "FIBs" for political
      correctness reasons). Which FIB a particular packet uses to make
      the next hop decision can be decided by a number of mechanisms.
      The policies these mechanisms implement are the "Policies" referred
      to in "Policy based routing".
    
      One of the constraints I have if I try to back port this work to
      6.x is that it must be implemented as a EXTENSION to the existing
      ABIs in 6.x so that third party applications do not need to be
      recompiled in timespan of the branch.
    
      This first version will not have some of the bells and whistles that
      will come with later versions. It will, for example, be limited to 16
      tables in the first commit.
      Implementation method, Compatible version. (part 1)
      -------------------------------
      For this reason I have implemented a "sufficient subset" of a
      multiple routing table solution in Perforce, and back-ported it
      to 6.x. (also in Perforce though not  always caught up with what I
      have done in -current/P4). The subset allows a number of FIBs
      to be defined at compile time (8 is sufficient for my purposes in 6.x)
      and implements the changes needed to allow IPV4 to use them. I have not
      done the changes for ipv6 simply because I do not need it, and I do not
      have enough knowledge of ipv6 (e.g. neighbor discovery) needed to do it.
    
      Other protocol families are left untouched and should there be
      users with proprietary protocol families, they should continue to work
      and be oblivious to the existence of the extra FIBs.
    
      To understand how this is done, one must know that the current FIB
      code starts everything off with a single dimensional array of
      pointers to FIB head structures (One per protocol family), each of
      which in turn points to the trie of routes available to that family.
    
      The basic change in the ABI compatible version of the change is to
      extent that array to be a 2 dimensional array, so that
      instead of protocol family X looking at rt_tables[X] for the
      table it needs, it looks at rt_tables[Y][X] when for all
      protocol families except ipv4 Y is always 0.
      Code that is unaware of the change always just sees the first row
      of the table, which of course looks just like the one dimensional
      array that existed before.
    
      The entry points rtrequest(), rtalloc(), rtalloc1(), rtalloc_ign()
      are all maintained, but refer only to the first row of the array,
      so that existing callers in proprietary protocols can continue to
      do the "right thing".
      Some new entry points are added, for the exclusive use of ipv4 code
      called in_rtrequest(), in_rtalloc(), in_rtalloc1() and in_rtalloc_ign(),
      which have an extra argument which refers the code to the correct row.
    
      In addition, there are some new entry points (currently called
      rtalloc_fib() and friends) that check the Address family being
      looked up and call either rtalloc() (and friends) if the protocol
      is not IPv4 forcing the action to row 0 or to the appropriate row
      if it IS IPv4 (and that info is available). These are for calling
      from code that is not specific to any particular protocol. The way
      these are implemented would change in the non ABI preserving code
      to be added later.
    
      One feature of the first version of the code is that for ipv4,
      the interface routes show up automatically on all the FIBs, so
      that no matter what FIB you select you always have the basic
      direct attached hosts available to you. (rtinit() does this
      automatically).
    
      You CAN delete an interface route from one FIB should you want
      to but by default it's there. ARP information is also available
      in each FIB. It's assumed that the same machine would have the
      same MAC address, regardless of which FIB you are using to get
      to it.
    
      This brings us as to how the correct FIB is selected for an outgoing
      IPV4 packet.
    
      Firstly, all packets have a FIB associated with them. if nothing
      has been done to change it, it will be FIB 0. The FIB is changed
      in the following ways.
    
      Packets fall into one of a number of classes.
    
      1/ locally generated packets, coming from a socket/PCB.
         Such packets select a FIB from a number associated with the
         socket/PCB. This in turn is inherited from the process,
         but can be changed by a socket option. The process in turn
         inherits it on fork. I have written a utility call setfib
         that acts a bit like nice..
    
             setfib -3 ping target.example.com # will use fib 3 for ping.
    
         It is an obvious extension to make it a property of a jail
         but I have not done so. It can be achieved by combining the setfib and
         jail commands.
    
      2/ packets received on an interface for forwarding.
         By default these packets would use table 0,
         (or possibly a number settable in a sysctl(not yet)).
         but prior to routing the firewall can inspect them (see below).
         (possibly in the future you may be able to associate a FIB
         with packets received on an interface..  An ifconfig arg, but not yet.)
    
      3/ packets inspected by a packet classifier, which can arbitrarily
         associate a fib with it on a packet by packet basis.
         A fib assigned to a packet by a packet classifier
         (such as ipfw) would over-ride a fib associated by
         a more default source. (such as cases 1 or 2).
    
      4/ a tcp listen socket associated with a fib will generate
         accept sockets that are associated with that same fib.
    
      5/ Packets generated in response to some other packet (e.g. reset
         or icmp packets). These should use the FIB associated with the
         packet being reponded to.
    
      6/ Packets generated during encapsulation.
         gif, tun and other tunnel interfaces will encapsulate using the FIB
         that was in effect withthe proces that set up the tunnel.
         thus setfib 1 ifconfig gif0 [tunnel instructions]
         will set the fib for the tunnel to use to be fib 1.
    
      Routing messages would be associated with their
      process, and thus select one FIB or another.
      messages from the kernel would be associated with the fib they
      refer to and would only be received by a routing socket associated
      with that fib. (not yet implemented)
    
      In addition Netstat has been edited to be able to cope with the
      fact that the array is now 2 dimensional. (It looks in system
      memory using libkvm (!)). Old versions of netstat see only the first FIB.
    
      In addition two sysctls are added to give:
      a) the number of FIBs compiled in (active)
      b) the default FIB of the calling process.
    
      Early testing experience:
      -------------------------
    
      Basically our (IronPort's) appliance does this functionality already
      using ipfw fwd but that method has some drawbacks.
    
      For example,
      It can't fully simulate a routing table because it can't influence the
      socket's choice of local address when a connect() is done.
    
      Testing during the generating of these changes has been
      remarkably smooth so far. Multiple tables have co-existed
      with no notable side effects, and packets have been routes
      accordingly.
    
      ipfw has grown 2 new keywords:
    
      setfib N ip from anay to any
      count ip from any to any fib N
    
      In pf there seems to be a requirement to be able to give symbolic names to the
      fibs but I do not have that capacity. I am not sure if it is required.
    
      SCTP has interestingly enough built in support for this, called VRFs
      in Cisco parlance. it will be interesting to see how that handles it
      when it suddenly actually does something.
    
      Where to next:
      --------------------
    
      After committing the ABI compatible version and MFCing it, I'd
      like to proceed in a forward direction in -current. this will
      result in some roto-tilling in the routing code.
    
      Firstly: the current code's idea of having a separate tree per
      protocol family, all of the same format, and pointed to by the
      1 dimensional array is a bit silly. Especially when one considers that
      there is code that makes assumptions about every protocol having the
      same internal structures there. Some protocols don't WANT that
      sort of structure. (for example the whole idea of a netmask is foreign
      to appletalk). This needs to be made opaque to the external code.
    
      My suggested first change is to add routing method pointers to the
      'domain' structure, along with information pointing the data.
      instead of having an array of pointers to uniform structures,
      there would be an array pointing to the 'domain' structures
      for each protocol address domain (protocol family),
      and the methods this reached would be called. The methods would have
      an argument that gives FIB number, but the protocol would be free
      to ignore it.
    
      When the ABI can be changed it raises the possibilty of the
      addition of a fib entry into the "struct route". Currently,
      the structure contains the sockaddr of the desination, and the resulting
      fib entry. To make this work fully, one could add a fib number
      so that given an address and a fib, one can find the third element, the
      fib entry.
    
      Interaction with the ARP layer/ LL layer would need to be
      revisited as well. Qing Li has been working on this already.
    
      This work was sponsored by Ironport Systems/Cisco
    
    Obtained from:  Ironport systems/Cisco

commit fdd9b0723ec178e5ac97e5ffb4dde526dcc353cb
Author: Robert Watson <rwatson@FreeBSD.org>
Date:   Sun Apr 20 00:21:54 2008 +0000

    Teach pf and ipfw to use read locks in inpcbs write than write locks
    when reading credential data from sockets.
    
    Teach pf to unlock the pcbinfo more quickly once it has acquired an
    inpcb lock, as the inpcb lock is sufficient to protect the reference.
    
    Assert locks, rather than read locks or write locks, on inpcbs in
    subroutines--this is necessary as the inpcb may be passed down with a
    write lock from the protocol, or may be passed down with a read lock
    from the firewall lookup routine, and either is sufficient.
    
commit 8501a69cc940a7d32d9299da26baf0b1863e0fa9
Author: Robert Watson <rwatson@FreeBSD.org>
Date:   Thu Apr 17 21:38:18 2008 +0000

    Convert pcbinfo and inpcb mutexes to rwlocks, and modify macros to
    explicitly select write locking for all use of the inpcb mutex.
    Update some pcbinfo lock assertions to assert locked rather than
    write-locked, although in practice almost all uses of the pcbinfo
    rwlock main exclusive, and all instances of inpcb lock acquisition
    are exclusive.
    
    This change should introduce (ideally) little functional change.
    However, it lays the groundwork for significantly increased
    parallelism in the TCP/IP code.
    
    Tested by:      kris (superset of committered patch)

commit 4239d24b98a8a28300e57c230ae1bd8fce23eb4a
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Sat Mar 29 00:24:36 2008 +0000

    Make ALTQ cope with disappearing interfaces (particularly common with mpd
    and netgraph in gernal).  This also allows to add queues for an interface
    that is not yet existing (you have to provide the bandwidth for the
    interface, however).
    
    PR:             kern/106400, kern/117827

commit 228f6ee12ef9c7e4d67f347f477dfc10afded308
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Wed Nov 21 16:08:06 2007 +0000

    Bring back pf_if.c revs 1.8 and 1.6 also lost during last import:
     - Use correct time for tzero when compiled in
     - Don't use bogus interface addresses on ptp-interfaces with :0
    
commit b7484bf1b95fa28f318fa23c42834c0961ed8176
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Wed Nov 21 14:18:14 2007 +0000

    Cleanup pf interface mangement - esp. remove EVENTHANDLER before unloading
    the coresponding code.  This was lost during 4.1 import.
    
    Reported by:    ru

commit fb63048c8af63ee0e5d61ec783fb4b64f966be55
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Wed Nov 21 10:12:52 2007 +0000

    Reloop OpenBSD rev. 1.563:
      In pf_test_fragment(), ignore protocol-specific criteria for packets of
      different protocols.
    
    Reported by:    des
    Obtained from:  OpenBSD

commit a13e21f7bc3447d96847cca8b01858d341489b26
Author: Robert Watson <rwatson@FreeBSD.org>
Date:   Sun Oct 28 17:12:48 2007 +0000

    Continue to move from generic network entry points in the TrustedBSD MAC
    Framework by moving from mac_mbuf_create_netlayer() to more specific
    entry points for specific network services:
    
    - mac_netinet_firewall_reply() to be used when replying to in-bound TCP
      segments in pf and ipfw (etc).
    
    - Rename mac_netinet_icmp_reply() to mac_netinet_icmp_replyinplace() and
      add mac_netinet_icmp_reply(), reflecting that in some cases we overwrite
      a label in place, but in others we apply the label to a new mbuf.
    
    Obtained from:  TrustedBSD Project

commit 8640764682960c128ab9edd1e534589d98fce43b
Author: Robert Watson <rwatson@FreeBSD.org>
Date:   Fri Oct 26 13:18:38 2007 +0000

    Rename 'mac_mbuf_create_from_firewall' to 'mac_netinet_firewall_send' as
    we move towards netinet as a pseudo-object for the MAC Framework.
    
    Rename 'mac_create_mbuf_linklayer' to 'mac_mbuf_create_linklayer' to
    reflect general object-first ordering preference.
    
    Obtained from:  TrustedBSD Project, Apple Computer

commit 32d5438214371a3787f704cd0d9224d2a88adc0e
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Wed Oct 24 20:57:17 2007 +0000

    Properly drop the pf mutex around all copyout (consistency still protected
    by the sx) and avoid a WITNESS panic.  Overlooked during last import.
    
    Reported and tested by: Max N. Boyarov

commit 30d239bc4c510432e65a84fa1c14ed67a3ab1c92
Author: Robert Watson <rwatson@FreeBSD.org>
Date:   Wed Oct 24 19:04:04 2007 +0000

    Merge first in a series of TrustedBSD MAC Framework KPI changes
    from Mac OS X Leopard--rationalize naming for entry points to
    the following general forms:
    
      mac_<object>_<method/action>
      mac_<object>_check_<method/action>
    
    The previous naming scheme was inconsistent and mostly
    reversed from the new scheme.  Also, make object types more
    consistent and remove spaces from object types that contain
    multiple parts ("posix_sem" -> "posixsem") to make mechanical
    parsing easier.  Introduce a new "netinet" object type for
    certain IPv4/IPv6-related methods.  Also simplify, slightly,
    some entry point names.
    
    All MAC policy modules will need to be recompiled, and modules
    not updates as part of this commit will need to be modified to
    conform to the new KPI.
    
    Obtained from:  TrustedBSD Project, Apple Computer

commit 3745c395ecae17ef47be82433463d561629220b0
Author: Julian Elischer <julian@FreeBSD.org>
Date:   Sat Oct 20 23:23:23 2007 +0000

    Rename the kthread_xxx (e.g. kthread_create()) calls
    to kproc_xxx as they actually make whole processes.
    Thos makes way for us to add REAL kthread_create() and friends
    that actually make theads. it turns out that most of these
    calls actually end up being moved back to the thread version
    when it's added. but we need to make this cosmetic change first.
    
    I'd LOVE to do this rename in 7.0  so that we can eventually MFC the
    new kthread_xxx() calls.

commit 7f368082adf15fcd043963ae253d59431a1e2080
Author: Daniel Hartmeier <dhartmei@FreeBSD.org>
Date:   Thu Aug 23 09:30:58 2007 +0000

    When checking the sequence number of a TCP header embedded in an
    ICMP error message, do not access th_flags. The field is beyond
    the first eight bytes of the header that are required to be present
    and were pulled up in the mbuf.
    
    A random value of th_flags can have TH_SYN set, which made the
    sequence number comparison not apply the window scaling factor,
    which led to legitimate ICMP(v6) packets getting blocked with
    "BAD ICMP" debug log messages (if enabled with pfctl -xm), thus
    breaking PMTU discovery.
    
    Triggering the bug requires TCP window scaling to be enabled
    (sysctl net.inet.tcp.rfc1323, enabled by default) on both end-
    points of the TCP connection. Large scaling factors increase
    the probability of triggering the bug.
    
    PR:             kern/115413: [ipv6] ipv6 pmtu not working
    Tested by:      Jacek Zapala

commit c6b289978554319e8a41c8ec75354983038dc3a5
Author: Robert Watson <rwatson@FreeBSD.org>
Date:   Sat Jul 28 07:31:30 2007 +0000

    Replace references to NET_CALLOUT_MPSAFE with CALLOUT_MPSAFE, and remove
    definition of NET_CALLOUT_MPSAFE, which is no longer required now that
    debug.mpsafenet has been removed.
    
commit e22a271eeb0fe6d536a6aec26a9c0ad0322c08d3
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Thu Jul 5 15:28:59 2007 +0000

    Remove unused variable from pf_subr.c to make it -Werror buildable.
    
commit 44e0d5a8dfa3b1199d676185ab85d28bb6b9ad1e
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Tue Jul 3 12:58:33 2007 +0000

    Add two place holders in struct pf_rule for future netgraph integration.
    
    Submitted by:   Ermal Luçi

commit 60ee384760646565a24320d92c5219bc052ce947
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Tue Jul 3 12:46:08 2007 +0000

    Link pf 4.1 to the build:
     - move ftp-proxy from libexec to usr.sbin
     - add tftp-proxy
     - new altq mtag link
    
commit c9a03d91addf1b2da4c7edcaacd286fe357d0b01
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Tue Jul 3 12:16:07 2007 +0000

    Commit resolved import of OpenBSD 4.1 pf from perforce.
    
commit 42247cbcaf21c38bec95ae4aed62d884e445c8dd
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Tue Jul 3 12:06:01 2007 +0000

    Import pf from OpenBSD 4.1

commit 25929d78514344227dcd7c77ad4b551390a5346e
Merge: d786f620df36 42247cbcaf21
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Tue Jul 3 12:06:01 2007 +0000

    This commit was generated by cvs2svn to compensate for changes in r171164,
    which included commits to RCS files with non-trunk default branches.

commit d786f620df3639480a99f32d3f4008707602515c
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Tue Jul 3 11:50:02 2007 +0000

    Fix hardware checksum verification on fragments.
    
    Reported/tested by:     Hugo Koji Kobayashi, Vadym Chepkov
    Reviewed/help by:       yongari

commit 67debc100cac6e37d4599cccb35fa5c15c9502a2
Author: Daniel Hartmeier <dhartmei@FreeBSD.org>
Date:   Mon May 21 20:08:59 2007 +0000

    From OpenBSD, rev. 1.524, 1.528, 1.529
    Deal with IPv6 routing headers (see FreeBSD-SA-07:03.ipv6 for background)
    Block IPv6 packets with routing headers by default, unless 'allow-opts'
    is specified. Block RH0 unconditionally. Deal with ip6_plen 0.
    
commit 05d91e4363609f41808e8093ac1f9128762b02b0
Author: Bruce M Simpson <bms@FreeBSD.org>
Date:   Sat Apr 14 01:01:46 2007 +0000

    In member interface detach event handler, do not attempt to free state
    which has already been freed by in_ifdetach(). With this cumulative change,
    the removal of a member interface will not cause a panic in pfsync(4).
    
    Requested by:   yar
    PR:             86848

commit 6b47cca2a770605d56f3498eae82d8490fbf9c85
Author: Bruce M Simpson <bms@FreeBSD.org>
Date:   Mon Mar 19 17:52:15 2007 +0000

    Teach pfsync(4) that its member interfaces may go away.
    
    This change partially resolves the issue in the PR. Further architectural
    fixes, in the form of reference counting, are needed.
    
    PR:             86848

commit 191c6e1310eb0448bd696f1254379d93ae45871b
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Mon Jan 1 16:51:11 2007 +0000

    Clean up pfr_kentry_pl2 as well.  This fixes a kernel panic in the vm.zone
    sysctl after unloading pf.
    
    Submitted by:   Earl Lapus

commit 0dea849ae93133a4a02f0d5fd58340d3df92668b
Author: John Baldwin <jhb@FreeBSD.org>
Date:   Fri Dec 29 13:59:50 2006 +0000

    Various bpf(4) related fixes to catch places up to the new bpf(4)
    semantics.
    - Stop testing bpf pointers for NULL.  In some cases use
      bpf_peers_present() and then call the function directly inside the
      conditional block instead of the macro.
    - For places where the entire conditional block is the macro, remove the
      test and make the macro unconditional.
    - Use BPF_MTAP() in if_pfsync on FreeBSD instead of an expanded version of
      the old semantics.
    
commit 240589a9fec34f1cd809cc429f2c56147a0383bd
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Fri Dec 29 13:59:03 2006 +0000

    Work around a long standing LOR with user/group rules by doing the socket
    lookup early.  This has some performance implications and should not be
    enabled by default, but might help greatly in certain setups.  After some
    more testing this could be turned into a sysctl.
    
    Tested by:      avatar

commit acd3428b7d3e94cef0e1881c868cb4b131d4ff41
Author: Robert Watson <rwatson@FreeBSD.org>
Date:   Mon Nov 6 13:42:10 2006 +0000

    Sweep kernel replacing suser(9) calls with priv(9) calls, assigning
    specific privilege names to a broad range of privileges.  These may
    require some future tweaking.
    
    Obtained from:          TrustedBSD Project

commit aed557087269cd052aa76cc15af4a1fd70cbbf24
Author: Robert Watson <rwatson@FreeBSD.org>
Date:   Sun Oct 22 11:52:19 2006 +0000

    Complete break-out of sys/sys/mac.h into sys/security/mac/mac_framework.h
    begun with a repo-copy of mac.h to mac_framework.h.  sys/mac.h now
    contains the userspace and user<->kernel API and definitions, with all
    in-kernel interfaces moved to mac_framework.h, which is now included
    across most of the kernel instead.
    
    This change is the first step in a larger cleanup and sweep of MAC
    Framework interfaces in the kernel, and will not be MFC'd.
    
    Obtained from:  TrustedBSD Project

commit d94f2a68f8c39a5abc9ba9c58e959f31bc90194d
Author: Christian S.J. Peron <csjp@FreeBSD.org>
Date:   Tue Sep 12 04:25:13 2006 +0000

    Introduce a new entry point, mac_create_mbuf_from_firewall. This entry point
    exists to allow the mandatory access control policy to properly initialize
    mbufs generated by the firewall. An example where this might happen is keep
    alive packets, or ICMP error packets in response to other packets.
    
    This takes care of kernel panics associated with un-initialize mbuf labels
    when the firewall generates packets.
    
    [1] I modified this patch from it's original version, the initial patch
        introduced a number of entry points which were programmatically
        equivalent. So I introduced only one. Instead, we should leverage
        mac_create_mbuf_netlayer() which is used for similar situations,
        an example being icmp_error()
    
        This will minimize the impact associated with the MFC
    
    Submitted by:   mlaier [1]
    
commit a7c4fe03a8b2506199024bc2e8312db729ee972d
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Wed Sep 6 17:19:45 2006 +0000

    Fix stateful filtering of loopback IPv6 traffic to an address not configured
    on lo0.  While here fix a comment.
    
    PR:             kern/102647
    Reported by:    Frank Steinborn
    Submitted by:   suz (earlier version)

commit cff1b3389b89c1426f49b32188ab44c5bdb7b2cd
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Fri Jul 21 09:48:13 2006 +0000

    Import from OpenBSD 1.168, dhartmei:
      fix a bug in the input sanity check of DIOCCHANGERULE (not used by pfctl,
      but third-party tools). a rule must have a non-empty replacement address
      list when it's a translation rule but not an anchor call (i.e. "nat ...
      ->" needs a replacement address, but "nat-anchor ..." doesn't). the check
      confused "rule is an anchor call" with "rule is defined within an anchor".
      report from Michal Mertl, Max Laier.
    
    Obtained from:  OpenBSD

commit 6b7330e2d4efaad175df97ceea09059169746b28
Author: Sam Leffler <sam@FreeBSD.org>
Date:   Sun Jul 9 06:04:01 2006 +0000

    Revise network interface cloning to take an optional opaque
    parameter that can specify configuration parameters:
    o rev cloner api's to add optional parameter block
    o add SIOCCREATE2 that accepts parameter data
    o rev vlan support to use new api (maintain old code)
    
commit 05206588f20bba2f055822295e5423331a70d9c7
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Sat Jul 8 00:01:01 2006 +0000

    Make in-kernel multicast protocols for pfsync and carp work after enabling
    dynamic resizing of multicast membership array.
    
    Reported and testing by:        Maxim Konovalov, Scott Ullrich

commit a6831e7e3a5f8027fde6d886cbeaf2b17795d8bd
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Fri Jun 16 10:25:06 2006 +0000

    Fix pfsync w/o carp compilation.
    
    Submitted by:   yar

commit c0e9fdd3215b8e3d9a99a69dfdaad7308e81e9ce
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Wed Jun 14 11:11:54 2006 +0000

    Fix byteorder of syncpeer and make it actually work.
    
    Submitted by:   glebius

commit 210c3cc4c3572d573bbe057f786dd4d41bb643ca
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Fri May 12 16:15:34 2006 +0000

    Put debugging messages related to inconsistent ticket numbers under misc and
    wrap it __FreeBSD__ specific as I couldn't figure out which version of
    OpenBSD I got it from.
    
    Reported by:    Scott Ullrich

commit 94f2dfdd76940ec3f4b947b480be4a48a5ee2047
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Sat Mar 25 21:15:25 2006 +0000

    Loopback pf_norm.c rev. 1.106 from OpenBSD:
        fixup IP checksum when modifying IP header fields
    
    PR:             kern/93849
    Obtained from:  OpenBSD

commit 3546dc71f09ea2d76ef3a807765a21c61d6f9d48
Author: Yaroslav Tykhiy <ytykhiy@gmail.com>
Date:   Thu Mar 9 15:54:01 2006 +0000

    Avoid pulling in the whole <net/pfvar.h> by opaquely declaring
    the structs pflog_packet() takes pointers to.
    
commit 5bba2114d0aeb3adc36f08ea8c5a0712f29c2e76
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Sun Feb 5 17:17:32 2006 +0000

    Make pflog a seperate module.  As a result pflog_packet() becomes a function
    pointer that is declared in pf_ioctl.c
    
    Requested by:   yar (as part of the module build reorg)

commit 31f9d10a7771b39009a35c4b36fdbe2797db8e64
Author: Daniel Hartmeier <dhartmei@FreeBSD.org>
Date:   Thu Jan 19 11:46:45 2006 +0000

    fix a bug in the fragment cache (used for 'scrub fragment crop/drop-ovl',
    but not 'fragment reassemble'), which can cause some fragments to get
    inserted into the cache twice, thereby violating an invariant, and panic-
    ing the system subsequently.
    
commit 4cd9957a80844fc0ea5d04b17dcd2217ea72a9b9
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Sat Jan 14 22:19:17 2006 +0000

    Move m_adj after checking that m_dup succeeded.
    
    Found with:     Coverity Prevent(tm)

commit 6ae8d74a9e553f229d62f1d521e66c6008314151
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Sun Dec 25 23:52:00 2005 +0000

    Only decrement the max-src-conn counter for tcp connections that reached
    "established" state.
    
    Similar to OpenBSD's rev. 1.499 by joel but not breaking ABI.
    
    Obtained from:  OpenBSD (with changes)
    Reported by:    Bruno Afonso

commit 8d13037cda75b92097a08f1faf22ee428c2d4cc7
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Sun Dec 25 22:57:08 2005 +0000

    Fix build after timeval.tv_sec changed from long to time_t.

commit 602d8f4030dfc5a9a850918f17b6509915d1b360
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Tue Dec 20 00:33:33 2005 +0000

    Move PFSTATE_EXPIRING from sync_flags to a new local_flags.  sync_flags has
    special handling when zero.  This caused no PFSYNC_ACT_DEL message and thus
    disfunction of pfflowd and state synchronisation in general.
    
    Discovered by:  thompsa

commit 342ed5d94898694d5ff3b5648cdc247d07dfad16
Author: Ruslan Ermilov <ru@FreeBSD.org>
Date:   Mon Dec 5 11:58:35 2005 +0000

    Fix -Wundef warnings found when compiling i386 LINT, GENERIC and
    custom kernels.

commit 4e7e0183e1884e2ea9beb2720b22610c0a9e83ba
Author: Andrew Thompson <thompsa@FreeBSD.org>
Date:   Tue Nov 8 20:08:34 2005 +0000

    Move the cloned interface list management in to if_clone. For some drivers the
    softc lists and associated mutex are now unused so these have been removed.
    
    Calling if_clone_detach() will now destroy all the cloned interfaces for the
    driver and in most cases is all thats needed to unload.
    
    Idea by:        brooks

commit febd0759f34e2faaaed0abf5fafb1071090aef38
Author: Andrew Thompson <thompsa@FreeBSD.org>
Date:   Wed Oct 12 19:52:16 2005 +0000

    Change the reference counting to count the number of cloned interfaces for each
    cloner. This ensures that ifc->ifc_units is not prematurely freed in
    if_clone_detach() before the clones are destroyed, resulting in memory modified
    after free. This could be triggered with if_vlan.
    
    Assert that all cloners have been destroyed when freeing the memory.
    
    Change all simple cloners to destroy their clones with ifc_simple_destroy() on
    module unload so the reference count is properly updated. This also cleans up
    the interface destroy routines and allows future optimisation.
    
    Discussed with: brooks, pjd, -current

commit 922e338183b53c227ff1d61c0dc539b2b6629e00
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Sun Sep 11 11:55:39 2005 +0000

    Stop leaking a lock.  This used to cause a propagate_priority() page fault
    when setting syncdev and syncpeer.
    
    Reported by:    Dominic Marks

commit 82f0cb7f33e8dc39f36786e28613d5476d8dcb87
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Thu Sep 8 17:42:42 2005 +0000

    Unbreak the build.  Committed from the wrong directory.

commit 5e11e6c0965c5129ce84685e911e04c580f1e98a
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Thu Sep 8 15:06:52 2005 +0000

    Commit imported changes to HEAD:
     pf_ioctl.c Revision 1.153 Sun Aug 7 11:37:33 2005 UTC by dhartmei
     | verify ticket in DIOCADDADDR, from Boris Polevoy, ok deraadt@
    
     pf_ioctl.c Revision 1.158 Mon Sep 5 14:51:08 2005 UTC by dhartmei
     | in DIOCCHANGERULE, properly initialize table, if used in NAT rule.
     | from Boris Polevoy <vapcom at mail dot ru>, ok mcbride@
    
     pf.c Revision 1.502 Mon Aug 22 11:54:25 2005 UTC by dhartmei
     | when nat'ing icmp 'connections', replace icmp id with proxy values
     | (similar to proxy ports for tcp/udp). not all clients use
     | per-invokation random ids, this allows multiple concurrent
     | connections from such clients.
     | thanks for testing to Rod Whitworth, "looks ok" markus@
    
     pf.c Revision 1.501 Mon Aug 22 09:48:05 2005 UTC by dhartmei
     | fix rdr to bitmask replacement address pool. patch from Max Laier,
     | reported by Boris Polevoy, tested by Jean Debogue, ok henning@
    
    Obtained from:  OpenBSD

commit 9e34bd388c820f003de23eb5f323b4fe2b5d8344
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Thu Sep 8 14:59:36 2005 +0000

    Loopback four fixes from OpenBSD for problems reported to the freebsd-pf
    mailing list onto the vendor branch:
     pf_ioctl.c Revision 1.153 Sun Aug 7 11:37:33 2005 UTC by dhartmei
     | verify ticket in DIOCADDADDR, from Boris Polevoy, ok deraadt@
    
     pf_ioctl.c Revision 1.158 Mon Sep 5 14:51:08 2005 UTC by dhartmei
     | in DIOCCHANGERULE, properly initialize table, if used in NAT rule.
     | from Boris Polevoy <vapcom at mail dot ru>, ok mcbride@
    
     pf.c Revision 1.502 Mon Aug 22 11:54:25 2005 UTC by dhartmei
     | when nat'ing icmp 'connections', replace icmp id with proxy values
     | (similar to proxy ports for tcp/udp). not all clients use
     | per-invokation random ids, this allows multiple concurrent
     | connections from such clients.
     | thanks for testing to Rod Whitworth, "looks ok" markus@
    
     pf.c Revision 1.501 Mon Aug 22 09:48:05 2005 UTC by dhartmei
     | fix rdr to bitmask replacement address pool. patch from Max Laier,
     | reported by Boris Polevoy, tested by Jean Debogue, ok henning@

commit ef2e5f06f26e76550b554736af1eef94e7d16d6a
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Tue Aug 9 11:59:02 2005 +0000

    Wrap the new world order in __FreeBSD__ to ease future imports.

commit 13f4c340aeeeb104844712bb36899d1adef50579
Author: Robert Watson <rwatson@FreeBSD.org>
Date:   Tue Aug 9 10:20:02 2005 +0000

    Propagate rename of IFF_OACTIVE and IFF_RUNNING to IFF_DRV_OACTIVE and
    IFF_DRV_RUNNING, as well as the move from ifnet.if_flags to
    ifnet.if_drv_flags.  Device drivers are now responsible for
    synchronizing access to these flags, as they are in if_drv_flags.  This
    helps prevent races between the network stack and device driver in
    maintaining the interface flags field.
    
    Many __FreeBSD__ and __FreeBSD_version checks maintained and continued;
    some less so.
    
commit ffe93c0d25abdc9fe237afc8fa6364221a9b5db9
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Wed Jul 20 18:58:27 2005 +0000

    Prevent a race condition.  As pf_send_tcp() - called for expired synproxy
    states - has to drop the lock when calling back to ip_output(), the state
    purge timeout might run and gc the state. This results in a rb-tree
    inconsistency.  With this change we flag expiring states while holding the
    lock and back off if the flag is already set.
    
    Reported by:    glebius

commit 6c4eaa873f66e1524c5715ecbde39fe8aad626dc
Author: Hajimu UMEMOTO <ume@FreeBSD.org>
Date:   Wed Jul 20 10:30:52 2005 +0000

    move RFC3542 related definitions into ip6.h.
    
    Submitted by:   Keiichi SHIMA <keiichi__at__iijlab.net>
    Obtained from:  KAME

commit 6de8d9dc528aa384846404aae16981d98eddfff4
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Thu Jul 14 22:22:51 2005 +0000

    Export pfsyncstats via sysctl "net.inet.pfsync" in order to print them with
    netstat (seperate commit).
    
    Requested by:   glebius

commit 889ad0384e016610ee9b60b7f36b42da35b3e346
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Sun Jun 26 21:00:52 2005 +0000

    Properly initialize ifq_maxlen for the defered send queue and make it
    actually work.  Also use the right semantics for IF_HANDOFF to get correct
    stats.
    
    Reported and tested by: Sascha Luck <sascha at c4inet dot net>

commit c8d1dc8cc8eb98c69b02234411172548babf40f1
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Sun Jun 12 16:46:20 2005 +0000

    Mark pf callouts as NET_MPSAFE.
    
    Requested by:   yongari (serveral times)

commit fe2f7b3b0dcd1c438d6efd484b9f529ba9d9ad78
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Fri Jun 10 17:23:49 2005 +0000

    Defer ip_output of pfsync updates to an independent callout thread instead
    of just dropping the lock around the ip_output call.  This used to cause
    corrupted state tree walks for some call-paths.
    
    In a second stage all callouts will be marked MPSAFE according to the
    setting of mpsafenet.
    
    Reported and tested by: Matthew Grooms <mgrooms at seton dot org>

commit fc74a9f93a5fbc83262aa12084404ac953c854b5
Author: Brooks Davis <brooks@FreeBSD.org>
Date:   Fri Jun 10 16:49:24 2005 +0000

    Stop embedding struct ifnet at the top of driver softcs. Instead the
    struct ifnet or the layer 2 common structure it was embedded in have
    been replaced with a struct ifnet pointer to be filled by a call to the
    new function, if_alloc(). The layer 2 common structure is also allocated
    via if_alloc() based on the interface type. It is hung off the new
    struct ifnet member, if_l2com.
    
    This change removes the size of these structures from the kernel ABI and
    will allow us to better manage them as interfaces come and go.
    
    Other changes of note:
     - Struct arpcom is no longer referenced in normal interface code.
       Instead the Ethernet address is accessed via the IFP2ENADDR() macro.
       To enforce this ac_enaddr has been renamed to _ac_enaddr.
     - The second argument to ether_ifattach is now always the mac address
       from driver private storage rather than sometimes being ac_enaddr.
    
commit ac9dfc90617cc94f54aacf3806281a1690f19e52
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Wed May 4 19:51:06 2005 +0000

    if_mtu not ifp_mtu.

commit 69d933349423cef2a1786ec3173e804ad38fdf5a
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Wed May 4 16:03:01 2005 +0000

    Bring back fix from rev. 1.28 which was lost during the import.

commit 8398e1894df517859523e2e2ab3582fc03ad16d9
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Wed May 4 15:55:29 2005 +0000

    Combine rev. 1.29 and 1.30 to something that will make sense for future
    imports.

commit 10ca483be0e8c20dc622c7123ab8677169bb9f2f
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Wed May 4 15:29:28 2005 +0000

    Make LINT happy.

commit c773494edd9d7aea4c5e7246345c570ded196c5c
Author: Andre Oppermann <andre@FreeBSD.org>
Date:   Wed May 4 13:09:19 2005 +0000

    Pass icmp_error() the MTU argument directly instead of
    an interface pointer.  This simplifies a couple of uses
    and removes some XXX workarounds.

commit b01933e6bf90b35ba467ac88917f46cc3676b371
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Tue May 3 16:43:32 2005 +0000

    Resolve conflicts created during the import of pf 3.7 Some features are
    missing and will be implemented in a second step.  This is functional as is.
    
    Tested by:      freebsd-pf, pfsense.org
    Obtained from:  OpenBSD

commit f0d663ded81d0c3870cc52237084ec88468f909b
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Tue May 3 16:34:36 2005 +0000

    Import pf from OpenBSD 3.7 (OPENBSD_3_7 as of today)

commit 2fa088e9697e0453f543581d6e6b3288f86705c2
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Fri Apr 22 09:53:46 2005 +0000

    Fix error in synproxy connection completion. Source and
    destination windows were confused, one instead of other.
    This error was masked, because first segment of just
    established connection is usually smaller than initially
    announced window, and it was successfully passed. First
    window reannouncement corrected erroneous 'seqhi' value.
    The error showed up when client connected to synproxy
    with zero initial window, and reannounced it after
    session establishment.
    
    In collaboration with:  dhartmei [we came to same patch independtly]

commit 699df192d98ba2635b91cb401c31d8b9ee1d6a3d
Author: Gleb Smirnoff <glebius@FreeBSD.org>
Date:   Wed Apr 13 21:05:55 2005 +0000

    Fix mss byte order, only affects synproxy code path.
    
    Submitted by:   John L. Scarfone via OpenBSD
    Obtained from:  OpenBSD, rev. 1.483

commit 93d6cddf05aba88bedab5e7da360b6fac25cdd1c
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Mon Feb 21 17:20:00 2005 +0000

    Fix a terrible braino in pfi_maybe_destroy() and unbreak "$pfctl -Fall" with
    renamed interfaces.
    
    PR:             kern/77645
    Reported by:    Harald Schmalzbauer <harryNOschmalzbauerSPAMde>

commit a94f16f4fa5d2ace0f180a865ca869d6a094c167
Author: Pyun YongHyeon <yongari@FreeBSD.org>
Date:   Thu Feb 17 03:36:31 2005 +0000

    Fix inteface clear time. pf printed "Thu Jan  1 09:00:01 1970"
    in "pfctl -vvsI" output when pf was statically linked to kernel.
    
commit 68198dedf8ff5c95c14cea3e121c622595c3901a
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Wed Feb 9 19:29:13 2005 +0000

    Access softc embedded struct ifnet via function macro to make it easier to
    untangle struct ifnet and softc/arpcom in the future.
    
    Requested by:   brooks

commit d4f925e4df3a58f927a105afb7da4de67b444212
Author: Daniel Hartmeier <dhartmei@FreeBSD.org>
Date:   Thu Jan 20 18:07:35 2005 +0000

    Use the packet's address family instead of the rule's when selecting a
    replacement address for an rdr rule. Some rdr rules have no address family
    (when the replacement is a table and no other criterion implies one AF).
    In this case, pf would fail to select a replacement address and drop the
    packet due to translation failure.
    
    Found by:       Gustavo A. Baratto

commit 9624b04d64cb2e6b8efb76a06016ca8c67722a22
Author: Daniel Hartmeier <dhartmei@FreeBSD.org>
Date:   Wed Jan 19 21:37:00 2005 +0000

    Prohibit ruleset changes at securelevel > 2, not > 1. It's documented
    like this in init(8), but the code didn't match the documentation.
    
    Submitted by:   Juraj Lutter <otis at sk dot FreeBSD dot org>

commit 2726bbe22126e72592ad2532831248073df11e17
Author: Daniel Hartmeier <dhartmei@FreeBSD.org>
Date:   Sun Dec 19 19:43:04 2004 +0000

    Initialise init_addr in pf_map_addr() in the PF_POOL_ROUNDROBIN,
    prevents a possible endless loop in pf_get_sport() with 'static-port'
    
    ICMP state entries use the ICMP ID as port for the unique state key. When
    checking for a usable key, construct the key in the same way. Otherwise,
    a colliding key might be missed or a state insertion might be refused even
    though it could be inserted. The second case triggers the endless loop,
    possibly allowing a NATed LAN client to lock up the kernel.
    
    PR:                     kern/74930
    Reported and tested by: Hugo Silva, Srebrenko Sehic

commit 7cadbe4109ef795d569cca2153b2f815a172977b
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Fri Dec 10 17:42:47 2004 +0000

    Compile pfsync w/o bpf.
    
    Noticed by:     "Jayel Villamin" <jarthel operamail com>

commit 8092705059fbbd545ec6afbc14183d5522956bb7
Author: Daniel Hartmeier <dhartmei@FreeBSD.org>
Date:   Sun Dec 5 12:15:43 2004 +0000

    IPv6 packets can contain headers (like options) before the TCP/UDP/ICMP6
    header. pf finds the first TCP/UDP/ICMP6 header to filter by traversing
    the header chain. In the case where headers are skipped, the protocol
    checksum verification used the wrong length (included the skipped headers),
    leading to incorrectly mismatching checksums. Such IPv6 packets with
    headers were silently dropped.
    
    Discovered by:  Bernhard Schmidt

commit 1a4a376387ac0ee017342057ed2041c04ce95fea
Author: Daniel Hartmeier <dhartmei@FreeBSD.org>
Date:   Wed Nov 24 00:43:34 2004 +0000

    fix a bug that leads to a crash when binat rules of the form
    'binat from ... to ... -> (if)' are used, where the interface
    is dynamic.
    
    Discovered by:  kos(at)bastard(dot)net
    Analyzed by:    Pyun YongHyeon

commit 9528cdfa6e050d617e3b1151651735c08a2af248
Author: Ruslan Ermilov <ru@FreeBSD.org>
Date:   Mon Nov 8 20:24:52 2004 +0000

    Removed the remnants of gx(4).

commit a9052a16910fdaef5cd65cff6993daf94019ddc4
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Wed Nov 3 17:21:12 2004 +0000

    Improved interface handling. This should fix the use of renamed interfaces
    (ifconfig xl0 name foo) as well as some special interfaces such as the 6to4
    tunnel.
    
    Reported by:    Ed Schouten <ed (at) il ! fontys , nl>
    Tested by:      freebsd-pf
    PR:             kern/72444

commit b6b3698c8e19af05ff3f58fa1fdfec6291358b3c
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Sun Oct 24 19:35:02 2004 +0000

    Fix a panic discovered with some apache2 configure test (that seemed to
    trigger a socket creation race some some kind). Checking for non-NULL socket
    and credential is not a bad idea anyway. Unfortunatly too late for the
    release.
    
    Reported & tested by:   Gilbert Cao

commit d6a8d588758b384d3fbf57425b886754c9ed710d
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Wed Sep 29 04:54:33 2004 +0000

    Add an additional struct inpcb * argument to pfil(9) in order to enable
    passing along socket information. This is required to work around a LOR with
    the socket code which results in an easy reproducible hard lockup with
    debug.mpsafenet=1. This commit does *not* fix the LOR, but enables us to do
    so later. The missing piece is to turn the filter locking into a leaf lock
    and will follow in a seperate (later) commit.
    
    This will hopefully be MT5'ed in order to fix the problem for RELENG_5 in
    forseeable future.
    
    Suggested by:           rwatson
    A lot of work by:       csjp (he'd be even more helpful w/o mentor-reviews ;)
    Tested by:              -pf, -ipfw, LINT, csjp and myself

commit 7ea7663ca478980fc48e274e7fc29d41eb605111
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Thu Sep 23 12:44:40 2004 +0000

    Protect sockaddr_union definitions with a protecting define. This allows to
    build kernels with FAST_IPSEC and PF. This is the least disruptive fix.
    
    PR:             kern/71836

commit abd627ebb734f5cbb76453aa60760db8fc7dbda5
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Fri Sep 17 02:15:05 2004 +0000

    Break out altq_enable/disable from DIOC{START,STOP}ALTQ into seprate
    functions that can be called from enable/disable pf as well. This improves
    switching from non-altq ruleset to altq ruleset (and the other way 'round)
    by a great deal and makes pfctl act like the user would except it to.
    
    PR:             kern/71746
    Tested by:      Aurilien "beorn" Rougemont (PR submitter)

commit 4758aa2bd49eab71256c9f136411082595735c13
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Tue Sep 14 15:20:24 2004 +0000

    Reactivate skipping over bogus IPCP addresses on ppp interfaces. Be more
    careful with the skip condition this time. Addresses are only not taken into
    account if:
            - The interface is POINTTOPOINT
            - There is no route installed for the address
            - The user specified noalias (:0)
    and     - We are looking at an IPv4 address.
    
    This should be enough paranoia to not cause any false positives.
    
    PR:             misc/69954

commit f78086efb62ae868d28e7c978acfa7d04ffc4d1d
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Tue Sep 14 03:12:01 2004 +0000

    Move pf* init from SI_SUB_PSEUDO to SI_SUB_PROTO_IFATTACHDOMAIN where it is
    save to call if_attachdomain from if_attach() (as done for if_loop.c). We
    will now end up with a properly initialized if_afdata array and the nd6
    callout will no longer try to deref a NULL pointer.
    
    Still this is a temp workaround and the locking for if_afdata should be
    revisited at a later point.
    
    Requested by:                   rwatson
    PR:                             kern/70393

commit c9f6794e2e3ff76f711857f5700975ae4aa27c3d
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Sat Sep 11 11:18:25 2004 +0000

    One more round on the H/W supported checksum code: Fix NICs that can't do
    the pseudo header. We really need the TCP packet length here. This happens
    to end up in ip->ip_len in tcp_input.c, but here we should get it from the
    len function variable instead.
    
    Submitted by:   yongari

commit 7fff37fc1520a98672a04ab4ef0a1a4204126d15
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Sun Aug 22 15:23:48 2004 +0000

    Use securelevel_gt instead of reading global securelevel unprotected.
    
    Submitted by:   yongari

commit e89d8405c7b25694dcea939b1f0784d30ae94cfd
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Mon Aug 16 17:58:12 2004 +0000

    Comment out rev. 1.4 after problems w/ IPv6, a better solution must be
    found.

commit 1f44b0a1b539198ce55bf97e73d51ded20a55ab4
Author: David Malone <dwmalone@FreeBSD.org>
Date:   Sat Aug 14 15:32:40 2004 +0000

    Get rid of the RANDOM_IP_ID option and make it a sysctl.  NetBSD
    have already done this, so I have styled the patch on their work:
    
            1) introduce a ip_newid() static inline function that checks
            the sysctl and then decides if it should return a sequential
            or random IP ID.
    
            2) named the sysctl net.inet.ip.random_id
    
            3) IPv6 flow IDs and fragment IDs are now always random.
            Flow IDs and frag IDs are significantly less common in the
            IPv6 world (ie. rarely generated per-packet), so there should
            be smaller performance concerns.
    
    The sysctl defaults to 0 (sequential IP IDs).
    
    Based on:       NetBSD

commit 571065e55f6b203f61cc6decb37a287007748990
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Thu Aug 12 14:15:42 2004 +0000

    Loopback fix from Mathieu Sauve-Frankel:
            Add missing check for NULL in DIOCCHANGERULE. This prevents a crash
            in certain rare cases.

commit 61ba182027cd9c23aaec075380e20e0e75ef5374
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Thu Aug 12 14:09:56 2004 +0000

    Import a fix from the OpenBSD-stable branch, that slipped by my previous
    import. Sorry.

commit 01105bbf3b3c292e479ea7b5ed105401288a3f21
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Thu Aug 12 13:59:44 2004 +0000

    Loopback fix from Daniel Hartmeier:
            pf_cksum_fixup() was called without last argument from
            normalization, also fixup checksum when random-id modifies ip_id.
            This would previously lead to incorrect checksums for packets
            modified by scrub random-id.
    
    (Originally) Submitted by:      yongari

commit 91a9e0b42b516cdc6b839e6cee70dad2cfb9588d
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Thu Aug 12 13:54:50 2004 +0000

    Loopback fix from Henning Brauer:
            skip over interface addresses without IFA_ROUTE, fixes some issue
            with pppd
    
    PR:     misc/69954

commit bf47a23754611d3d8f2a6896e44ed13a76a49229
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Thu Aug 12 13:46:21 2004 +0000

    Import a couple of fixes from OpenBSD-current, which did not make -stable in
    OpenBSD for various reasons.
    
    Discussed with: yongari

commit 8de5b6f306650f89c9c3f19e39014eeded4eeed6
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Thu Aug 5 20:41:38 2004 +0000

    Use in_cksum_skip() to calculate in4_cksum instead of doing handrolled magic
    (that does not compile with !gcc). Moreover we get the benefit for all archs
    that have a hand optimized in_cksum_skip().
    
    Submitted by:   yongari
    Tested by:      me (i386, extensivly), pf4freebsd ML (various)

commit 7e86873d5cdf26dfe80809340ac94a2c85bb481d
Author: Alexander Kabaev <kan@FreeBSD.org>
Date:   Wed Jul 28 06:14:44 2004 +0000

    Initialize s variable early to shut up GCC warnings.
    Do not declare inline functions without body as this is useless in
    general and generates a warning with GCC 3.4.x.
    
    Glanced over by:        dhartmei

commit c99c1da5896d5465f8db32e347e710d882a90501
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Fri Jul 23 03:37:05 2004 +0000

    Fix the following LOR on pf module unload:
    1st ifnet (ifnet) @/usr/src/sys/contrib/pf/net/pf_if.c:191
    2nd pf task mtx (pf task mtx) @/usr/src/sys/contrib/pf/net/pf_if.c:197
    
    Reported by:    Pyun YongHyeon (a long time ago)

commit bb73d87a1e7e5a8bf98001171019291136138915
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Fri Jul 23 03:31:42 2004 +0000

    Refine pf_check_proto_cksum() a bit in order to avoid additional in_pseudo()
    calls further down the stack. If we find the cksum to be okay we pretend
    that the hardware did all the work and hence keep the upper layers from
    checking again.
    
    Submitted by:   Pyun YongHyeon

commit e89865e51661585e7dccc43e66a399c7b9d23124
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Sun Jul 18 14:25:48 2004 +0000

    Fix a stupid attemp to apply host arithmetics to network byte ordered data.
    This fixes checksum for some drivers with partial H/W ckcsum offloads.
    
    Reported by:    Simon 'corecode' Schubert, Devon H. O'Dell, hmp

commit a9ce8750b6e480dc99d1ecc32a16d62f7c311a3a
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Sun Jul 18 00:51:56 2004 +0000

    m_tag_copy takes an additional "how" parameter in FreeBSD.
    
    Submitted by:   rwatson

commit 0ad9506fab5f6a8daf7a7001e1c87d1b1f3db2fd
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Sat Jul 17 17:15:15 2004 +0000

    Merge in a stable fix from OpenBSD:
      MFC:
      Fix by dhartmei@
    
      change pf_route() loop detection: introduce a counter (number of times
      a packet is routed already) in the mbuf tag, allow at most four times.
      Fixes some legitimate cases broken by the previous change.
    

commit c06368a3a9877fe5417f6dd18ba2b54320c320df
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Sat Jul 17 17:06:41 2004 +0000

    Import from OpenBSD stable branch

commit c550f2206df6e1b4ce178236fe4f460702a0ed4e
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Sat Jul 17 05:10:06 2004 +0000

    Define semantic of M_SKIP_FIREWALL more precisely, i.e. also pass associated
    icmp_error() packets. While here retire PACKET_TAG_PF_GENERATED (which
    served the same purpose) and use M_SKIP_FIREWALL in pf as well. This should
    speed up things a bit as we get rid of the tag allocations.
    
    Discussed with: juli

commit f889d2ef8da175657081833cd39f04f0c12b1827
Author: Brooks Davis <brooks@FreeBSD.org>
Date:   Tue Jun 22 20:13:25 2004 +0000

    Major overhaul of pseudo-interface cloning.  Highlights include:
    
     - Split the code out into if_clone.[ch].
     - Locked struct if_clone. [1]
     - Add a per-cloner match function rather then simply matching names of
       the form <name><unit> and <name>.
     - Use the match function to allow creation of <interface>.<tag>
       vlan interfaces.  The old way is preserved unchanged!
     - Also the match function to allow creation of stf(4) interfaces named
       stf0, stf, or 6to4.  This is the only major user visible change in
       that "ifconfig stf" creates the interface stf rather then stf0 and
       does not print "stf0" to stdout.
     - Allow destroy functions to fail so they can refuse to delete
       interfaces.  Currently, we forbid the deletion of interfaces which
       were created in the init function, particularly lo0, pflog0, and
       pfsync0.  In the case of lo0 this was a panic implementation so it
       does not count as a user visiable change. :-)
     - Since most interfaces do not need the new functionality, an family of
       wrapper functions, ifc_simple_*(), were created to wrap old style
       cloner functions.
     - The IF_CLONE_INITIALIZER macro is replaced with a new incompatible
       IFC_CLONE_INITIALIZER and ifc_simple consumers use IFC_SIMPLE_DECLARE
       instead.
    
    Submitted by:   Maurycy Pawlowski-Wieronski <maurycy at fouk.org> [1]
    Discussed on:   net

commit c0d431fe315475c5fe50084db455416148d57914
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Thu Jun 17 16:59:47 2004 +0000

    Import two fixes from the OpenBSD stable branch:
     - prevent an endless loop with route-to lo0, fixes PR 3736 (dhartmei@)
     - The rule_number parameter for pf_get_pool() needs to be 32 bits, not 8 -
       this fixes corruption of the address pools with large rulesets.
       (mcbride@, pb@)
    
    Reviewed-by:    dhartmei

commit 00924b8326ba36adf265e84342f170d44af3579d
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Thu Jun 17 16:52:25 2004 +0000

    Import OpenBSD stable branch.

commit 7c1fe9533390e3a906df00201ee6c66cbac7a031
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Wed Jun 16 23:24:02 2004 +0000

    Commit pf version 3.5 and link additional files to the kernel build.
    
    Version 3.5 brings:
     - Atomic commits of ruleset changes (reduce the chance of ending up in an
       inconsistent state).
     - A 30% reduction in the size of state table entries.
     - Source-tracking (limit number of clients and states per client).
     - Sticky-address (the flexibility of round-robin with the benefits of
       source-hash).
     - Significant improvements to interface handling.
     - and many more ...

commit 32b30983561ed562aa495d8e124488ab94b332aa
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Wed Jun 16 23:03:14 2004 +0000

    Import pf from OpenBSD 3.5 (OPENBSD_3_5_BASE)

commit 779616355ab9e17749867cac3f69fd96cebf0c71
Merge: a306c902b8a2 32b30983561e
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Wed Jun 16 23:03:14 2004 +0000

    This commit was generated by cvs2svn to compensate for changes in r130610,
    which included commits to RCS files with non-trunk default branches.

commit 89c9c53da05197f657dfe8e0bdda6941a2e9a0d4
Author: Poul-Henning Kamp <phk@FreeBSD.org>
Date:   Wed Jun 16 09:47:26 2004 +0000

    Do the dreaded s/dev_t/struct cdev */
    Bump __FreeBSD_version accordingly.

commit 4e6d06effe31018627f381cfcc98eb0918f82052
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Mon Jun 14 16:13:05 2004 +0000

    Remove some more leftover from the old pfaltq_module hack to allow for
    kernels w/ pf, but w/o altq.
    
    Reported-by:     Xin LI

commit cc4dbc7c7d0eb0aaba9bf1ff6ef45b6861057e57
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Sun Jun 13 01:36:31 2004 +0000

    Prepare pf for building with ALTQ:
     - remove old pfaltq module linkage
     - move pfaltq_running to pf_ioctl.c It is protected by PF_LOCK()

commit 1fb675e712bbea24de198a54ecb78592ca316695
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Mon May 31 22:48:19 2004 +0000

    "Get rid of the nested include of <sys/module.h> from <sys/kernel.h>" or
    better do no longer depend on it.
    
    Requested-by:   phk
    Approved-by:    bms(mentor)

commit 01044eaadc8051a1887dd62a62bdbfc2d260d151
Author: Daniel Hartmeier <dhartmei@FreeBSD.org>
Date:   Sun May 2 20:47:24 2004 +0000

    Commit three imported bugfixes from OpenBSD 3.4-stable:
    
      - change pf_get_pool() argument rule_number type from u_int32_t
        to u_int8_t, fixes corruption of address pools with large
        rulesets (mcbride@)
      - prevent endless loops with route-to (dhartmei@)
      - limit option length to 2 octets max (frantzen@)
    
    Obtained from:  OpenBSD

commit ac529e0479b2cc3bc8ea2b7318e626bb53399000
Author: Daniel Hartmeier <dhartmei@FreeBSD.org>
Date:   Sun May 2 19:43:28 2004 +0000

    Import OpenBSD 3.4-stable fixes

commit bb2bfb4fa9ed358aa54648f280c512fc72c10f63
Author: Brooks Davis <brooks@FreeBSD.org>
Date:   Wed Apr 14 00:57:49 2004 +0000

    Staticize <if>_clone_{create,destroy} functions.
    
commit 00e7fbfb6097a88694cf2eb819d9fa6979db7d47
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Sun Apr 11 17:35:40 2004 +0000

    Commit import of OpenBSD-stable fix:
    
     Fix by dhartmei@ and mcbride@
     1.433
     Properly m_copyback() modified TCP sequence number after demodulation
     1.432
     Fix icmp checksum when sequence number modlation is being used.
     Also fix a daddr vs saddr cut-n-paste error in ICMP error handling.
    
     Fixes PR 3724
    
    Obtained from:  OpenBSD

commit f43690eb9eb8ffa9569f916a7e3467f74f85e99d
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Sun Apr 11 17:28:22 2004 +0000

    Import another fix from the OpenBSD-Stable branch:
    
     Fix by dhartmei@ and mcbride@
     1.433
     Properly m_copyback() modified TCP sequence number after demodulation
     1.432
     Fix icmp checksum when sequence number modlation is being used.
     Also fix a daddr vs saddr cut-n-paste error in ICMP error handling.
    
     Fixes PR 3724

commit eaa7035b13ba257afcefcc200e6071581b3ddb92
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Tue Mar 30 18:28:30 2004 +0000

    Shut up a couple of annoying gcc warnings. Do not enclose the fixes with
    #ifdefs in order to loop it back to OpenBSD after the next import. There are
    a some implicit asserts involved which might be better spelled out
    explicitly (af == AF_INET ...)
    
commit cf5011b74ac676652ce6f93f903a8f74ed32b701
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Sun Mar 28 20:04:12 2004 +0000

    Commit two fixes from OpenBSD's stable branch:
    - Fix binat for incoming connections when a netblock (not just a single
      address) is used for source in the binat rule. closes PR 3535, reported by
      Karl O.Pinc. ok henning@, cedric@
    
    - Fix a problem related to empty anchor rulesets, which could cause a kernel
      panic.
    
commit b855d39384634ebd5d730f9576428ff8914294b7
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Sun Mar 28 19:31:37 2004 +0000

    Import two fixes from OpenBSD's stable branch:
    - Fix binat for incoming connections when a netblock (not just a single
      address) is used for source in the binat rule. closes PR 3535, reported by
      Karl O.Pinc. ok henning@, cedric@
    
    - Fix a problem related to empty anchor rulesets, which could cause a kernel
      panic.

commit cc7e9022768010fa3c03c5b84cc387ff88c66240
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Wed Mar 17 21:11:02 2004 +0000

    Style(9) round for the pf kernel parts. Mostly #if defined() -> #ifdef
    
    Also set HOOK_HACK to true (remove the related #ifdef's) as we have the
    hooks in the kernel this was missed during the merge from the port.
    
commit 7b3832e8d6584565e2023b34533d1a12c2681232
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Wed Mar 10 15:08:21 2004 +0000

    Remove `$Name$' leftovers from the port version reporting.
    
commit 01315efca3f597ef662769d7af23b0787c44587d
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Sun Feb 29 16:34:43 2004 +0000

    Remove __inline keyword from functions that can't be inlined according to
    LINT. This fixes LINT compliation for now, but needs to be revised.
    Changes do not affect the objects.
    
commit cc5934f5afcc7d243b43ff83f093676556c2488d
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Thu Feb 26 03:53:54 2004 +0000

    Tweak existing header and other build infrastructure to be able to build
    pf/pflog/pfsync as modules. Do not list them in NOTES or modules/Makefile
    (i.e. do not connect it to any (automatic) builds - yet).
    
commit 2bbe8ffc9d0ed0a0795c6e4af4b11f4c7be49421
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Thu Feb 26 02:34:12 2004 +0000

    Bring diff from the security/pf port. This has code been tested as a port
    for a long time and is run in production use. This is the code present in
    portversion 2.03 with some additional tweaks.
    
    The rather extensive diff accounts for:
     - locking (to enable pf to work with a giant-free netstack)
     - byte order difference between OpenBSD and FreeBSD for ip_len/ip_off
     - conversion from pool(9) to zone(9)
     - api differences etc.
    
commit 5c45a928b95416a77855a8da21bad4df8f60e7a0
Author: Max Laier <mlaier@FreeBSD.org>
Date:   Thu Feb 26 02:04:28 2004 +0000

    Vendor import of OpenBSD's packet filter (pf) as of OpenBSD 3.4

> OpenBSD 3.4 released 2003-11-01
